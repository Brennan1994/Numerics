/*
* NOTICE:
* The U.S. Army Corps of Engineers, Risk Management Center (USACE-RMC) makes no guarantees about
* the results, or appropriateness of outputs, obtained from Numerics.
*
* LIST OF CONDITIONS:
* Redistribution and use in source and binary forms, with or without modification, are permitted
* provided that the following conditions are met:
* ● Redistributions of source code must retain the above notice, this list of conditions, and the
* following disclaimer.
* ● Redistributions in binary form must reproduce the above notice, this list of conditions, and
* the following disclaimer in the documentation and/or other materials provided with the distribution.
* ● The names of the U.S. Government, the U.S. Army Corps of Engineers, the Institute for Water
* Resources, or the Risk Management Center may not be used to endorse or promote products derived
* from this software without specific prior written permission. Nor may the names of its contributors
* be used to endorse or promote products derived from this software without specific prior
* written permission.
*
* DISCLAIMER:
* THIS SOFTWARE IS PROVIDED BY THE U.S. ARMY CORPS OF ENGINEERS RISK MANAGEMENT CENTER
* (USACE-RMC) "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL USACE-RMC BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System.Collections.Generic;
using System.Diagnostics;                               // keep to be able to uncomment and run Debug.WriteLine()
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Numerics.Data;
using Numerics.Mathematics.LinearAlgebra;

namespace Data.Regression
{
    /// <summary>
    /// Unit tests for the Linear Regression class. The linear regression models are validated against R's "lm( )" method, while 
    /// the prediction methods are validated with the "predict.lm( )" function.
    /// </summary>
    /// <remarks>
    ///      <b> Authors: </b>
    /// <list type="bullet">
    /// <item><description>
    ///     Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
    /// </description></item>
    /// <item><description>
    ///     Sadie Niblett, USACE Risk Management Center, sadie.s.niblett@usace.army.mil
    /// </description></item>
    /// </list>
    /// </remarks>
    [TestClass]
    public class Test_LinearRegression
    {
        /// <summary>
        /// Test simple linear regression. 
        /// </summary>
        [TestMethod]
        public void Test_SimpleLinearRegression()
        {
            var consumption = new double[] { 0.61598622, 0.46037569, 0.87679142, -0.27424514, 1.89737076, 0.91199291, 0.79453885, 1.64858747, 1.31372218, 1.89147495, 1.530714,   2.31829471, 1.81073916, -0.04173996,    0.35423556, -0.29163216,    -0.87702794,    0.35113555, 0.4095977,  -1.47580863,    0.83225762, 1.65583461, 1.41942029, 1.05437932, 1.97998024, 0.91391607, 1.05532326, 1.29889825, 1.13637586, 0.54994073, 0.94985262, 1.49599724, 0.57549599, 2.1112096,  0.41796279, 0.7979271,  0.50584598, -0.05775339,    0.9773001,  0.26826982, -0.15391875,    -2.27411019,    1.07188123, 1.31644941, 0.5247277,  -0.01728203,    0.4016515,  -0.7528762, 0.65938376, 0.36854173, 0.76954464, 1.80876006, 0.96802954, 1.95946831, 1.73949442, 1.56389332, 0.84526442, 1.41504495, 0.76546608, 1.31380062, 1.6865532,  0.9343699,  1.90256675, 0.25656565, 0.84304279, 1.1117739,  1.79499406, 0.63768446, 0.01569397, 1.37731686, 1.15225712, 0.21016439, 1.76316026, 0.73053714, 0.85083233, 1.13789838, 0.46064152, 0.46937808, 0.98950145, 0.43942767, 0.85543417, 0.31230451, 0.40261313, -0.75910716,    -0.34535008,    0.83564224, 0.48439843, -0.02626579,    1.85996999, 0.68354371, 1.07661214, 1.18372396, 0.37817936, 0.89392729, 1.09813766, 0.88122025, 1.14064791, 0.77176225, 0.77214364, 1.07014805, 0.26420505, 0.89311141, 0.91264702, 0.70025425, 0.92360967, 1.07997887, 0.60055799, 0.78298122, 1.04949253, 0.45219855, 1.69654264, 1.18062797, 1.02693626, 1.75069399, 1.30596977, 1.45888615, 0.94821191, 1.46971415, 1.12921436, 1.45748895, 1.51106759, 0.95508878, 0.96797647, 0.88629738, 0.42159086, 0.25689982, 0.36381084, 1.51630321, 0.29958257, 0.50899032, 0.69667241, 0.53634306, 0.43826169, 1.10719086, 1.46377882, 0.77334046, 0.96768535, 0.64760607, 0.95117167, 1.02041702, 0.76172556, 1.08136588, 0.77186494, 0.37591485, 1.11522822, 0.53100554, 0.58208747, 1.01434389, 0.52486184, 0.33874119, 0.44391875, 0.12505584, -0.20652548,    0.16783443, -0.72499446,    -1.21068558,    -0.3435437, -0.45174364,    0.60491332, -0.01115014,    0.5348174,  0.81040406, 0.64501881, 1.01833874, 0.50041315, 0.20141978, 0.43372599, 0.33593895, 0.60108995, 0.16942956, 0.26416034, 0.27877186, 0.46861292, 0.20545802, 0.46641787, 0.83917367, 0.47345118, 0.93375698, 0.91687178, 1.1253325,  0.59624005, 0.70814389, 0.66496956, 0.56167978, 0.40468216, 1.04770741, 0.72959779};
            var income = new double[] {0.97226104, 1.16908472, 1.55327055, -0.25527238, 1.98715363, 1.44733417, 0.53181193, 1.16012514, 0.4570115,  1.01662441, 1.90410126, 3.89025866, 0.70825266, 0.79430954, 0.43381827, 1.09380979, -1.66168482,    -0.93835321,    0.09448779, -0.12259599,    -0.16369546,    4.53650956, -1.46376532,    0.76166351, 1.16825761, 0.51729906, 0.73370026, 0.59458339, -0.03108003,    1.23808955, 1.51880293, 1.9145624,  0.70266687, 0.98314132, 0.7199262,  0.78553605, 1.05755946, -0.86765105,    0.4710034,  0.44037974, 0.33827686, -1.46388507,    1.21301507, 1.94243865, -0.26813406,    -0.02363025,    2.02680183, 0.19560628, 0.11969888, 0.57548997, 0.5348441,  0.44938311, 0.85588425, 0.70632719, 1.49810999, 2.13138911, 2.02348788, 1.64921136, 1.36163845, 0.81927319, -0.23895759,    1.90677905, -0.33536283,    1.14181151, 1.2395111,  1.31938549, 0.7047715,  0.17977925, 0.81973366, -0.97505791,    1.80185055, 1.32743427, 1.44861875, 1.02084894, 0.95820336, 0.96207024, 1.22693023, -0.29489091,    0.67822897, 0.80025832, 0.83939484, 0.59572848, 0.03740765, -0.79479735,    0.2118329,  0.69043356, 0.36205181, 0.85100324, 2.12421067, 1.04095059, 0.43562041, 0.34210852, 0.55877186, 0.17627103, 0.05868803, 0.65496353, 0.69846579, 1.05367166, 0.59247377, 1.38110661, 0.94873528, 0.22780635, 0.88957006, 0.57591998, 0.95255663, 0.95161791, 0.79369738, 0.52035746, 0.99858552, 0.85103564, 1.18352222, 1.42325742, 2.10753052, 1.38767133, 1.01464427, 0.80893032, 0.89173174, 0.24722185, 0.66729226, 1.46092242, 1.95061335, 1.03174349, 1.16178668, 0.33725343, 0.84865826, -0.08818148,    2.3367892,  -1.24443353,    2.40331419, 0.50559877, -0.12828194,    0.47941927, 0.27834026, 1.43729445, 1.62544947, 0.40353864, 0.72653162, 0.98056746, 0.52450113, 1.24238706, -0.96827007,    0.78835467, 0.51136949, 0.82191843, 2.25904474, 0.14987813, 0.28490722, 1.30059162, 0.65373993, 0.1926087,  0.26238732, 0.08392938, 0.71926565, 2.08693775, -2.3261186, 0.64019534, -0.18888849,    0.70899368, -1.1034318, -0.13213193,    0.10094986, 1.29229259, 0.49678098, 0.69495229, 1.21571502, -0.15658108,    0.52891255, 0.06074719, 1.62204885, 0.76689543, -0.05071452,    2.59106697, -4.26525047,    0.58146541, 0.58328912, 0.21494896, 1.10369487, 1.29390492, 0.99853396, 1.04641801, 0.4904068,  0.95495949, 0.80166267, 0.7400626,  0.5190254,  0.72372078, 0.64470081 };
            var y = new Vector(consumption) { Header = "Consumption" };
            var x = new Matrix(income) { Header = new string[] { "Income" } };
            var LM = new LinearRegression(x, y);
            var a = LM.Parameters[0];
            var b = LM.Parameters[1];
            var sigA = LM.ParameterStandardErrors[0];
            var sigB = LM.ParameterStandardErrors[1];
            var se = LM.StandardError;
            var r2 = LM.RSquared;
            var ar2 = LM.AdjRSquared;
            var df = LM.DegreesOfFreedom;

            var true_a = 0.54510;
            var true_b = 0.28060;
            var true_sigA = 0.05569;
            var true_sigB = 0.04744;
            var true_se = 0.6026;
            var true_r2 = 0.159;
            var true_ar2 = 0.1545;
            var true_df = 185;

            Assert.AreEqual(a, true_a, 1E-4);
            Assert.AreEqual(b, true_b, 1E-4);
            Assert.AreEqual(sigA, true_sigA, 1E-4);
            Assert.AreEqual(sigB, true_sigB, 1E-4);
            Assert.AreEqual(se, true_se, 1E-4);
            Assert.AreEqual(r2, true_r2, 1E-3);
            Assert.AreEqual(ar2, true_ar2, 1E-4);
            Assert.AreEqual(df, true_df);

            // Test summary output table 
            var summary = LM.Summary();
            for (int i = 0; i < summary.Count; i++)
            {
                // Debug.WriteLine(summary[i]);
            }

            // Model for predicting Consumption:
            // Parameters:
            //                    Estimate  Std. Error     t value  Pr(>| t |)
            // Intercept           0.54510     0.05569       9.789     < 1E-15 * **
            // Income              0.28060     0.04744       5.915   1.58E-008 * **
            // ---
            // Signif.codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
            //
            // Residual standard error: 0.6026 on 185 degrees of freedom
            // Multiple R-squared: 0.1590,  Adjusted R-squared: 0.1545
            // F-statistic: 35.0, on 1 and 185 DF, p-value: < 1E-15
            //
            // Residuals:
            //        Min        1Q    Median        3Q       Max
            //    -2.4084   -0.3182    0.0256    0.2998    1.4516
        }

        /// <summary>
        /// Test multiple linear regression. 
        /// </summary>
        [TestMethod]
        public void Test_MultipleLinearRegression()
        {
            var consumption = new double[] { 0.61598622, 0.46037569, 0.87679142, -0.27424514, 1.89737076, 0.91199291, 0.79453885, 1.64858747, 1.31372218, 1.89147495, 1.530714, 2.31829471, 1.81073916, -0.04173996, 0.35423556, -0.29163216, -0.87702794, 0.35113555, 0.4095977, -1.47580863, 0.83225762, 1.65583461, 1.41942029, 1.05437932, 1.97998024, 0.91391607, 1.05532326, 1.29889825, 1.13637586, 0.54994073, 0.94985262, 1.49599724, 0.57549599, 2.1112096, 0.41796279, 0.7979271, 0.50584598, -0.05775339, 0.9773001, 0.26826982, -0.15391875, -2.27411019, 1.07188123, 1.31644941, 0.5247277, -0.01728203, 0.4016515, -0.7528762, 0.65938376, 0.36854173, 0.76954464, 1.80876006, 0.96802954, 1.95946831, 1.73949442, 1.56389332, 0.84526442, 1.41504495, 0.76546608, 1.31380062, 1.6865532, 0.9343699, 1.90256675, 0.25656565, 0.84304279, 1.1117739, 1.79499406, 0.63768446, 0.01569397, 1.37731686, 1.15225712, 0.21016439, 1.76316026, 0.73053714, 0.85083233, 1.13789838, 0.46064152, 0.46937808, 0.98950145, 0.43942767, 0.85543417, 0.31230451, 0.40261313, -0.75910716, -0.34535008, 0.83564224, 0.48439843, -0.02626579, 1.85996999, 0.68354371, 1.07661214, 1.18372396, 0.37817936, 0.89392729, 1.09813766, 0.88122025, 1.14064791, 0.77176225, 0.77214364, 1.07014805, 0.26420505, 0.89311141, 0.91264702, 0.70025425, 0.92360967, 1.07997887, 0.60055799, 0.78298122, 1.04949253, 0.45219855, 1.69654264, 1.18062797, 1.02693626, 1.75069399, 1.30596977, 1.45888615, 0.94821191, 1.46971415, 1.12921436, 1.45748895, 1.51106759, 0.95508878, 0.96797647, 0.88629738, 0.42159086, 0.25689982, 0.36381084, 1.51630321, 0.29958257, 0.50899032, 0.69667241, 0.53634306, 0.43826169, 1.10719086, 1.46377882, 0.77334046, 0.96768535, 0.64760607, 0.95117167, 1.02041702, 0.76172556, 1.08136588, 0.77186494, 0.37591485, 1.11522822, 0.53100554, 0.58208747, 1.01434389, 0.52486184, 0.33874119, 0.44391875, 0.12505584, -0.20652548, 0.16783443, -0.72499446, -1.21068558, -0.3435437, -0.45174364, 0.60491332, -0.01115014, 0.5348174, 0.81040406, 0.64501881, 1.01833874, 0.50041315, 0.20141978, 0.43372599, 0.33593895, 0.60108995, 0.16942956, 0.26416034, 0.27877186, 0.46861292, 0.20545802, 0.46641787, 0.83917367, 0.47345118, 0.93375698, 0.91687178, 1.1253325, 0.59624005, 0.70814389, 0.66496956, 0.56167978, 0.40468216, 1.04770741, 0.72959779 };
            var income = new double[] { 0.97226104, 1.16908472, 1.55327055, -0.25527238, 1.98715363, 1.44733417, 0.53181193, 1.16012514, 0.4570115, 1.01662441, 1.90410126, 3.89025866, 0.70825266, 0.79430954, 0.43381827, 1.09380979, -1.66168482, -0.93835321, 0.09448779, -0.12259599, -0.16369546, 4.53650956, -1.46376532, 0.76166351, 1.16825761, 0.51729906, 0.73370026, 0.59458339, -0.03108003, 1.23808955, 1.51880293, 1.9145624, 0.70266687, 0.98314132, 0.7199262, 0.78553605, 1.05755946, -0.86765105, 0.4710034, 0.44037974, 0.33827686, -1.46388507, 1.21301507, 1.94243865, -0.26813406, -0.02363025, 2.02680183, 0.19560628, 0.11969888, 0.57548997, 0.5348441, 0.44938311, 0.85588425, 0.70632719, 1.49810999, 2.13138911, 2.02348788, 1.64921136, 1.36163845, 0.81927319, -0.23895759, 1.90677905, -0.33536283, 1.14181151, 1.2395111, 1.31938549, 0.7047715, 0.17977925, 0.81973366, -0.97505791, 1.80185055, 1.32743427, 1.44861875, 1.02084894, 0.95820336, 0.96207024, 1.22693023, -0.29489091, 0.67822897, 0.80025832, 0.83939484, 0.59572848, 0.03740765, -0.79479735, 0.2118329, 0.69043356, 0.36205181, 0.85100324, 2.12421067, 1.04095059, 0.43562041, 0.34210852, 0.55877186, 0.17627103, 0.05868803, 0.65496353, 0.69846579, 1.05367166, 0.59247377, 1.38110661, 0.94873528, 0.22780635, 0.88957006, 0.57591998, 0.95255663, 0.95161791, 0.79369738, 0.52035746, 0.99858552, 0.85103564, 1.18352222, 1.42325742, 2.10753052, 1.38767133, 1.01464427, 0.80893032, 0.89173174, 0.24722185, 0.66729226, 1.46092242, 1.95061335, 1.03174349, 1.16178668, 0.33725343, 0.84865826, -0.08818148, 2.3367892, -1.24443353, 2.40331419, 0.50559877, -0.12828194, 0.47941927, 0.27834026, 1.43729445, 1.62544947, 0.40353864, 0.72653162, 0.98056746, 0.52450113, 1.24238706, -0.96827007, 0.78835467, 0.51136949, 0.82191843, 2.25904474, 0.14987813, 0.28490722, 1.30059162, 0.65373993, 0.1926087, 0.26238732, 0.08392938, 0.71926565, 2.08693775, -2.3261186, 0.64019534, -0.18888849, 0.70899368, -1.1034318, -0.13213193, 0.10094986, 1.29229259, 0.49678098, 0.69495229, 1.21571502, -0.15658108, 0.52891255, 0.06074719, 1.62204885, 0.76689543, -0.05071452, 2.59106697, -4.26525047, 0.58146541, 0.58328912, 0.21494896, 1.10369487, 1.29390492, 0.99853396, 1.04641801, 0.4904068, 0.95495949, 0.80166267, 0.7400626, 0.5190254, 0.72372078, 0.64470081 };
            var production = new double[] {-2.45270031, -0.55152509, -0.35870786, -2.18545486, 1.90973412, 0.90153584, 0.30801942, 2.29130441, 4.14957387, 1.89062398, 1.2733529,  3.43689207, 2.79907636, 0.81768862, 0.86899693, 1.47296187, -0.88248358,    0.07427919, -0.41314971,    -4.06411893,    -6.85103912,    -1.33129558,    2.42435972, 2.16904208, 3.02720471, 1.27881101, 1.30386487, 1.77537765, 2.05516067, 3.05838507, 1.10308888, 0.6334685,  -0.29339056,    3.94815264, 0.87114701, 1.78447991, 0.42594327, -0.20491944,    -0.29723637,    0.33560928, 0.41056141, -4.30076832,    -1.64181977,    3.7804552,  0.24627687, 0.30977573, 0.91707444, -2.25457797,    -2.07131293,    -1.24766384,    -1.4005043, -1.90375664,    1.1465572,  2.17942248, 3.36771897, 2.58168445, 2.89709545, 1.53821324, 0.7212874,  0.04115557, 0.32353159, 0.07020996, -0.14046924,    0.57978813, 0.58132135, -0.57641778,    0.37249329, 1.13734778, 1.30758228, 1.75000563, 1.843662,   2.40645058, 0.92013121, 0.87316353, 0.38103668, 0.70292025, 0.43372685, -0.36675732,    -0.62142121,    0.42443392, 0.68265169, 0.77446547, 0.419448,   -1.57345296,    -1.91422028,    0.59131506, 1.36255645, 0.21710308, -0.13365365,    1.76874773, 0.76167388, 1.05024577, 0.87901471, 0.21755108, 0.40135891, 1.49618275, 1.22213656, 1.78250275, 1.267181,   2.04370404, 1.02552601, 0.33785685, 0.90043887, 0.87467273, 0.69285195, 2.11134752, 1.2441868,  1.3539689,  1.867147,   1.48763922, 2.28632066, 2.48091341, 1.10343775, 0.65122238, 0.72551955, 1.44421674, 1.10341663, 0.98574261, 0.90279881, 1.75533234, 0.99682019, 1.23293805, -0.10225268,    -0.20388383,    -1.35143911,    -1.25954437,    -1.44101744,    -1.06013675,    0.70916406, 1.54280957, 0.59478143, -0.05776556,    0.53922789, -0.69876172,    0.60727351, 1.00599126, 0.65792806, 0.5746178,  0.5633003,  1.38522763, 1.39435718, 0.50586367, -0.50305848,    0.9336501,  0.95057853, 0.5963601,  0.33552773, 0.25603401, 0.91794957, 1.19594247, 0.22356909, 0.16424632, -0.42872571,    -1.41297022,    -3.26349945,    -4.35417741,    -5.75045075,    -3.00372447,    1.39880419, 1.54400617, 1.88006931, 2.05402479, 1.42683671, 0.37927209, 0.5017404,  0.21878696, 1.01113866, 0.85151692, 0.88651817, 0.62923586, 0.07880166, 0.63305509, 0.67713243, 0.30744961, 0.23440888, 0.79208722, 0.54709166, 1.33801074, 0.62352731, 0.90355427, -0.46710878,    -0.69702162,    0.3806061,  -0.84554638,    -0.41793048,    -0.20331883,    0.47491844 };
            var savings = new double[] { 4.8103115, 7.28799234, 7.28901306, 0.98522964, 3.65777061, 6.0513418,  -0.44583221, -1.53087186, -4.35859438,    -5.05452579,    5.80995904, 16.04471706,    -5.34886849,    8.42603436, 2.75879565, 11.14642986,    -2.53351449,    -6.59264464,    0.51717884, 11.3433954, -5.47619069,    24.30960536,    -17.65616104,   0.64809041, -2.95006644,    -1.47455755,    -0.06754475,    -3.57672239,    -9.16055658,    9.09050404, 7.94495719, 6.69627648, 2.92296383, -6.81114259,    4.79207162, 2.371184,   7.77418337, -5.28634896,    -1.84549644,    4.0495981,  5.86168864, 8.24322919, 5.70775044, 9.15098787, -5.68139002,    0.88183993, 15.99035721,    7.8055065,  -3.34243955,    2.19400166, 0.03499563, -9.57651468,    0.3459546,  -10.17004699,   0.21217916, 8.21600068, 13.8691815, 4.38900229, 6.51686089, -2.87544931,    -18.71008389,   11.8287195, -23.57393474,   11.36628338,    5.86126836, 3.27551734, -10.09044542,   -4.82920131,    12.46424452,    -29.52866718,   12.32810406,    16.63076101,    -0.96896505,    5.67776867, 3.64649867, -0.19730358,    10.01461545,    -8.15576525,    -2.48622554,    5.44681102, 2.87544931, 5.10951644, -3.17767248,    -0.17953326,    6.49315257, -0.30920615,    -0.14086493,    11.3419301, 7.2326515,  5.46708666, -5.9364609, -5.88618856,    2.63464703, -6.91664675,    -11.99337844,   -1.8370887, -5.18600629,    5.15609751, -2.42215898,    6.32351898, 10.11514398,    -10.60541172,   -0.11570727,    -2.90726686,    2.55933958, -0.75802112,    3.33843952, -3.33843952,    0.61269338, 6.17532322, -7.22796452,    5.43456565, 19.35335228,    -4.81709478,    -3.12983982,    -9.14923404,    1.88735718, -23.49652903,   -9.86264835,    2.35825225, 12.2868408, 1.28001748, 2.57390229, -13.16296208,   13.22491995,    -6.89043916,    41.66826457,    -56.75209674,   50.75796205,    0.87861837, -14.70397426,   1.58733492, 0.49744834, 7.00891625, 6.1841315,  -6.89274778,    -2.9615204, 8.30885627, -8.99318286,    6.23585017, -42.28191228,   -18.27592893,   -7.87665229,    20.37236078,    37.40653542,    -12.34810568,   -10.5527614,    6.0310008,  6.60516929, -7.23648452,    -9.00674555,    2.32887238, 29.83728599,    46.43989041,    -32.53252494,   36.3124049, 0.9230602,  16.09059408,    -24.49229966,   0.8482922,  -5.54399051,    11.65612884,    -0.35208609,    -3.27335958,    14.33860193,    -4.07705131,    2.722504,   -3.45447712,    17.6253051, 8.9694971,  -3.04922177,    29.04670355,    -68.78826698,   7.81647729, 3.49400682, -11.2766145,    13.52020248,    8.2440477,  2.46195256, -1.51305022,    -0.75840017,    5.02391773, 3.18092976, 3.48278601, 2.23653405, -2.72150106,    -0.57285793};
            var unemployment = new double[] {0.9, 0.5, 0.5,  0.7, -0.1, -0.1,   0.1,  0,  -0.2,   -0.1,   -0.2,   -0.3,   -0.3,   0,  -0.1,   0.1,    0.2,    0.3,    0.5,    1.3,    1.4,    0.2,    -0.4,   -0.2,   -0.6,   0,  0,  0.2,    -0.4,   -0.2,   -0.4,   -0.4,   -0.1,   -0.4,   0.1,    0,  -0.2,   -0.1,   0.2,    0.1,    0.3,    1.3,    -0.1,   -0.3,   0.2,    0.1,    0.1,    0.9,    0.5,    0.6,    0.5,    0.7,    -0.5,   -0.2,   -0.9,   -0.9,   -0.5,   -0.6,   0.1,    0,  -0.1,   0.2,    -0.3,   -0.1,   0.2,    0,  -0.2,   -0.4,   0,  -0.4,   -0.3,   -0.2,   0,  -0.3,   0,  -0.1,   -0.3,   0.3,    0,  0.1,    -0.2,   0,  0.7,    0.4,    0.5,    0.1,    0,  0.4,    0.1,    0.4,    -0.2,   -0.2,   -0.4,   0,  -0.3,   -0.2,   0,  -0.4,   -0.2,   -0.4,   -0.1,   0.2,    0,  0,  -0.1,   -0.2,   -0.1,   0.2,    -0.2,   -0.2,   -0.1,   -0.2,   0,  -0.2,   0.1,    -0.2,   -0.2,   0.1,    -0.1,   -0.2,   0,  0,  -0.1,   0,  0.4,    0.2,    0.5,    0.7,    0,  0.1,    -0.1,   0.3,    -0.1,   0.4,    -0.2,   -0.4,   0.1,    -0.2,   -0.2,   0,  -0.2,   -0.2,   0,  -0.1,   -0.2,   -0.1,   -0.1,   -0.1,   0,  0.2,    0.1,    0.3,    0.1,    0.5,    0.5,    1.2,    1.4,    0.8,    0.3,    0.1,    0,  -0.5,   0.1,    -0.2,   -0.3,   0.1,    -0.1,   -0.5,   -0.3,   0,  -0.4,   0.1,    -0.4,   0,  -0.3,   -0.5,   0,  -0.6,   -0.2,   -0.3,   -0.2,   -0.1,   -0.3,   0,  0,  -0.1,   0 };
            var list = new List<double[]> { income, production, savings, unemployment };
            var y = new Vector(consumption) { Header = "Consumption" };
            var x = new Matrix(list) { Header = new string[] { "Income", "Production", "Savings", "Unemployment" } };

            var LM = new LinearRegression(x, y);
            var par = LM.Parameters;
            var sig = LM.ParameterStandardErrors;
            var se = LM.StandardError;
            var r2 = LM.RSquared;
            var ar2 = LM.AdjRSquared;
            var df = LM.DegreesOfFreedom;

            var true_par = new double[] { 0.26729, 0.71449, 0.04589, -0.04527, -0.20477 };
            var true_sig = new double[] { 0.03721, 0.04219, 0.02588, 0.00278, 0.10550 };
            var true_se = 0.3286;
            var true_r2 = 0.754;
            var true_ar2 = 0.7486;
            var true_df = 182;

            for (int i = 0; i < par.Count; i++)
            {
                Assert.AreEqual(par[i], true_par[i], 1E-4);
                Assert.AreEqual(sig[i], true_sig[i], 1E-4);
            }
        
            Assert.AreEqual(se, true_se, 1E-4);
            Assert.AreEqual(r2, true_r2, 1E-3);
            Assert.AreEqual(ar2, true_ar2, 1E-3);
            Assert.AreEqual(df, true_df);


            // Test summary output table 
            var summary = LM.Summary();
            for (int i = 0; i < summary.Count; i++)
            {
                // Uncomment the line below to print the summary output table.
                // Debug.WriteLine(summary[i]);
            }

            /** The below summary table is shown for demonstration. 
             * This is the same summary that would be outputted from the R lm() method.
             * 
             * Model for predicting Consumption:
             * Parameters:
             *                    Estimate  Std. Error     t value    Pr(>|t|)
             * Intercept           0.26729     0.03721       7.184   1.68E-011 ***
             * Income              0.71448     0.04219      16.934      <1E-15 ***
             * Production          0.04589     0.02588       1.773      0.0778 .
             * Savings            -0.04527     0.00278     -16.287      <1E-15 ***
             * Unemployment       -0.20477     0.10550      -1.941      0.0538 .
             * ---
             * Signif.codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
             *
             * Residual standard error: 0.3286 on 182 degrees of freedom
             * Multiple R-squared: 0.7540,  Adjusted R-squared: 0.7486
             * F-statistic: 139.5, on 4 and 182 DF, p-value: < 1E-15
             *
             * Residuals:
             *        Min        1Q    Median        3Q       Max
             *    -0.8830   -0.1764   -0.0368    0.1525    1.2055
            **/
        }

        /// <summary>
        /// Test for multiple linear regression.
        /// </summary>
        [TestMethod]
        public void Test_MultipleLinearRegression3()
        {
            var price = new double[] { 31.447, 21.484, 38.871, 45.997, 13.598, 39.79, 31.387, 36.396, 25.758, 30.921, 32.699, 33.789, 10.999, 31.892, 37.99, 36.999, 29.341, 22.999, 25.999, 37.6, 27.911, 29.802, 32.791, 24.599, 21.5, 36.999, 21.625, 31.811, 31.538, 10.995, 41.488, 38.588, 13.795, 36.999, 27.499, 39.799, 37.294, 32.268, 31.289, 32.588, 29.195, 17.99, 36.697, 29.9, 29.876, 12.999, 31.368, 43.6, 38.499, 16.999, 33.599, 14.499, 33, 30.995, 19.999, 9.489, 34.297, 27.649, 5.495, 26, 18.399, 12.999, 35.499, 37.587, 19.649, 30.976, 31.57, 20.783, 43.599, 28.971, 31.692, 13.25, 0.599, 38.317, 4.65, 31.691, 33.951, 36.16, 30.599, 39.651, 35.991, 32.478, 29.884, 31.231, 28.993, 15.699, 42.999, 36.904, 27.889, 28.99, 37.193, 34.085, 15.489, 32.571, 33.699, 18.99, 30.499, 10.59, 5.999, 24.996, 27.999, 7.711, 13.898, 14.498, 25.41, 28.664, 37.914, 29.769, 18.793, 36.826, 25.999, 41.798, 31.471, 31.234, 32.92, 29.5, 14.848, 45.6, 29.81, 33.921, 9.489, 15.598, 42.298, 37.477, 35.5, 36.923, 25.999, 19.98, 37.245, 36.161, 37.931, 33.811, 30.842, 26.999, 30.999, 28.499, 26.849, 36.506, 33.999, 46.395, 14.999, 33.291, 26.981, 30.299, 36.981, 31.998, 25.499, 31.172, 33.8, 9.295, 24.998, 32.112, 10.497, 14.99, 29.989, 38.601, 16.203, 30.848, 28.85, 15.999, 38.946, 38.499, 30.77, 17.998, 36.399, 7.995, 31.342, 38.265, 18.99, 31.998, 18.499, 17.625, 37.101, 28, 34.499, 39.59, 12.992, 24.966, 32.981, 32.501, 38.269, 33, 26.947, 22.995, 29.885, 13.099, 22.999, 29.69, 28.79, 27.884, 41.499, 25.999, 33.598, 38.5, 19.785, 8.295, 35.185, 21.59, 25.989, 44.801, 8.728, 30.387, 31.591, 7.995, 3.995, 30.6, 33.048, 13.988, 32.424, 36.876, 34.814, 15.9, 9.598, 32.291, 15.897, 10.399, 27.399, 19.99, 23.999, 32.673, 28.499, 33.373, 31.991, 5.6, 30.998, 20.8, 28.797, 33.251, 32.7, 21.798, 34.898, 37.629, 29.493, 37.797, 18.5, 27.499, 37.573, 29.929, 31.991, 24.335, 33.509, 31.999, 17.999, 9.999, 20.5, 31.841, 30.995, 10.9, 32.29, 37.889, 19.387, 24, 29.289, 29.789, 30.713, 22.998, 37.999, 27.905, 30.97, 39.788, 31.931, 8.999, 37.262, 38.199, 21.499, 10.999, 39.485, 29.79, 31.747, 32.999, 27.699, 32.54, 8.999, 17.799, 31.975, 37.48, 44.599, 25.99, 28.8, 6.499, 26.698, 15.99, 25.901, 34.918, 31.32, 31.791, 36.5, 23.362, 17.99, 9.798, 27.999, 31.9, 30.999, 29.995, 22.999, 19.498, 29.676, 33.399, 36.499, 39.999 };
            var year = new double[] { 2019, 2017, 2020, 2022, 2015, 2022, 2019, 2020, 2017, 2019, 2021, 2019, 2013, 2019, 2021, 2020, 2019, 2016, 2017, 2021, 2019, 2019, 2020, 2017, 2019, 2022, 2017, 2019, 2020, 2005, 2020, 2021, 2014, 2021, 2019, 2021, 2022, 2019, 2021, 2020, 2017, 2014, 2021, 2019, 2019, 2015, 2019, 2022, 2021, 2015, 2020, 2014, 2019, 2021, 2015, 2012, 2021, 2018, 2005, 2019, 2015, 2011, 2020, 2020, 2016, 2019, 2019, 2016, 2022, 2020, 2017, 2013, 2011, 2020, 2008, 2021, 2020, 2020, 2019, 2021, 2020, 2018, 2019, 2019, 2019, 2015, 2022, 2022, 2020, 2020, 2021, 2019, 2012, 2019, 2021, 2014, 2020, 2008, 2000, 2019, 2017, 2012, 2011, 2012, 2018, 2019, 2020, 2021, 2014, 2022, 2017, 2022, 2021, 2019, 2020, 2019, 2014, 2022, 2019, 2019, 2008, 2014, 2021, 2022, 2022, 2022, 2019, 2015, 2020, 2019, 2020, 2020, 2020, 2019, 2019, 2019, 2020, 2021, 2020, 2022, 2014, 2020, 2019, 2020, 2020, 2021, 2017, 2019, 2019, 2008, 2018, 2020, 2003, 2009, 2021, 2020, 2016, 2020, 2016, 2015, 2022, 2021, 2019, 2016, 2020, 2005, 2019, 2020, 2014, 2019, 2016, 2015, 2020, 2019, 2020, 2021, 2013, 2018, 2020, 2020, 2020, 2019, 2019, 2017, 2019, 2013, 2016, 2019, 2018, 2019, 2021, 2018, 2019, 2020, 2016, 2009, 2020, 2014, 2019, 2022, 2007, 2017, 2020, 2013, 2000, 2019, 2020, 2013, 2021, 2021, 2021, 2018, 2011, 2020, 2013, 2014, 2019, 2014, 2017, 2019, 2017, 2019, 2020, 2006, 2021, 2014, 2019, 2020, 2019, 2019, 2021, 2020, 2018, 2021, 2015, 2018, 2021, 2019, 2020, 2018, 2021, 2019, 2015, 2006, 2016, 2020, 2018, 2013, 2020, 2020, 2015, 2016, 2019, 2019, 2019, 2018, 2022, 2019, 2020, 2021, 2021, 2011, 2022, 2020, 2016, 2012, 2021, 2019, 2019, 2020, 2018, 2019, 2012, 2015, 2020, 2021, 2022, 2017, 2020, 2003, 2019, 2011, 2019, 2020, 2019, 2020, 2022, 2016, 2014, 2009, 2019, 2018, 2020, 2019, 2019, 2017, 2018, 2020, 2021, 2022 };
            var mileage = new double[] { 37.115, 72.786, 20.336, 15.549, 173.24, 3.889, 58.456, 25.669, 52.339, 29.46, 44.134, 25.322, 152.556, 23.523, 21.24, 35.188, 30.272, 77.649, 51.706, 21.511, 17.211, 20.726, 23.197, 52.199, 48.223, 4.201, 117.478, 60.339, 22.53, 136.963, 35.483, 12.221, 147.696, 20.82, 52.821, 13.426, 7.247, 32.287, 19.633, 9.414, 61.854, 95.186, 7.36, 53.269, 36.564, 181.723, 38.077, 4.27, 5.694, 107.484, 30.471, 110.616, 62.329, 17.534, 112.657, 189.055, 6, 78.247, 190.056, 22.84, 110.037, 144.167, 27.539, 16.162, 120.053, 23.157, 26.302, 107.072, 6.401, 31.577, 31.282, 139.469, 111.865, 23.829, 184.7, 8.877, 13.509, 39.732, 77.395, 7.926, 23.155, 52.254, 48.462, 25.505, 56.377, 135.684, 3.351, 2.893, 32.827, 31.135, 5, 35.759, 102.153, 21.742, 6.073, 69.147, 74.926, 104.444, 194.623, 79.115, 51.482, 150.385, 91.755, 147.657, 95.667, 39.09, 12.18, 41.568, 85.432, 6.529, 66.079, 17.9, 34.261, 50.504, 14.835, 56.981, 135.476, 4.057, 30.986, 31.145, 146.949, 128.511, 2.156, 0.182, 18.391, 2.205, 68.819, 93.515, 21.334, 19.705, 24.1, 39.81, 18.82, 81.201, 23.461, 29.939, 47.338, 8.417, 31.165, 0.357, 130.492, 12.332, 43.765, 36.529, 16.149, 25.21, 59.589, 52.771, 31.779, 133.368, 60.448, 16.94, 152, 83.175, 35.388, 12.613, 169.283, 42.763, 34.924, 126.849, 6.502, 16.212, 46.557, 49.135, 34.543, 132.854, 40.84, 6.216, 74.753, 28.45, 113.7, 165.776, 13.705, 57, 43.938, 27.739, 148.949, 51.282, 26.391, 38.358, 24.312, 37.205, 86.325, 145.098, 27.189, 125.307, 61.14, 10.724, 80.661, 47.886, 7.258, 71.303, 24.632, 21.306, 114.6, 151.765, 34.754, 97.278, 71.664, 1.67, 159.261, 51.886, 37.518, 196.192, 230.589, 19.38, 20.386, 143.703, 19.293, 8.71, 7.15, 69.642, 151.375, 30.75, 99.914, 191.722, 47.364, 62.67, 89.31, 26.041, 40.742, 19.675, 30.005, 197, 22.644, 76.258, 55.634, 53.684, 20.211, 127.302, 6.794, 12.911, 39.043, 5.312, 113.934, 67.034, 6, 38.027, 32.777, 84.303, 37.454, 46.353, 110.181, 134.628, 106.454, 38.715, 40.654, 185.957, 21.721, 20.143, 103.642, 75.373, 35.645, 34.374, 25.207, 82.117, 17.491, 35.126, 33.946, 8.453, 23.84, 196.207, 8.398, 27.097, 73.677, 168.962, 27.943, 53.796, 35.333, 25.744, 65.845, 28.17, 204.676, 110.837, 48.002, 1.929, 2.446, 70.429, 37.943, 174.292, 85.55, 98.083, 61.245, 15.267, 46.682, 27.812, 26.225, 83.538, 90.263, 147.795, 63.594, 13.268, 32.908, 29.292, 83.788, 149.908, 53.227, 12.525, 3.838, 8.386 };

            var list = new List<double[]> { year, mileage };
            var y = new Vector(price) { Header = "Price" };
            var x = new Matrix(list) { Header = new string[] { "Year", "Mileage" } };

            var LM = new LinearRegression(x, y);
            var par = LM.Parameters;
            var sig = LM.ParameterStandardErrors;
            var se = LM.StandardError;
            var r2 = LM.RSquared;
            var ar2 = LM.AdjRSquared;
            var df = LM.DegreesOfFreedom;

            var true_par = new double[] { -1.951E3, 9.839E-1, -1.048E-1 };
            var true_sig = new double[] { 1.762E2, 8.714E-2, 6.778E-3 };
            var true_se = 3.149;
            var true_r2 = 0.8906;
            var true_ar2 = 0.8898;
            var true_df = 297;

            for (int i = 0; i < par.Count; i++)
            {
                Assert.AreEqual(par[i], true_par[i], 1);
                Assert.AreEqual(sig[i], true_sig[i], 1);
            }

            Assert.AreEqual(se, true_se, 1E-3);
            Assert.AreEqual(r2, true_r2, 1E-4);
            Assert.AreEqual(ar2, true_ar2, 1E-4);
            Assert.AreEqual(df, true_df);
        }

        /// <summary>
        /// Test the predict function with a simple linear regression model
        /// </summary>
        [TestMethod]
        public void Test_Predict()
        {
            var consumption = new double[] { 0.61598622, 0.46037569, 0.87679142, -0.27424514, 1.89737076, 0.91199291, 0.79453885, 1.64858747, 1.31372218, 1.89147495, 1.530714, 2.31829471, 1.81073916, -0.04173996, 0.35423556, -0.29163216, -0.87702794, 0.35113555, 0.4095977, -1.47580863, 0.83225762, 1.65583461, 1.41942029, 1.05437932, 1.97998024, 0.91391607, 1.05532326, 1.29889825, 1.13637586, 0.54994073, 0.94985262, 1.49599724, 0.57549599, 2.1112096, 0.41796279, 0.7979271, 0.50584598, -0.05775339, 0.9773001, 0.26826982, -0.15391875, -2.27411019, 1.07188123, 1.31644941, 0.5247277, -0.01728203, 0.4016515, -0.7528762, 0.65938376, 0.36854173, 0.76954464, 1.80876006, 0.96802954, 1.95946831, 1.73949442, 1.56389332, 0.84526442, 1.41504495, 0.76546608, 1.31380062, 1.6865532, 0.9343699, 1.90256675, 0.25656565, 0.84304279, 1.1117739, 1.79499406, 0.63768446, 0.01569397, 1.37731686, 1.15225712, 0.21016439, 1.76316026, 0.73053714, 0.85083233, 1.13789838, 0.46064152, 0.46937808, 0.98950145, 0.43942767, 0.85543417, 0.31230451, 0.40261313, -0.75910716, -0.34535008, 0.83564224, 0.48439843, -0.02626579, 1.85996999, 0.68354371, 1.07661214, 1.18372396, 0.37817936, 0.89392729, 1.09813766, 0.88122025, 1.14064791, 0.77176225, 0.77214364, 1.07014805, 0.26420505, 0.89311141, 0.91264702, 0.70025425, 0.92360967, 1.07997887, 0.60055799, 0.78298122, 1.04949253, 0.45219855, 1.69654264, 1.18062797, 1.02693626, 1.75069399, 1.30596977, 1.45888615, 0.94821191, 1.46971415, 1.12921436, 1.45748895, 1.51106759, 0.95508878, 0.96797647, 0.88629738, 0.42159086, 0.25689982, 0.36381084, 1.51630321, 0.29958257, 0.50899032, 0.69667241, 0.53634306, 0.43826169, 1.10719086, 1.46377882, 0.77334046, 0.96768535, 0.64760607, 0.95117167, 1.02041702, 0.76172556, 1.08136588, 0.77186494, 0.37591485, 1.11522822, 0.53100554, 0.58208747, 1.01434389, 0.52486184, 0.33874119, 0.44391875, 0.12505584, -0.20652548, 0.16783443, -0.72499446, -1.21068558, -0.3435437, -0.45174364, 0.60491332, -0.01115014, 0.5348174, 0.81040406, 0.64501881, 1.01833874, 0.50041315, 0.20141978, 0.43372599, 0.33593895, 0.60108995, 0.16942956, 0.26416034, 0.27877186, 0.46861292, 0.20545802, 0.46641787, 0.83917367, 0.47345118, 0.93375698, 0.91687178, 1.1253325, 0.59624005, 0.70814389, 0.66496956, 0.56167978, 0.40468216, 1.04770741, 0.72959779 };
            var income = new double[] { 0.97226104, 1.16908472, 1.55327055, -0.25527238, 1.98715363, 1.44733417, 0.53181193, 1.16012514, 0.4570115, 1.01662441, 1.90410126, 3.89025866, 0.70825266, 0.79430954, 0.43381827, 1.09380979, -1.66168482, -0.93835321, 0.09448779, -0.12259599, -0.16369546, 4.53650956, -1.46376532, 0.76166351, 1.16825761, 0.51729906, 0.73370026, 0.59458339, -0.03108003, 1.23808955, 1.51880293, 1.9145624, 0.70266687, 0.98314132, 0.7199262, 0.78553605, 1.05755946, -0.86765105, 0.4710034, 0.44037974, 0.33827686, -1.46388507, 1.21301507, 1.94243865, -0.26813406, -0.02363025, 2.02680183, 0.19560628, 0.11969888, 0.57548997, 0.5348441, 0.44938311, 0.85588425, 0.70632719, 1.49810999, 2.13138911, 2.02348788, 1.64921136, 1.36163845, 0.81927319, -0.23895759, 1.90677905, -0.33536283, 1.14181151, 1.2395111, 1.31938549, 0.7047715, 0.17977925, 0.81973366, -0.97505791, 1.80185055, 1.32743427, 1.44861875, 1.02084894, 0.95820336, 0.96207024, 1.22693023, -0.29489091, 0.67822897, 0.80025832, 0.83939484, 0.59572848, 0.03740765, -0.79479735, 0.2118329, 0.69043356, 0.36205181, 0.85100324, 2.12421067, 1.04095059, 0.43562041, 0.34210852, 0.55877186, 0.17627103, 0.05868803, 0.65496353, 0.69846579, 1.05367166, 0.59247377, 1.38110661, 0.94873528, 0.22780635, 0.88957006, 0.57591998, 0.95255663, 0.95161791, 0.79369738, 0.52035746, 0.99858552, 0.85103564, 1.18352222, 1.42325742, 2.10753052, 1.38767133, 1.01464427, 0.80893032, 0.89173174, 0.24722185, 0.66729226, 1.46092242, 1.95061335, 1.03174349, 1.16178668, 0.33725343, 0.84865826, -0.08818148, 2.3367892, -1.24443353, 2.40331419, 0.50559877, -0.12828194, 0.47941927, 0.27834026, 1.43729445, 1.62544947, 0.40353864, 0.72653162, 0.98056746, 0.52450113, 1.24238706, -0.96827007, 0.78835467, 0.51136949, 0.82191843, 2.25904474, 0.14987813, 0.28490722, 1.30059162, 0.65373993, 0.1926087, 0.26238732, 0.08392938, 0.71926565, 2.08693775, -2.3261186, 0.64019534, -0.18888849, 0.70899368, -1.1034318, -0.13213193, 0.10094986, 1.29229259, 0.49678098, 0.69495229, 1.21571502, -0.15658108, 0.52891255, 0.06074719, 1.62204885, 0.76689543, -0.05071452, 2.59106697, -4.26525047, 0.58146541, 0.58328912, 0.21494896, 1.10369487, 1.29390492, 0.99853396, 1.04641801, 0.4904068, 0.95495949, 0.80166267, 0.7400626, 0.5190254, 0.72372078, 0.64470081 };
            var y = new Vector(consumption) { Header = "Consumption" };
            var x = new Matrix(income) { Header = new string[] { "Income" } };
            var LM = new LinearRegression(x, y);

            var tx = new double[] { -1, -2, 1, 2 };
            var testX = new Matrix(tx);
            var trueY = new double[] { 0.26450257, -0.01609868,  0.82570506,  1.10630631 };
            var testY = LM.Predict(testX);

            for(int i = 0; i < testY.Length; i++)
            {
                Assert.AreEqual(trueY[i], testY[i], 1E-6);
            }
        }

        /// <summary>
        /// Test the predict function with a multi linear regression model
        /// </summary>
        [TestMethod]
        public void Test_Predict_Multi()
        {
            var consumption = new double[] { 0.61598622, 0.46037569, 0.87679142, -0.27424514, 1.89737076, 0.91199291, 0.79453885, 1.64858747, 1.31372218, 1.89147495, 1.530714, 2.31829471, 1.81073916, -0.04173996, 0.35423556, -0.29163216, -0.87702794, 0.35113555, 0.4095977, -1.47580863, 0.83225762, 1.65583461, 1.41942029, 1.05437932, 1.97998024, 0.91391607, 1.05532326, 1.29889825, 1.13637586, 0.54994073, 0.94985262, 1.49599724, 0.57549599, 2.1112096, 0.41796279, 0.7979271, 0.50584598, -0.05775339, 0.9773001, 0.26826982, -0.15391875, -2.27411019, 1.07188123, 1.31644941, 0.5247277, -0.01728203, 0.4016515, -0.7528762, 0.65938376, 0.36854173, 0.76954464, 1.80876006, 0.96802954, 1.95946831, 1.73949442, 1.56389332, 0.84526442, 1.41504495, 0.76546608, 1.31380062, 1.6865532, 0.9343699, 1.90256675, 0.25656565, 0.84304279, 1.1117739, 1.79499406, 0.63768446, 0.01569397, 1.37731686, 1.15225712, 0.21016439, 1.76316026, 0.73053714, 0.85083233, 1.13789838, 0.46064152, 0.46937808, 0.98950145, 0.43942767, 0.85543417, 0.31230451, 0.40261313, -0.75910716, -0.34535008, 0.83564224, 0.48439843, -0.02626579, 1.85996999, 0.68354371, 1.07661214, 1.18372396, 0.37817936, 0.89392729, 1.09813766, 0.88122025, 1.14064791, 0.77176225, 0.77214364, 1.07014805, 0.26420505, 0.89311141, 0.91264702, 0.70025425, 0.92360967, 1.07997887, 0.60055799, 0.78298122, 1.04949253, 0.45219855, 1.69654264, 1.18062797, 1.02693626, 1.75069399, 1.30596977, 1.45888615, 0.94821191, 1.46971415, 1.12921436, 1.45748895, 1.51106759, 0.95508878, 0.96797647, 0.88629738, 0.42159086, 0.25689982, 0.36381084, 1.51630321, 0.29958257, 0.50899032, 0.69667241, 0.53634306, 0.43826169, 1.10719086, 1.46377882, 0.77334046, 0.96768535, 0.64760607, 0.95117167, 1.02041702, 0.76172556, 1.08136588, 0.77186494, 0.37591485, 1.11522822, 0.53100554, 0.58208747, 1.01434389, 0.52486184, 0.33874119, 0.44391875, 0.12505584, -0.20652548, 0.16783443, -0.72499446, -1.21068558, -0.3435437, -0.45174364, 0.60491332, -0.01115014, 0.5348174, 0.81040406, 0.64501881, 1.01833874, 0.50041315, 0.20141978, 0.43372599, 0.33593895, 0.60108995, 0.16942956, 0.26416034, 0.27877186, 0.46861292, 0.20545802, 0.46641787, 0.83917367, 0.47345118, 0.93375698, 0.91687178, 1.1253325, 0.59624005, 0.70814389, 0.66496956, 0.56167978, 0.40468216, 1.04770741, 0.72959779 };
            var income = new double[] { 0.97226104, 1.16908472, 1.55327055, -0.25527238, 1.98715363, 1.44733417, 0.53181193, 1.16012514, 0.4570115, 1.01662441, 1.90410126, 3.89025866, 0.70825266, 0.79430954, 0.43381827, 1.09380979, -1.66168482, -0.93835321, 0.09448779, -0.12259599, -0.16369546, 4.53650956, -1.46376532, 0.76166351, 1.16825761, 0.51729906, 0.73370026, 0.59458339, -0.03108003, 1.23808955, 1.51880293, 1.9145624, 0.70266687, 0.98314132, 0.7199262, 0.78553605, 1.05755946, -0.86765105, 0.4710034, 0.44037974, 0.33827686, -1.46388507, 1.21301507, 1.94243865, -0.26813406, -0.02363025, 2.02680183, 0.19560628, 0.11969888, 0.57548997, 0.5348441, 0.44938311, 0.85588425, 0.70632719, 1.49810999, 2.13138911, 2.02348788, 1.64921136, 1.36163845, 0.81927319, -0.23895759, 1.90677905, -0.33536283, 1.14181151, 1.2395111, 1.31938549, 0.7047715, 0.17977925, 0.81973366, -0.97505791, 1.80185055, 1.32743427, 1.44861875, 1.02084894, 0.95820336, 0.96207024, 1.22693023, -0.29489091, 0.67822897, 0.80025832, 0.83939484, 0.59572848, 0.03740765, -0.79479735, 0.2118329, 0.69043356, 0.36205181, 0.85100324, 2.12421067, 1.04095059, 0.43562041, 0.34210852, 0.55877186, 0.17627103, 0.05868803, 0.65496353, 0.69846579, 1.05367166, 0.59247377, 1.38110661, 0.94873528, 0.22780635, 0.88957006, 0.57591998, 0.95255663, 0.95161791, 0.79369738, 0.52035746, 0.99858552, 0.85103564, 1.18352222, 1.42325742, 2.10753052, 1.38767133, 1.01464427, 0.80893032, 0.89173174, 0.24722185, 0.66729226, 1.46092242, 1.95061335, 1.03174349, 1.16178668, 0.33725343, 0.84865826, -0.08818148, 2.3367892, -1.24443353, 2.40331419, 0.50559877, -0.12828194, 0.47941927, 0.27834026, 1.43729445, 1.62544947, 0.40353864, 0.72653162, 0.98056746, 0.52450113, 1.24238706, -0.96827007, 0.78835467, 0.51136949, 0.82191843, 2.25904474, 0.14987813, 0.28490722, 1.30059162, 0.65373993, 0.1926087, 0.26238732, 0.08392938, 0.71926565, 2.08693775, -2.3261186, 0.64019534, -0.18888849, 0.70899368, -1.1034318, -0.13213193, 0.10094986, 1.29229259, 0.49678098, 0.69495229, 1.21571502, -0.15658108, 0.52891255, 0.06074719, 1.62204885, 0.76689543, -0.05071452, 2.59106697, -4.26525047, 0.58146541, 0.58328912, 0.21494896, 1.10369487, 1.29390492, 0.99853396, 1.04641801, 0.4904068, 0.95495949, 0.80166267, 0.7400626, 0.5190254, 0.72372078, 0.64470081 };
            var production = new double[] { -2.45270031, -0.55152509, -0.35870786, -2.18545486, 1.90973412, 0.90153584, 0.30801942, 2.29130441, 4.14957387, 1.89062398, 1.2733529, 3.43689207, 2.79907636, 0.81768862, 0.86899693, 1.47296187, -0.88248358, 0.07427919, -0.41314971, -4.06411893, -6.85103912, -1.33129558, 2.42435972, 2.16904208, 3.02720471, 1.27881101, 1.30386487, 1.77537765, 2.05516067, 3.05838507, 1.10308888, 0.6334685, -0.29339056, 3.94815264, 0.87114701, 1.78447991, 0.42594327, -0.20491944, -0.29723637, 0.33560928, 0.41056141, -4.30076832, -1.64181977, 3.7804552, 0.24627687, 0.30977573, 0.91707444, -2.25457797, -2.07131293, -1.24766384, -1.4005043, -1.90375664, 1.1465572, 2.17942248, 3.36771897, 2.58168445, 2.89709545, 1.53821324, 0.7212874, 0.04115557, 0.32353159, 0.07020996, -0.14046924, 0.57978813, 0.58132135, -0.57641778, 0.37249329, 1.13734778, 1.30758228, 1.75000563, 1.843662, 2.40645058, 0.92013121, 0.87316353, 0.38103668, 0.70292025, 0.43372685, -0.36675732, -0.62142121, 0.42443392, 0.68265169, 0.77446547, 0.419448, -1.57345296, -1.91422028, 0.59131506, 1.36255645, 0.21710308, -0.13365365, 1.76874773, 0.76167388, 1.05024577, 0.87901471, 0.21755108, 0.40135891, 1.49618275, 1.22213656, 1.78250275, 1.267181, 2.04370404, 1.02552601, 0.33785685, 0.90043887, 0.87467273, 0.69285195, 2.11134752, 1.2441868, 1.3539689, 1.867147, 1.48763922, 2.28632066, 2.48091341, 1.10343775, 0.65122238, 0.72551955, 1.44421674, 1.10341663, 0.98574261, 0.90279881, 1.75533234, 0.99682019, 1.23293805, -0.10225268, -0.20388383, -1.35143911, -1.25954437, -1.44101744, -1.06013675, 0.70916406, 1.54280957, 0.59478143, -0.05776556, 0.53922789, -0.69876172, 0.60727351, 1.00599126, 0.65792806, 0.5746178, 0.5633003, 1.38522763, 1.39435718, 0.50586367, -0.50305848, 0.9336501, 0.95057853, 0.5963601, 0.33552773, 0.25603401, 0.91794957, 1.19594247, 0.22356909, 0.16424632, -0.42872571, -1.41297022, -3.26349945, -4.35417741, -5.75045075, -3.00372447, 1.39880419, 1.54400617, 1.88006931, 2.05402479, 1.42683671, 0.37927209, 0.5017404, 0.21878696, 1.01113866, 0.85151692, 0.88651817, 0.62923586, 0.07880166, 0.63305509, 0.67713243, 0.30744961, 0.23440888, 0.79208722, 0.54709166, 1.33801074, 0.62352731, 0.90355427, -0.46710878, -0.69702162, 0.3806061, -0.84554638, -0.41793048, -0.20331883, 0.47491844 };
            var savings = new double[] { 4.8103115, 7.28799234, 7.28901306, 0.98522964, 3.65777061, 6.0513418, -0.44583221, -1.53087186, -4.35859438, -5.05452579, 5.80995904, 16.04471706, -5.34886849, 8.42603436, 2.75879565, 11.14642986, -2.53351449, -6.59264464, 0.51717884, 11.3433954, -5.47619069, 24.30960536, -17.65616104, 0.64809041, -2.95006644, -1.47455755, -0.06754475, -3.57672239, -9.16055658, 9.09050404, 7.94495719, 6.69627648, 2.92296383, -6.81114259, 4.79207162, 2.371184, 7.77418337, -5.28634896, -1.84549644, 4.0495981, 5.86168864, 8.24322919, 5.70775044, 9.15098787, -5.68139002, 0.88183993, 15.99035721, 7.8055065, -3.34243955, 2.19400166, 0.03499563, -9.57651468, 0.3459546, -10.17004699, 0.21217916, 8.21600068, 13.8691815, 4.38900229, 6.51686089, -2.87544931, -18.71008389, 11.8287195, -23.57393474, 11.36628338, 5.86126836, 3.27551734, -10.09044542, -4.82920131, 12.46424452, -29.52866718, 12.32810406, 16.63076101, -0.96896505, 5.67776867, 3.64649867, -0.19730358, 10.01461545, -8.15576525, -2.48622554, 5.44681102, 2.87544931, 5.10951644, -3.17767248, -0.17953326, 6.49315257, -0.30920615, -0.14086493, 11.3419301, 7.2326515, 5.46708666, -5.9364609, -5.88618856, 2.63464703, -6.91664675, -11.99337844, -1.8370887, -5.18600629, 5.15609751, -2.42215898, 6.32351898, 10.11514398, -10.60541172, -0.11570727, -2.90726686, 2.55933958, -0.75802112, 3.33843952, -3.33843952, 0.61269338, 6.17532322, -7.22796452, 5.43456565, 19.35335228, -4.81709478, -3.12983982, -9.14923404, 1.88735718, -23.49652903, -9.86264835, 2.35825225, 12.2868408, 1.28001748, 2.57390229, -13.16296208, 13.22491995, -6.89043916, 41.66826457, -56.75209674, 50.75796205, 0.87861837, -14.70397426, 1.58733492, 0.49744834, 7.00891625, 6.1841315, -6.89274778, -2.9615204, 8.30885627, -8.99318286, 6.23585017, -42.28191228, -18.27592893, -7.87665229, 20.37236078, 37.40653542, -12.34810568, -10.5527614, 6.0310008, 6.60516929, -7.23648452, -9.00674555, 2.32887238, 29.83728599, 46.43989041, -32.53252494, 36.3124049, 0.9230602, 16.09059408, -24.49229966, 0.8482922, -5.54399051, 11.65612884, -0.35208609, -3.27335958, 14.33860193, -4.07705131, 2.722504, -3.45447712, 17.6253051, 8.9694971, -3.04922177, 29.04670355, -68.78826698, 7.81647729, 3.49400682, -11.2766145, 13.52020248, 8.2440477, 2.46195256, -1.51305022, -0.75840017, 5.02391773, 3.18092976, 3.48278601, 2.23653405, -2.72150106, -0.57285793 };
            var unemployment = new double[] { 0.9, 0.5, 0.5, 0.7, -0.1, -0.1, 0.1, 0, -0.2, -0.1, -0.2, -0.3, -0.3, 0, -0.1, 0.1, 0.2, 0.3, 0.5, 1.3, 1.4, 0.2, -0.4, -0.2, -0.6, 0, 0, 0.2, -0.4, -0.2, -0.4, -0.4, -0.1, -0.4, 0.1, 0, -0.2, -0.1, 0.2, 0.1, 0.3, 1.3, -0.1, -0.3, 0.2, 0.1, 0.1, 0.9, 0.5, 0.6, 0.5, 0.7, -0.5, -0.2, -0.9, -0.9, -0.5, -0.6, 0.1, 0, -0.1, 0.2, -0.3, -0.1, 0.2, 0, -0.2, -0.4, 0, -0.4, -0.3, -0.2, 0, -0.3, 0, -0.1, -0.3, 0.3, 0, 0.1, -0.2, 0, 0.7, 0.4, 0.5, 0.1, 0, 0.4, 0.1, 0.4, -0.2, -0.2, -0.4, 0, -0.3, -0.2, 0, -0.4, -0.2, -0.4, -0.1, 0.2, 0, 0, -0.1, -0.2, -0.1, 0.2, -0.2, -0.2, -0.1, -0.2, 0, -0.2, 0.1, -0.2, -0.2, 0.1, -0.1, -0.2, 0, 0, -0.1, 0, 0.4, 0.2, 0.5, 0.7, 0, 0.1, -0.1, 0.3, -0.1, 0.4, -0.2, -0.4, 0.1, -0.2, -0.2, 0, -0.2, -0.2, 0, -0.1, -0.2, -0.1, -0.1, -0.1, 0, 0.2, 0.1, 0.3, 0.1, 0.5, 0.5, 1.2, 1.4, 0.8, 0.3, 0.1, 0, -0.5, 0.1, -0.2, -0.3, 0.1, -0.1, -0.5, -0.3, 0, -0.4, 0.1, -0.4, 0, -0.3, -0.5, 0, -0.6, -0.2, -0.3, -0.2, -0.1, -0.3, 0, 0, -0.1, 0 };
            var list = new List<double[]> { income, production, savings, unemployment };
            var y = new Vector(consumption) { Header = "Consumption" };
            var x = new Matrix(list) { Header = new string[] { "Income", "Production", "Savings", "Unemployment" } };
            var LM = new LinearRegression(x, y);

            var tx = new double[,]
            {
                { -1, -1, 1, -0.25 },
                { -2, -2, 2, -0.15 },
                { 1, 1, 3, 0.15 },
                { 2, 2, 4, 0.25 }
            };
            var testX = new Matrix(tx);
            var trueY = new double[] { -0.4871647, -1.3132862, 0.8611415, 1.5557712 };
            var testY = LM.Predict(testX);

            for (int i = 0; i < testY.Length; i++)
            {
                Assert.AreEqual(trueY[i], testY[i], 1E-6);
            }
        }

        /// <summary>
        /// Test the prediction intervals method with a simple linear regression model
        /// </summary>
        [TestMethod]
        public void Test_PredictionIntervals()
        {
            var consumption = new double[] { 0.61598622, 0.46037569, 0.87679142, -0.27424514, 1.89737076, 0.91199291, 0.79453885, 1.64858747, 1.31372218, 1.89147495, 1.530714, 2.31829471, 1.81073916, -0.04173996, 0.35423556, -0.29163216, -0.87702794, 0.35113555, 0.4095977, -1.47580863, 0.83225762, 1.65583461, 1.41942029, 1.05437932, 1.97998024, 0.91391607, 1.05532326, 1.29889825, 1.13637586, 0.54994073, 0.94985262, 1.49599724, 0.57549599, 2.1112096, 0.41796279, 0.7979271, 0.50584598, -0.05775339, 0.9773001, 0.26826982, -0.15391875, -2.27411019, 1.07188123, 1.31644941, 0.5247277, -0.01728203, 0.4016515, -0.7528762, 0.65938376, 0.36854173, 0.76954464, 1.80876006, 0.96802954, 1.95946831, 1.73949442, 1.56389332, 0.84526442, 1.41504495, 0.76546608, 1.31380062, 1.6865532, 0.9343699, 1.90256675, 0.25656565, 0.84304279, 1.1117739, 1.79499406, 0.63768446, 0.01569397, 1.37731686, 1.15225712, 0.21016439, 1.76316026, 0.73053714, 0.85083233, 1.13789838, 0.46064152, 0.46937808, 0.98950145, 0.43942767, 0.85543417, 0.31230451, 0.40261313, -0.75910716, -0.34535008, 0.83564224, 0.48439843, -0.02626579, 1.85996999, 0.68354371, 1.07661214, 1.18372396, 0.37817936, 0.89392729, 1.09813766, 0.88122025, 1.14064791, 0.77176225, 0.77214364, 1.07014805, 0.26420505, 0.89311141, 0.91264702, 0.70025425, 0.92360967, 1.07997887, 0.60055799, 0.78298122, 1.04949253, 0.45219855, 1.69654264, 1.18062797, 1.02693626, 1.75069399, 1.30596977, 1.45888615, 0.94821191, 1.46971415, 1.12921436, 1.45748895, 1.51106759, 0.95508878, 0.96797647, 0.88629738, 0.42159086, 0.25689982, 0.36381084, 1.51630321, 0.29958257, 0.50899032, 0.69667241, 0.53634306, 0.43826169, 1.10719086, 1.46377882, 0.77334046, 0.96768535, 0.64760607, 0.95117167, 1.02041702, 0.76172556, 1.08136588, 0.77186494, 0.37591485, 1.11522822, 0.53100554, 0.58208747, 1.01434389, 0.52486184, 0.33874119, 0.44391875, 0.12505584, -0.20652548, 0.16783443, -0.72499446, -1.21068558, -0.3435437, -0.45174364, 0.60491332, -0.01115014, 0.5348174, 0.81040406, 0.64501881, 1.01833874, 0.50041315, 0.20141978, 0.43372599, 0.33593895, 0.60108995, 0.16942956, 0.26416034, 0.27877186, 0.46861292, 0.20545802, 0.46641787, 0.83917367, 0.47345118, 0.93375698, 0.91687178, 1.1253325, 0.59624005, 0.70814389, 0.66496956, 0.56167978, 0.40468216, 1.04770741, 0.72959779 };
            var income = new double[] { 0.97226104, 1.16908472, 1.55327055, -0.25527238, 1.98715363, 1.44733417, 0.53181193, 1.16012514, 0.4570115, 1.01662441, 1.90410126, 3.89025866, 0.70825266, 0.79430954, 0.43381827, 1.09380979, -1.66168482, -0.93835321, 0.09448779, -0.12259599, -0.16369546, 4.53650956, -1.46376532, 0.76166351, 1.16825761, 0.51729906, 0.73370026, 0.59458339, -0.03108003, 1.23808955, 1.51880293, 1.9145624, 0.70266687, 0.98314132, 0.7199262, 0.78553605, 1.05755946, -0.86765105, 0.4710034, 0.44037974, 0.33827686, -1.46388507, 1.21301507, 1.94243865, -0.26813406, -0.02363025, 2.02680183, 0.19560628, 0.11969888, 0.57548997, 0.5348441, 0.44938311, 0.85588425, 0.70632719, 1.49810999, 2.13138911, 2.02348788, 1.64921136, 1.36163845, 0.81927319, -0.23895759, 1.90677905, -0.33536283, 1.14181151, 1.2395111, 1.31938549, 0.7047715, 0.17977925, 0.81973366, -0.97505791, 1.80185055, 1.32743427, 1.44861875, 1.02084894, 0.95820336, 0.96207024, 1.22693023, -0.29489091, 0.67822897, 0.80025832, 0.83939484, 0.59572848, 0.03740765, -0.79479735, 0.2118329, 0.69043356, 0.36205181, 0.85100324, 2.12421067, 1.04095059, 0.43562041, 0.34210852, 0.55877186, 0.17627103, 0.05868803, 0.65496353, 0.69846579, 1.05367166, 0.59247377, 1.38110661, 0.94873528, 0.22780635, 0.88957006, 0.57591998, 0.95255663, 0.95161791, 0.79369738, 0.52035746, 0.99858552, 0.85103564, 1.18352222, 1.42325742, 2.10753052, 1.38767133, 1.01464427, 0.80893032, 0.89173174, 0.24722185, 0.66729226, 1.46092242, 1.95061335, 1.03174349, 1.16178668, 0.33725343, 0.84865826, -0.08818148, 2.3367892, -1.24443353, 2.40331419, 0.50559877, -0.12828194, 0.47941927, 0.27834026, 1.43729445, 1.62544947, 0.40353864, 0.72653162, 0.98056746, 0.52450113, 1.24238706, -0.96827007, 0.78835467, 0.51136949, 0.82191843, 2.25904474, 0.14987813, 0.28490722, 1.30059162, 0.65373993, 0.1926087, 0.26238732, 0.08392938, 0.71926565, 2.08693775, -2.3261186, 0.64019534, -0.18888849, 0.70899368, -1.1034318, -0.13213193, 0.10094986, 1.29229259, 0.49678098, 0.69495229, 1.21571502, -0.15658108, 0.52891255, 0.06074719, 1.62204885, 0.76689543, -0.05071452, 2.59106697, -4.26525047, 0.58146541, 0.58328912, 0.21494896, 1.10369487, 1.29390492, 0.99853396, 1.04641801, 0.4904068, 0.95495949, 0.80166267, 0.7400626, 0.5190254, 0.72372078, 0.64470081 };
            var y = new Vector(consumption) { Header = "Consumption" };
            var x = new Matrix(income) { Header = new string[] { "Income" } };
            var LM = new LinearRegression(x, y);

            var tx = new double[] { -1, -2, 1, 2 };
            var testX = new Matrix(tx);
            var trueY = new double[,]
            {
                { -0.7433900, 1.272395, 0.26450257 },
                { -1.0374352, 1.005238, -0.01609868 },
                { -0.1733901, 1.824800, 0.82570506 },
                { 0.1024060, 2.110207, 1.10630631 },
            };
            var testY = LM.PredictionIntervals(testX);
            
            for(int i = 0; i < 4; ++i)
            {
                for (int j = 0; j < 3; j++)
                {
                    Assert.AreEqual(trueY[i,j], testY[i,j], 1E-1);
                }
            }
        }

        /// <summary>
        /// Test the prediction intervals method with a multi linear regression model
        /// </summary>
        [TestMethod]
        public void Test_PredictionIntervals_Multi()
        {
            var consumption = new double[] { 0.61598622, 0.46037569, 0.87679142, -0.27424514, 1.89737076, 0.91199291, 0.79453885, 1.64858747, 1.31372218, 1.89147495, 1.530714, 2.31829471, 1.81073916, -0.04173996, 0.35423556, -0.29163216, -0.87702794, 0.35113555, 0.4095977, -1.47580863, 0.83225762, 1.65583461, 1.41942029, 1.05437932, 1.97998024, 0.91391607, 1.05532326, 1.29889825, 1.13637586, 0.54994073, 0.94985262, 1.49599724, 0.57549599, 2.1112096, 0.41796279, 0.7979271, 0.50584598, -0.05775339, 0.9773001, 0.26826982, -0.15391875, -2.27411019, 1.07188123, 1.31644941, 0.5247277, -0.01728203, 0.4016515, -0.7528762, 0.65938376, 0.36854173, 0.76954464, 1.80876006, 0.96802954, 1.95946831, 1.73949442, 1.56389332, 0.84526442, 1.41504495, 0.76546608, 1.31380062, 1.6865532, 0.9343699, 1.90256675, 0.25656565, 0.84304279, 1.1117739, 1.79499406, 0.63768446, 0.01569397, 1.37731686, 1.15225712, 0.21016439, 1.76316026, 0.73053714, 0.85083233, 1.13789838, 0.46064152, 0.46937808, 0.98950145, 0.43942767, 0.85543417, 0.31230451, 0.40261313, -0.75910716, -0.34535008, 0.83564224, 0.48439843, -0.02626579, 1.85996999, 0.68354371, 1.07661214, 1.18372396, 0.37817936, 0.89392729, 1.09813766, 0.88122025, 1.14064791, 0.77176225, 0.77214364, 1.07014805, 0.26420505, 0.89311141, 0.91264702, 0.70025425, 0.92360967, 1.07997887, 0.60055799, 0.78298122, 1.04949253, 0.45219855, 1.69654264, 1.18062797, 1.02693626, 1.75069399, 1.30596977, 1.45888615, 0.94821191, 1.46971415, 1.12921436, 1.45748895, 1.51106759, 0.95508878, 0.96797647, 0.88629738, 0.42159086, 0.25689982, 0.36381084, 1.51630321, 0.29958257, 0.50899032, 0.69667241, 0.53634306, 0.43826169, 1.10719086, 1.46377882, 0.77334046, 0.96768535, 0.64760607, 0.95117167, 1.02041702, 0.76172556, 1.08136588, 0.77186494, 0.37591485, 1.11522822, 0.53100554, 0.58208747, 1.01434389, 0.52486184, 0.33874119, 0.44391875, 0.12505584, -0.20652548, 0.16783443, -0.72499446, -1.21068558, -0.3435437, -0.45174364, 0.60491332, -0.01115014, 0.5348174, 0.81040406, 0.64501881, 1.01833874, 0.50041315, 0.20141978, 0.43372599, 0.33593895, 0.60108995, 0.16942956, 0.26416034, 0.27877186, 0.46861292, 0.20545802, 0.46641787, 0.83917367, 0.47345118, 0.93375698, 0.91687178, 1.1253325, 0.59624005, 0.70814389, 0.66496956, 0.56167978, 0.40468216, 1.04770741, 0.72959779 };
            var income = new double[] { 0.97226104, 1.16908472, 1.55327055, -0.25527238, 1.98715363, 1.44733417, 0.53181193, 1.16012514, 0.4570115, 1.01662441, 1.90410126, 3.89025866, 0.70825266, 0.79430954, 0.43381827, 1.09380979, -1.66168482, -0.93835321, 0.09448779, -0.12259599, -0.16369546, 4.53650956, -1.46376532, 0.76166351, 1.16825761, 0.51729906, 0.73370026, 0.59458339, -0.03108003, 1.23808955, 1.51880293, 1.9145624, 0.70266687, 0.98314132, 0.7199262, 0.78553605, 1.05755946, -0.86765105, 0.4710034, 0.44037974, 0.33827686, -1.46388507, 1.21301507, 1.94243865, -0.26813406, -0.02363025, 2.02680183, 0.19560628, 0.11969888, 0.57548997, 0.5348441, 0.44938311, 0.85588425, 0.70632719, 1.49810999, 2.13138911, 2.02348788, 1.64921136, 1.36163845, 0.81927319, -0.23895759, 1.90677905, -0.33536283, 1.14181151, 1.2395111, 1.31938549, 0.7047715, 0.17977925, 0.81973366, -0.97505791, 1.80185055, 1.32743427, 1.44861875, 1.02084894, 0.95820336, 0.96207024, 1.22693023, -0.29489091, 0.67822897, 0.80025832, 0.83939484, 0.59572848, 0.03740765, -0.79479735, 0.2118329, 0.69043356, 0.36205181, 0.85100324, 2.12421067, 1.04095059, 0.43562041, 0.34210852, 0.55877186, 0.17627103, 0.05868803, 0.65496353, 0.69846579, 1.05367166, 0.59247377, 1.38110661, 0.94873528, 0.22780635, 0.88957006, 0.57591998, 0.95255663, 0.95161791, 0.79369738, 0.52035746, 0.99858552, 0.85103564, 1.18352222, 1.42325742, 2.10753052, 1.38767133, 1.01464427, 0.80893032, 0.89173174, 0.24722185, 0.66729226, 1.46092242, 1.95061335, 1.03174349, 1.16178668, 0.33725343, 0.84865826, -0.08818148, 2.3367892, -1.24443353, 2.40331419, 0.50559877, -0.12828194, 0.47941927, 0.27834026, 1.43729445, 1.62544947, 0.40353864, 0.72653162, 0.98056746, 0.52450113, 1.24238706, -0.96827007, 0.78835467, 0.51136949, 0.82191843, 2.25904474, 0.14987813, 0.28490722, 1.30059162, 0.65373993, 0.1926087, 0.26238732, 0.08392938, 0.71926565, 2.08693775, -2.3261186, 0.64019534, -0.18888849, 0.70899368, -1.1034318, -0.13213193, 0.10094986, 1.29229259, 0.49678098, 0.69495229, 1.21571502, -0.15658108, 0.52891255, 0.06074719, 1.62204885, 0.76689543, -0.05071452, 2.59106697, -4.26525047, 0.58146541, 0.58328912, 0.21494896, 1.10369487, 1.29390492, 0.99853396, 1.04641801, 0.4904068, 0.95495949, 0.80166267, 0.7400626, 0.5190254, 0.72372078, 0.64470081 };
            var production = new double[] { -2.45270031, -0.55152509, -0.35870786, -2.18545486, 1.90973412, 0.90153584, 0.30801942, 2.29130441, 4.14957387, 1.89062398, 1.2733529, 3.43689207, 2.79907636, 0.81768862, 0.86899693, 1.47296187, -0.88248358, 0.07427919, -0.41314971, -4.06411893, -6.85103912, -1.33129558, 2.42435972, 2.16904208, 3.02720471, 1.27881101, 1.30386487, 1.77537765, 2.05516067, 3.05838507, 1.10308888, 0.6334685, -0.29339056, 3.94815264, 0.87114701, 1.78447991, 0.42594327, -0.20491944, -0.29723637, 0.33560928, 0.41056141, -4.30076832, -1.64181977, 3.7804552, 0.24627687, 0.30977573, 0.91707444, -2.25457797, -2.07131293, -1.24766384, -1.4005043, -1.90375664, 1.1465572, 2.17942248, 3.36771897, 2.58168445, 2.89709545, 1.53821324, 0.7212874, 0.04115557, 0.32353159, 0.07020996, -0.14046924, 0.57978813, 0.58132135, -0.57641778, 0.37249329, 1.13734778, 1.30758228, 1.75000563, 1.843662, 2.40645058, 0.92013121, 0.87316353, 0.38103668, 0.70292025, 0.43372685, -0.36675732, -0.62142121, 0.42443392, 0.68265169, 0.77446547, 0.419448, -1.57345296, -1.91422028, 0.59131506, 1.36255645, 0.21710308, -0.13365365, 1.76874773, 0.76167388, 1.05024577, 0.87901471, 0.21755108, 0.40135891, 1.49618275, 1.22213656, 1.78250275, 1.267181, 2.04370404, 1.02552601, 0.33785685, 0.90043887, 0.87467273, 0.69285195, 2.11134752, 1.2441868, 1.3539689, 1.867147, 1.48763922, 2.28632066, 2.48091341, 1.10343775, 0.65122238, 0.72551955, 1.44421674, 1.10341663, 0.98574261, 0.90279881, 1.75533234, 0.99682019, 1.23293805, -0.10225268, -0.20388383, -1.35143911, -1.25954437, -1.44101744, -1.06013675, 0.70916406, 1.54280957, 0.59478143, -0.05776556, 0.53922789, -0.69876172, 0.60727351, 1.00599126, 0.65792806, 0.5746178, 0.5633003, 1.38522763, 1.39435718, 0.50586367, -0.50305848, 0.9336501, 0.95057853, 0.5963601, 0.33552773, 0.25603401, 0.91794957, 1.19594247, 0.22356909, 0.16424632, -0.42872571, -1.41297022, -3.26349945, -4.35417741, -5.75045075, -3.00372447, 1.39880419, 1.54400617, 1.88006931, 2.05402479, 1.42683671, 0.37927209, 0.5017404, 0.21878696, 1.01113866, 0.85151692, 0.88651817, 0.62923586, 0.07880166, 0.63305509, 0.67713243, 0.30744961, 0.23440888, 0.79208722, 0.54709166, 1.33801074, 0.62352731, 0.90355427, -0.46710878, -0.69702162, 0.3806061, -0.84554638, -0.41793048, -0.20331883, 0.47491844 };
            var savings = new double[] { 4.8103115, 7.28799234, 7.28901306, 0.98522964, 3.65777061, 6.0513418, -0.44583221, -1.53087186, -4.35859438, -5.05452579, 5.80995904, 16.04471706, -5.34886849, 8.42603436, 2.75879565, 11.14642986, -2.53351449, -6.59264464, 0.51717884, 11.3433954, -5.47619069, 24.30960536, -17.65616104, 0.64809041, -2.95006644, -1.47455755, -0.06754475, -3.57672239, -9.16055658, 9.09050404, 7.94495719, 6.69627648, 2.92296383, -6.81114259, 4.79207162, 2.371184, 7.77418337, -5.28634896, -1.84549644, 4.0495981, 5.86168864, 8.24322919, 5.70775044, 9.15098787, -5.68139002, 0.88183993, 15.99035721, 7.8055065, -3.34243955, 2.19400166, 0.03499563, -9.57651468, 0.3459546, -10.17004699, 0.21217916, 8.21600068, 13.8691815, 4.38900229, 6.51686089, -2.87544931, -18.71008389, 11.8287195, -23.57393474, 11.36628338, 5.86126836, 3.27551734, -10.09044542, -4.82920131, 12.46424452, -29.52866718, 12.32810406, 16.63076101, -0.96896505, 5.67776867, 3.64649867, -0.19730358, 10.01461545, -8.15576525, -2.48622554, 5.44681102, 2.87544931, 5.10951644, -3.17767248, -0.17953326, 6.49315257, -0.30920615, -0.14086493, 11.3419301, 7.2326515, 5.46708666, -5.9364609, -5.88618856, 2.63464703, -6.91664675, -11.99337844, -1.8370887, -5.18600629, 5.15609751, -2.42215898, 6.32351898, 10.11514398, -10.60541172, -0.11570727, -2.90726686, 2.55933958, -0.75802112, 3.33843952, -3.33843952, 0.61269338, 6.17532322, -7.22796452, 5.43456565, 19.35335228, -4.81709478, -3.12983982, -9.14923404, 1.88735718, -23.49652903, -9.86264835, 2.35825225, 12.2868408, 1.28001748, 2.57390229, -13.16296208, 13.22491995, -6.89043916, 41.66826457, -56.75209674, 50.75796205, 0.87861837, -14.70397426, 1.58733492, 0.49744834, 7.00891625, 6.1841315, -6.89274778, -2.9615204, 8.30885627, -8.99318286, 6.23585017, -42.28191228, -18.27592893, -7.87665229, 20.37236078, 37.40653542, -12.34810568, -10.5527614, 6.0310008, 6.60516929, -7.23648452, -9.00674555, 2.32887238, 29.83728599, 46.43989041, -32.53252494, 36.3124049, 0.9230602, 16.09059408, -24.49229966, 0.8482922, -5.54399051, 11.65612884, -0.35208609, -3.27335958, 14.33860193, -4.07705131, 2.722504, -3.45447712, 17.6253051, 8.9694971, -3.04922177, 29.04670355, -68.78826698, 7.81647729, 3.49400682, -11.2766145, 13.52020248, 8.2440477, 2.46195256, -1.51305022, -0.75840017, 5.02391773, 3.18092976, 3.48278601, 2.23653405, -2.72150106, -0.57285793 };
            var unemployment = new double[] { 0.9, 0.5, 0.5, 0.7, -0.1, -0.1, 0.1, 0, -0.2, -0.1, -0.2, -0.3, -0.3, 0, -0.1, 0.1, 0.2, 0.3, 0.5, 1.3, 1.4, 0.2, -0.4, -0.2, -0.6, 0, 0, 0.2, -0.4, -0.2, -0.4, -0.4, -0.1, -0.4, 0.1, 0, -0.2, -0.1, 0.2, 0.1, 0.3, 1.3, -0.1, -0.3, 0.2, 0.1, 0.1, 0.9, 0.5, 0.6, 0.5, 0.7, -0.5, -0.2, -0.9, -0.9, -0.5, -0.6, 0.1, 0, -0.1, 0.2, -0.3, -0.1, 0.2, 0, -0.2, -0.4, 0, -0.4, -0.3, -0.2, 0, -0.3, 0, -0.1, -0.3, 0.3, 0, 0.1, -0.2, 0, 0.7, 0.4, 0.5, 0.1, 0, 0.4, 0.1, 0.4, -0.2, -0.2, -0.4, 0, -0.3, -0.2, 0, -0.4, -0.2, -0.4, -0.1, 0.2, 0, 0, -0.1, -0.2, -0.1, 0.2, -0.2, -0.2, -0.1, -0.2, 0, -0.2, 0.1, -0.2, -0.2, 0.1, -0.1, -0.2, 0, 0, -0.1, 0, 0.4, 0.2, 0.5, 0.7, 0, 0.1, -0.1, 0.3, -0.1, 0.4, -0.2, -0.4, 0.1, -0.2, -0.2, 0, -0.2, -0.2, 0, -0.1, -0.2, -0.1, -0.1, -0.1, 0, 0.2, 0.1, 0.3, 0.1, 0.5, 0.5, 1.2, 1.4, 0.8, 0.3, 0.1, 0, -0.5, 0.1, -0.2, -0.3, 0.1, -0.1, -0.5, -0.3, 0, -0.4, 0.1, -0.4, 0, -0.3, -0.5, 0, -0.6, -0.2, -0.3, -0.2, -0.1, -0.3, 0, 0, -0.1, 0 };
            var list = new List<double[]> { income, production, savings, unemployment };
            var y = new Vector(consumption) { Header = "Consumption" };
            var x = new Matrix(list) { Header = new string[] { "Income", "Production", "Savings", "Unemployment" } };
            var LM = new LinearRegression(x, y);

            var tx = new double[,]
            { 
                { -1, -1, 1, -0.25 },
                { -2, -2, 2, -0.15 },
                { 1, 1, 3, 0.15 },
                { 2, 2, 4, 0.25 }
            };
            var testX = new Matrix(tx);
            var trueY = new double[,]
            {
                { -1.0524045, 0.07807506, -0.4871647 },
                { -1.8989056,-0.72766682, -1.3132862 },
                { 0.3146174, 1.40766558, 0.8611415 },
                { 0.9975575, 2.11398500, 1.5557712 }
            };
            var testY = LM.PredictionIntervals(testX);

            for (int i = 0; i < 4; ++i)
            {
                for (int j = 0; j < 3; j++)
                {
                    Assert.AreEqual(trueY[i, j], testY[i, j], 1E-1);
                }
            }
        }
    }
}
