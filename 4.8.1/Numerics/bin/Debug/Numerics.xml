<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Numerics</name>
    </assembly>
    <members>
        <member name="T:Numerics.Data.Bilinear">
            <summary>
            A class for bilinear interpolation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method interpolates functions of two variables using repeated linear interpolation. First linear 
            interpolation is performed in one direction, and then again in another. 
            </para>
            <para>
                Methods are designed to be compatible with the VBA Macro 'Interpolate Version 2.0.0' November 2017, USACE Risk Management Center
            </para>
            <para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Bilinear_interpolation"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Bilinear.#ctor(System.Double[],System.Double[],System.Double[0:,0:],Numerics.Data.SortOrder)">
            <summary>
            Construct new bilinear interpolation. 
            </summary>
            <param name="x1Values">Array of x1-values.</param>
            <param name="x2Values">Array of x2-values.</param>
            <param name="yValues">2-Column array of y-values; Yij = y(x1i, x2j). The first column is the same length as the x1 array, and the second column is the same length as the x2 array.</param>
            <param name="sortOrder">The sort order of the x1- and x2-values, either ascending or descending. Both need to have the same sort order. Default = Ascending. </param>
        </member>
        <member name="P:Numerics.Data.Bilinear.X1Values">
            <summary>
            The array of x1-values.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.X2Values">
            <summary>
            The array of x2-values.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.YValues">
            <summary>
            The array of y-values.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.UseSmartSearch">
            <summary>
            Determines whether to use a smart searching algorithm or just sequential search.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.X1Transform">
            <summary>
            The transform for the x1-values. Default = None.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.X2Transform">
            <summary>
            The transform for the x2-values. Default = None.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.YTransform">
            <summary>
            The transform for the y-values. Default = None.
            </summary>
        </member>
        <member name="P:Numerics.Data.Bilinear.SortOrder">
            <summary>
            The sort order of the x1-values, either ascending or descending. Default = Ascending. 
            </summary>
        </member>
        <member name="M:Numerics.Data.Bilinear.Interpolate(System.Double,System.Double)">
            <summary>
            Given a value x1 and x2, returns an interpolated value for y. 
            </summary>
            <param name="x1">The x1-value to interpolate.</param>
            <param name="x2">The x2-value to interpolate.</param>
        </member>
        <member name="T:Numerics.Data.CubicSpline">
            <summary>
            A class for cubic spline interpolation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Spline interpolation uses a piecewise polynomial called a spline as the interpolant. Instead of fitting a single, high degree 
            polynomial to all of the given values at once, spline interpolation fits low-degree polynomials to small subsets of values. For cubic spline
            interpolation, polynomials of degree 3 are used.
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description>
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Spline_interpolation"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Data.CubicSpline.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Data.SortOrder)">
            <summary>
            Construct new linear interpolation. 
            </summary>
            <param name="xValues">List of x-values.</param>
            <param name="yValues">List of y-values.</param>
            <param name="sortOrder">The sort order of the x-values, either ascending or descending. Default = Ascending. </param>
        </member>
        <member name="F:Numerics.Data.CubicSpline.y2">
            <summary>
            Stores the array of second derivatives.
            </summary>
        </member>
        <member name="M:Numerics.Data.CubicSpline.SetSecondDerivatives">
            <summary>
            Auxiliary routine to set the second derivatives. If you make changes to the x- or y-values, then you need to call this routine afterwards.
            </summary>
        </member>
        <member name="M:Numerics.Data.CubicSpline.BaseInterpolate(System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Data.Polynomial">
            <summary>
            A class for polynomial interpolation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method is the interpolation of a given bivariate data set by the polynomial of lowest possible degree
            that passes through the points of the dataset.
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description>
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Polynomial_interpolation"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Polynomial.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Data.SortOrder)">
            <summary>
            Construct new polynomial interpolation. 
            </summary>
            <param name="order">The polynomial order. There are order + 1 terms for each polynomial function.</param>
            <param name="xValues">List of x-values.</param>
            <param name="yValues">List of y-values.</param>
            <param name="sortOrder">The sort order of the x-values, either ascending or descending. Default = Ascending. </param>
        </member>
        <member name="P:Numerics.Data.Polynomial.Error">
            <summary>
            The error estimate for the most recent call to the interpolation function.
            </summary>
        </member>
        <member name="P:Numerics.Data.Polynomial.Order">
            <summary>
            The polynomial order. There are order + 1 terms for each polynomial function. 
            </summary>
        </member>
        <member name="M:Numerics.Data.Polynomial.BaseInterpolate(System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Data.Interpolater">
            <summary>
            A base class for interpolation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Interpolation is an estimation method to find new data points within the range of a discrete set of known data points.
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Interpolation"/>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Interpolater.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Data.SortOrder)">
            <summary>
            Construct a new interpolation class. 
            </summary>
            <param name="xValues">List of x-values. The x-Values must be monotonic, either increasing or decreasing.</param>
            <param name="yValues">List of y-values.</param>
            <param name="sortOrder">The sort order of the x-values, either ascending or descending. Default = Ascending. </param>
        </member>
        <member name="P:Numerics.Data.Interpolater.Count">
            <summary>
            The size of the xy-value list.
            </summary>
        </member>
        <member name="P:Numerics.Data.Interpolater.SearchStart">
            <summary>
            Keeps track of the starting search location. 
            </summary>
        </member>
        <member name="F:Numerics.Data.Interpolater.deltaStart">
            <summary>
            Keeps track of the difference is start locations. 
            </summary>
        </member>
        <member name="F:Numerics.Data.Interpolater.correlated">
            <summary>
            Determines which search method to use. If values are correlated, use the Hunt method. 
            </summary>
        </member>
        <member name="P:Numerics.Data.Interpolater.UseSmartSearch">
            <summary>
            Determines whether to use a smart searching algorithm or just sequential search.
            </summary>
        </member>
        <member name="P:Numerics.Data.Interpolater.XValues">
            <summary>
            The array of x-values.
            </summary>
        </member>
        <member name="P:Numerics.Data.Interpolater.YValues">
            <summary>
            The array of y-values.
            </summary>
        </member>
        <member name="P:Numerics.Data.Interpolater.SortOrder">
            <summary>
            The sort order of the x-values, either ascending or descending. Default = Ascending. 
            </summary>
        </member>
        <member name="M:Numerics.Data.Interpolater.BaseInterpolate(System.Double,System.Int32)">
            <summary>
            Given a value x, returns an interpolated value.
            </summary>
            <param name="x">The value to interpolate.</param>
            <param name="index">The zero-based index of the lower bound of the interpolation interval.</param>
        </member>
        <member name="M:Numerics.Data.Interpolater.Interpolate(System.Collections.Generic.IList{System.Double})">
            <summary>
            Given a list of x-values, returns an array of interpolated values.
            </summary>
            <param name="x">The list of values to interpolate.</param>
        </member>
        <member name="M:Numerics.Data.Interpolater.Interpolate(System.Double)">
            <summary>
            Given a value x, returns an interpolated value. 
            </summary>
            <param name="x">The value to interpolate.</param>
        </member>
        <member name="M:Numerics.Data.Interpolater.Search(System.Double)">
            <summary>
            Search for the lower bound of the interpolation interval. This method updates whether the values being searched on repeated calls are correlated, 
            and saves search value for future use on the next call.  
            </summary>
            <param name="x">The value to search for.</param>
            <returns>
            The lower bound of the interpolation interval
            </returns>
        </member>
        <member name="M:Numerics.Data.Interpolater.SequentialSearch(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a sequential search method.
            </summary>
            <param name="x">The value to search for.</param>
            <returns>
            The lower bound of the location of a value
            </returns>
        </member>
        <member name="M:Numerics.Data.Interpolater.BisectionSearch(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a bisection search method.
            </summary>
            <param name="x">The value to search for.</param>
            <returns>
            The lower bound of the location of a value
            </returns>
        </member>
        <member name="M:Numerics.Data.Interpolater.HuntSearch(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a hunt search method.
            </summary>
            <param name="x">The value to search for.</param>
            <returns>
            The lower bound of the location of a value
            </returns>
        </member>
        <member name="T:Numerics.Data.Linear">
            <summary>
            A class for linear interpolation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Linear interpolation is a method of estimation and curve fitting using linear polynomials to construct new data points
            within the range of a discrete set of known data points.
            </para>
            <para>
                Methods are designed to be compatible with the VBA Macro 'Interpolate Version 2.0.0' November 2017, USACE Risk Management Center
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Linear_interpolation"/>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Linear.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Data.SortOrder)">
            <summary>
            Construct new linear interpolation. 
            </summary>
            <param name="xValues">List of x-values.</param>
            <param name="yValues">List of y-values.</param>
            <param name="sortOrder">The sort order of the x-values, either ascending or descending. Default = Ascending. </param>
        </member>
        <member name="P:Numerics.Data.Linear.XTransform">
            <summary>
            The transform for the x-values. Default = None.
            </summary>
        </member>
        <member name="P:Numerics.Data.Linear.YTransform">
            <summary>
            The transform for the y-values. Default = None.
            </summary>
        </member>
        <member name="M:Numerics.Data.Linear.BaseInterpolate(System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Linear.Extrapolate(System.Double)">
            <summary>
            Given a value x, returns an extrapolated value. 
            </summary>
            <param name="x">The value to extrapolate.</param>
        </member>
        <member name="T:Numerics.Data.Search">
            <summary>
            A class for searching a list.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This class has 3 search methods: Sequential, Bisection, and Hunt.
            <list type="bullet">
            <item>
            <description>
            Sequential search, or linear search, checks each element in a list until a match is found or the whole list has been searched.
            </description>
            </item>
            <item>
            <description> 
            The bisection method, also known as binary search, starts off by comparing the target value (i.e. value being searched for in the array) 
            against the middle element of the list. If the target value and middle element are not equal, the half of the list in which the target 
            cannot lie is eliminated. If the list  sorted in ascending order, if the target is less than the middle element, the second half of the list of values 
            greater than the middle element is eliminated. If the target is greater than the middle element then the first half of the list is eliminated. Then, the algorithm starts
            again, comparing the middle element of the new, smaller list against the target element. This continues until the target value is found or until the remaining half 
            being empty.
            </description>
            </item>
            </list>
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Linear_search"/>
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Binary_search"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Numerics.Data.Search.Method">
            <summary>
            Enumeration of search methods.
            </summary>
        </member>
        <member name="F:Numerics.Data.Search.Method.Sequential">
            <summary>
            Search sequentially.
            </summary>
        </member>
        <member name="F:Numerics.Data.Search.Method.Bisection">
            <summary>
            Search with bisection method.
            </summary>
        </member>
        <member name="F:Numerics.Data.Search.Method.Hunt">
            <summary>
            Search using the hunt algorithm.
            </summary>
        </member>
        <member name="M:Numerics.Data.Search.Sequential(System.Double,System.Collections.Generic.IList{System.Double},System.Int32,Numerics.Data.SortOrder)">
            <summary>
            Searches for the lower bound of the location of a value using a sequential search method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="values">Array of values to search within.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <param name="order">Optional. The sort order of the values, either ascending or descending. Default = Ascending.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Sequential(System.Double,Numerics.Data.OrderedPairedData,System.Int32)">
            <summary>
            Searches for the lower bound of the location of a value using a sequential search method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="orderedPairedData">Ordered paired data to search within.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Sequential(System.Double,System.Collections.Generic.IList{Numerics.Data.Ordinate},System.Int32,Numerics.Data.SortOrder)">
            <summary>
            Searches for the lower bound of the location of a value using a sequential search method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="ordinates">List of ordinates to search within.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <param name="order">Optional. The sort order of the values, either ascending or descending. Default = Ascending.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Bisection(System.Double,System.Collections.Generic.IList{System.Double},System.Int32,Numerics.Data.SortOrder)">
            <summary>
            Searches for the lower bound of the location of a value using a bisection search method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="values">Array of values to search within.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <param name="order">Optional. The sort order of the values, either ascending or descending. Default = Ascending.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Bisection(System.Double,Numerics.Data.OrderedPairedData,System.Int32)">
            <summary>
            Searches for the lower bound of the location of a value using a bisection search method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="orderedPairedData">Ordered paired data to search within.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Bisection(System.Double,System.Collections.Generic.IList{Numerics.Data.Ordinate},System.Int32,Numerics.Data.SortOrder)">
            <summary>
            Searches for the lower bound of the location of a value using a bisection search method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="ordinates">List of ordinates to search within.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <param name="order">Optional. The sort order of the values, either ascending or descending. Default = Ascending.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Hunt(System.Double,System.Collections.Generic.IList{System.Double},System.Int32,Numerics.Data.SortOrder)">
            <summary>
            Searches for the lower bound of the location of a value using the Hunt method.
            </summary>
            <param name="x">The value to search for.</param>
            <param name="values">Array of values.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <param name="order">Optional. The sort order of the values, either ascending or descending. Default = Ascending.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
        </member>
        <member name="M:Numerics.Data.Search.Hunt(System.Double,Numerics.Data.OrderedPairedData,System.Int32)">
            <summary>
            Searches for the lower bound of the location of a value using the HUNT method.
            </summary>
            <param name="xValue">The value to search for.</param>
            <param name="orderedPairedData">Ordered paired data.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
            <remarks>
            Given an array of X and given a value of X, returns a location J such that X is between XArray(J) and XArray(J+1). The XArray must be
            monotonic, either increasing or decreasing. J = 0 or J = XArray.Length is returned to indicate that X is out of range. The SearchStart is
            taken as the initial guess for J on output.
            </remarks>
        </member>
        <member name="M:Numerics.Data.Search.Hunt(System.Double,System.Collections.Generic.IList{Numerics.Data.Ordinate},System.Int32,Numerics.Data.SortOrder)">
            <summary>
            Searches for the lower bound of the location of a value using the HUNT method.
            </summary>
            <param name="xValue">The value to search for.</param>
            <param name="ordinateData">The list of ordinates.</param>
            <param name="start">Optional. Location to start the search of the arrays. Default = 0.</param>
            <param name="order">Optional. Ascending or descending. Default = ASC.</param>
            <returns>
            The lower bound of the location to be used in interpolation. E.g., X1 is the lower, X2 is the upper (X1 + 1).
            </returns>
            <remarks>
            Given an array of X and given a value of X, returns a location J such that X is between XArray(J) and XArray(J+1). The XArray must be
            monotonic, either increasing or decreasing. J = 0 or J = XArray.Length is returned to indicate that X is out of range. The SearchStart is
            taken as the initial guess for J on output.
            </remarks>
        </member>
        <member name="T:Numerics.Data.SortOrder">
            <summary>
            Enumeration defining the sort order of values.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.SortOrder.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Numerics.Data.SortOrder.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="F:Numerics.Data.SortOrder.None">
            <summary>
            Not sorted. 
            </summary>
        </member>
        <member name="T:Numerics.Data.Transform">
            <summary>
            Enumeration of data transformations.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.Transform.None">
            <summary>
            Linear, or no transform. 
            </summary>
        </member>
        <member name="F:Numerics.Data.Transform.Logarithmic">
            <summary>
            Logarithmic transform. Values must be greater than 0.
            </summary>
        </member>
        <member name="F:Numerics.Data.Transform.NormalZ">
            <summary>
            Normal distribution Z-variate transform. Values must be between 0 and 1. 
            </summary>
        </member>
        <member name="T:Numerics.Data.LineSimplification">
            <summary>
            Class to perform line simplification using the RDP algorithm.
            </summary>
            <remarks>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            <para>
            <b> Description: </b>
            The Ramer-Douglas-Peucker algorithm decimates a curve composed of line segments to a similar curve with fewer points. The purpose is, given a curve
            composed of line segments,, to find a similar curve with fewer points. "Dissimilar" in this case is defined based on the maximum distance
            between the original curve and the simplified curve (in this class, that maximum distance is user defined). The simplified curve consists of
            a subset of the points that defined the original curve.
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm"/>
            </remarks>
        </member>
        <member name="M:Numerics.Data.LineSimplification.RamerDouglasPeucker(System.Collections.Generic.List{Numerics.Data.Ordinate},System.Double,System.Collections.Generic.List{Numerics.Data.Ordinate}@)">
            <summary>
            Implements the Ramer-Douglas-Peucker algorithm
            </summary>
            <param name="ordinates"> The list of input ordinates that make up the original curve </param>
            <param name="epsilon"> The max allowable distance between the original curve and outputted simplified curve </param>
            <param name="output"> The ordinates that make up simplified curve produced by the algorithm </param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Numerics.Data.LineSimplification.PerpendicularDistance(Numerics.Data.Ordinate,Numerics.Data.Ordinate,Numerics.Data.Ordinate)">
            <summary>
            Calculates the distance of a point from a given line
            </summary>
            <param name="pt"> The point who's distance is being measured </param>
            <param name="lineStart"> The starting point of line </param>
            <param name="lineEnd"> The ending point of the line</param>
            <returns></returns>
        </member>
        <member name="T:Numerics.Data.Statistics.RunningCovarianceMatrix">
            <summary>
            A class for keeping track of a running covariance matrix.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningCovarianceMatrix.#ctor(System.Int32)">
            <summary>
            Construct a covariance matrix.
            </summary>
            <param name="size">The number of rows and columns.</param>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningCovarianceMatrix.N">
            <summary>
            The sample size N.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningCovarianceMatrix.Mean">
            <summary>
            The mean vector
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningCovarianceMatrix.Covariance">
            <summary>
            The covariance matrix. This is unadjusted by the sample size.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningCovarianceMatrix.Push(System.Collections.Generic.IList{System.Double})">
            <summary>
            Add a new vector to the running statistics. 
            </summary>
            <param name="values">Vector of data values. The length of the vector but be the same as 
            the number of rows</param>
        </member>
        <member name="T:Numerics.Data.Statistics.Probability">
            <summary>
            A class for performing probability calculations for risk analysis. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="T:Numerics.Data.Statistics.Probability.DependencyType">
            <summary>
            Enumeration of dependency types. 
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Probability.DependencyType.Independent">
            <summary>
            Statistically independent.
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Probability.DependencyType.PerfectlyPositive">
            <summary>
            Perfectly positively dependent.
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Probability.DependencyType.PerfectlyNegative">
            <summary>
            Perfectly negatively dependent.
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Probability.DependencyType.CorrelationMatrix">
            <summary>
            User-defined correlation matrix.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.AAndB(System.Double,System.Double,System.Double)">
            <summary>
            Returns the probability of intersection (or joint probability) of A and B, P(A and B). 
            </summary>
            <param name="A">Marginal probability of A.</param>
            <param name="B">Marginal probability of B.</param>
            <param name="rho">Pearson's correlation coefficient. Default = 0.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.AOrB(System.Double,System.Double,System.Double)">
            <summary>
            Returns the probability of union of A and B, P(A or B).
            </summary>
            <param name="A">Marginal probability of A.</param>
            <param name="B">Marginal probability of B.</param>
            <param name="rho">Pearson's correlation coefficient. Default = 0.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.ANotB(System.Double,System.Double,System.Double)">
            <summary>
            Returns the probability of A and not B, P(A and not B).
            </summary>
            <param name="A">Marginal probability of A.</param>
            <param name="B">Marginal probability of B.</param>
            <param name="rho">Pearson's correlation coefficient. Default = 0.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.BNotA(System.Double,System.Double,System.Double)">
            <summary>
            Returns the probability of B and not A, P(B and not A).
            </summary>
            <param name="A">Marginal probability of A.</param>
            <param name="B">Marginal probability of B.</param>
            <param name="rho">Pearson's correlation coefficient. Default = 0.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.AGivenB(System.Double,System.Double,System.Double)">
            <summary>
            Returns the probability of A given B, P(A|B).
            </summary>
            <param name="A">Marginal probability of A.</param>
            <param name="B">Marginal probability of B.</param>
            <param name="rho">Pearson's correlation coefficient. Default = 0.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.BGivenA(System.Double,System.Double,System.Double)">
            <summary>
            Returns the probability of B given A, P(B|A).
            </summary>
            <param name="A">Marginal probability of A.</param>
            <param name="B">Marginal probability of B.</param>
            <param name="rho">Pearson's correlation coefficient. Default = 0.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbability(System.Collections.Generic.IList{System.Double},Numerics.Data.Statistics.Probability.DependencyType)">
            <summary>
            Returns the joint probability.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="dependency">The dependency type. Default = Independent.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbability(System.Collections.Generic.IList{System.Double},System.Int32[],System.Double[0:,0:],Numerics.Data.Statistics.Probability.DependencyType)">
            <summary>
            Computes the joint probability of multiple events with dependency, using the Product of Conditional Marginals (PCM) method.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="dependency">The dependency type. Default = Correlation matrix.</param>
            <returns>The joint probability.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentJointProbability(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the joint probability assuming perfect independence. 
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentJointProbability(System.Collections.Generic.IList{System.Double},System.Int32[])">
            <summary>
            Returns the joint probability assuming perfect independence. 
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositiveJointProbability(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the joint probability assuming perfect positive dependence. 
            </summary>
            <param name="probabilities">List of probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositiveJointProbability(System.Collections.Generic.IList{System.Double},System.Int32[])">
            <summary>
            Returns the joint probability assuming perfect positive dependence. 
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.NegativeJointProbability(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the joint probability assuming perfect negative dependence. 
            </summary>
            <param name="probabilities">List of probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.NegativeJointProbability(System.Collections.Generic.IList{System.Double},System.Int32[])">
            <summary>
            Returns the joint probability assuming perfect negative dependence. 
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbabilityHPCM(System.Collections.Generic.IList{System.Double},System.Int32[],System.Double[0:,0:],System.Double[])">
            <summary>
            Returns the joint probability of multiple events with dependency, using the Product of Conditional Marginals (PCM) method.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="conditionalProbabilities">Returns the array of conditional probabilities for each event.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbabilityPCM(System.Collections.Generic.IList{System.Double},System.Int32[],System.Double[0:,0:],System.Double[])">
            <summary>
            Returns the joint probability of multiple events with dependency, using the Product of Conditional Marginals (PCM) method.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="conditionalProbabilities">Returns the array of conditional probabilities for each event.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbabilitiesPCM(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns an array of joint probabilities of multiple events with dependency, using the Product of Conditional Marginals (PCM) method.
            </summary>
            <param name="probabilities">And array of probabilities for each event.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbability(System.Collections.Generic.IList{System.Double},System.Int32[],Numerics.Distributions.MultivariateNormal)">
            <summary>
            Returns the joint probability of multiple events with dependency. 
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="multivariateNormal">The multivariate normal distribution for computing the joint probability.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.JointProbabilities(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:],Numerics.Distributions.MultivariateNormal)">
            <summary>
            Returns an array of joint probabilities of multiple events with dependency.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="multivariateNormal">The multivariate normal distribution for computing the joint probability.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.Union(System.Collections.Generic.IList{System.Double},Numerics.Data.Statistics.Probability.DependencyType)">
            <summary>
            Compute the probability of union.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="dependency">The dependency type. Default = Independent.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentUnion(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the probability of union assuming independence (De Morgan's Rule).
            </summary>
            <param name="probabilities">List of probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositivelyDependentUnion(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the unimodal bound for the probability of union assuming perfect positive dependence. 
            </summary>
            <param name="probabilities">List of probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.NegativelyDependentUnion(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the unimodal bound for the probability of union assuming perfect negative dependence. 
            </summary>
            <param name="probabilities">List of probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.UnionPCM(System.Collections.Generic.IList{System.Double},System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Returns the probability of union using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="absoluteTolerance">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
            <param name="relativeTolerance">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.UnionPCM(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Returns the probability of union using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="absoluteTolerance">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
            <param name="relativeTolerance">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.UnionPCM(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],System.Double[0:,0:],System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Int32[]}@,System.Double,System.Double)">
            <summary>
            Returns the probability of union using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="eventProbabilities">Output. A list of exclusive event probabilities.</param>
            <param name="eventIndicators">Output. A list of exclusive event indicators that were evaluated.</param>
            <param name="absoluteTolerance">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
            <param name="relativeTolerance">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.Union(System.Collections.Generic.IList{System.Double},Numerics.Distributions.MultivariateNormal)">
            <summary>
            Returns the probability of union using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="multivariateNormal">The multivariate normal distribution used to compute the joint probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.Union(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],Numerics.Distributions.MultivariateNormal)">
            <summary>
            Returns the probability of union using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="multivariateNormal">The multivariate normal distribution used to compute the joint probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentExclusive(System.Collections.Generic.IList{System.Double},System.Int32[])">
            <summary>
            Returns the exclusive probability of multiple events occurring assuming independence.
            </summary>
            <param name="probabilities">And array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentExclusive(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:])">
            <summary>
            Returns an array of exclusive probabilities of multiple events occurring assuming independence.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentExclusive(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of exclusive probabilities of multiple events occurring assuming independence.
            </summary>
            <param name="probabilities">And array of probabilities for each event.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.IndependentExclusive(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Int32[]}@,System.Double,System.Double)">
            <summary>
            Returns a list of exclusive probabilities of multiple events occurring assuming independence.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="eventProbabilities">Output. A list of exclusive event probabilities.</param>
            <param name="eventIndicators">Output. A list of exclusive event indicators that were evaluated.</param>
            <param name="absoluteTolerance">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
            <param name="relativeTolerance">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositivelyDependentExclusive(System.Collections.Generic.IList{System.Double},System.Int32[])">
            <summary>
            Returns the exclusive probability of multiple events occurring assuming perfect positive dependence.
            </summary>
            <param name="probabilities">And array of probabilities for each event.</param>
            <param name="indicators">An array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositivelyDependentExclusive(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:])">
            <summary>
            Returns an array of exclusive probabilities of multiple events occurring assuming perfect positive dependence.
            </summary>
            <param name="probabilities">And array of probabilities for each event.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositivelyDependentExclusive(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of exclusive probabilities of multiple events occurring assuming perfect positive dependence.
            </summary>
            <param name="probabilities">And array of probabilities for each event.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.PositivelyDependentExclusive(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Int32[]}@,System.Double,System.Double)">
            <summary>
            Returns a list of exclusive probabilities of multiple events occurring assuming independence.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="eventProbabilities">Output. A list of exclusive event probabilities.</param>
            <param name="eventIndicators">Output. A list of exclusive event indicators that were evaluated.</param>
            <param name="absoluteTolerance">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
            <param name="relativeTolerance">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.ExclusivePCM(System.Collections.Generic.IList{System.Double},System.Double[0:,0:])">
            <summary>
            Returns an array of exclusive probabilities of multiple events using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.ExclusivePCM(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns an array of exclusive probabilities of multiple events using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.ExclusivePCM(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],System.Double[0:,0:],System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Int32[]}@,System.Double,System.Double)">
            <summary>
            Returns an array of exclusive probabilities of multiple events using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="eventProbabilities">Output. A list of exclusive event probabilities.</param>
            <param name="eventIndicators">Output. A list of exclusive event indicators that were evaluated.</param>
            <param name="absoluteTolerance">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-8.</param>
            <param name="relativeTolerance">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.Exclusive(System.Collections.Generic.IList{System.Double},Numerics.Distributions.MultivariateNormal)">
            <summary>
            Returns an array of exclusive probabilities of multiple events using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="multivariateNormal">The multivariate normal distribution used to compute the joint probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.Exclusive(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],Numerics.Distributions.MultivariateNormal)">
            <summary>
            Returns an array of exclusive probabilities of multiple events using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="multivariateNormal">The multivariate normal distribution used to compute the joint probabilities.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.Exclusive(System.Collections.Generic.IList{System.Double},System.Int32[],System.Int32[0:,0:],Numerics.Distributions.MultivariateNormal,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Int32[]}@,System.Double,System.Double)">
            <summary>
            Returns an array of exclusive probabilities of multiple events using the inclusion-exclusion method. Dependence between events is captured with the multivariate normal distribution.
            </summary>
            <param name="probabilities">An array of probabilities for each event.</param>
            <param name="binomialCombinations">An array of binomial combinations.</param>
            <param name="indicators">An 2D array of indicators, 0 means the event did not occur, 1 means the event did occur.</param>
            <param name="multivariateNormal">The multivariate normal distribution used to compute the joint probabilities.</param>
            <param name="eventProbabilities">Output. A list of exclusive event probabilities.</param>
            <param name="eventIndicators">Output. A list of exclusive event indicators that were evaluated.</param>
            <param name="absoluteTol">The absolute tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-8.</param>
            <param name="relativeTol">The relative tolerance for evaluation convergence of the inclusion-exclusion algorithm. Default = 1E-4.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.SumSearch(System.Double[],System.Int32[],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="probabilityValues"></param>
            <param name="indicatorValues"></param>
            <param name="indicators"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.CommonCauseAdjustment(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the common cause adjustment factor.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <returns>The common cause adjustment factor.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.CommonCauseAdjustment(System.Collections.Generic.IList{System.Double},System.Double[0:,0:],Numerics.Data.Statistics.Probability.DependencyType)">
            <summary>
            Computes the common cause adjustment factor.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <param name="correlationMatrix">The correlation matrix defining the dependency.</param>
            <param name="dependency">The dependency type. Default = Correlation matrix.</param>
            <returns>The common cause adjustment factor.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Probability.MutuallyExclusiveAdjustment(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the mutually exclusive adjustment factor.
            </summary>
            <param name="probabilities">List of probabilities.</param>
            <returns>The mutually exclusive adjustment factor.</returns> 
        </member>
        <member name="T:Numerics.Data.Statistics.GoodnessOfFit">
            <summary>
            A class containing goodness-of-fit measures.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.AIC(System.Int32,System.Double)">
            <summary>
            Gets the Akaike Information Criterion (AIC) used for model selection among a finite set of models; the model with the lowest AIC is preferred.
            When comparing multiple model fits, additional model parameters often yield larger, optimized log-likelihood values.
            Unlike the optimized log-likelihood value, AIC penalizes for more complex models, i.e., models with additional parameters.
            </summary>
            <param name="numberOfParameters">The number of model parameters</param>
            <param name="logLikelihood">The maximum log-likelihood.</param>
            <returns>The AIC value for the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.AICc(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the Akaike Information Criterion (AIC), corrected for small sample sizes, used for model selection among a finite set of models; the model with the lowest AIC is preferred.
            When comparing multiple model fits, additional model parameters often yield larger, optimized log-likelihood values.
            Unlike the optimized log-likelihood value, AIC penalizes for more complex models, i.e., models with additional parameters.
            </summary>
            <param name="sampleSize">The sample size.</param>
            <param name="numberOfParameters">The number of model parameters</param>
            <param name="logLikelihood">The maximum log-likelihood.</param>
            <returns>The AIC value for the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.BIC(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the Bayesian information criterion (BIC) used for model selection among a finite set of models; the model with the lowest BIC is preferred.
            Like AIC, BIC uses the optimal log-likelihood function value and penalizes for more complex models, i.e., models with additional parameters.
            The penalty of BIC is a function of the sample size, and so is typically more severe than that of AIC.
            </summary>
            <param name="sampleSize">The sample size.</param>
            <param name="numberOfParameters">The number of model parameters</param>
            <param name="logLikelihood">The maximum log-likelihood.</param>
            <returns>The BIC value for the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.AICWeights(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of weights based on a list of model AIC values.
            </summary>
            <param name="aicValues">The list of model AIC values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.BICWeights(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of weights based on a list of model BIC values.
            </summary>
            <param name="bicValues">The list of model BIC values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.RMSE(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Gets the Root Mean Square Error (RMSE) of the model compared to the observed data.
            </summary>
            <param name="observedValues">The list of observed values to measure against.</param>
            <param name="modeledValues">The list of modeled values to compare against the observed values.</param>
            <param name="k">Number of model parameters. Default = 0.</param>
            <returns>The RMSE of the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.RMSE(System.Collections.Generic.IList{System.Double},Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            Gets the Root Mean Square Error (RMSE) of the model compared to the observed data. Weibull plotting positions are assumed.
            </summary>inverse
            <param name="observedValues">The list of observed values to measure against.</param>
            <param name="model">The univariate continuous distribution.</param>
            <returns>The RMSE of the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.RMSE(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            Gets the Root Mean Square Error (RMSE) of the model compared to the observed data. 
            </summary>
            <param name="observedValues">The list of observed values to measure against.</param>
            <param name="plottingPositions">The plotting positions of the observed values.</param>
            <param name="model">The univariate continuous distribution.</param>
            <returns>The RMSE of the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.RMSEWeights(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of weights based on a list of model RMSE values. Weights are derived using inverse-MSE weighting.
            </summary>
            <param name="rmseValues">The list of model RMSE values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.RSquared(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Gets the R^2, the square of the correlation of the model data compared to the observed data.
            </summary>
            <param name="observedValues">The list of observed values to measure against.</param>
            <param name="modeledValues">The list of modeled values to compare against the observed values.</param>
            <returns>The R^2 value pf the model</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.Accuracy(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Gets the accuracy of the modeled data compared to the observed data.
            </summary>
            <param name="observedValues">The list of observed values to measure against.</param>
            <param name="modeledValues">The list of modeled values to compare against the observed values.</param>
            <returns>Th accuracy as percent.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.KolmogorovSmirnov(System.Collections.Generic.IList{System.Double},Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            Computes the Kolmogorov-Smirnov test statistic, which is used to decide if a sample comes from a population with a specified distribution.
            </summary>
            <remarks>
            <b> References: </b> 
            <see href="https://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm"/>
            </remarks>
            <param name="observedValues">The list of observed values to measure against. Must be sorted in ascending order.</param>
            <param name="model">The univariate continuous distribution.</param>
            <returns>The Kolmogorov Smirnov test statistic</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.ChiSquared(System.Collections.Generic.IList{System.Double},Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            Computes the Chi-Squared test statistic, which is used to decide if a sample of data comes from a population with a specified distribution.
            </summary>
            <remarks>
            <b> References: </b>
            <see href="https://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm"/>
            </remarks>
            <param name="observedValues">The list of observed values to measure against. Must be sorted in ascending order.</param>
            <param name="model">The univariate continuous distribution.</param>
            <returns>The Chi-Squared test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.GoodnessOfFit.AndersonDarling(System.Collections.Generic.IList{System.Double},Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            Computes the Anderson-Darling test statistic, which is used to decide if a sample of data comes from a population with a specified distribution.
            </summary>
            <remarks>
            <b> References: </b>
            <see href="https://www.itl.nist.gov/div898/handbook/eda/section3/eda35e.htm"/>
            </remarks>
            <param name="observedValues">The list of observed values to measure against. Must be sorted in ascending order.</param>
            <param name="model">The univariate continuous distribution.</param>
            <returns>The Anderson-Darling test statistic.</returns>
        </member>
        <member name="T:Numerics.Data.Statistics.Histogram">
            <summary>
            Create a histogram from a sample of data, which is a visual representation of the distribution of the data.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item>
            <see href = "https://en.wikipedia.org/wiki/Histogram" />
            </item>
            <item>
            This class is modeled after the histogram class in the Math.NET Numerics library: <see href="http://numerics.mathdotnet.com"/> 
            ></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Numerics.Data.Statistics.Histogram.Bin">
            <summary>
            A histogram bin.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.Bin.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initialize a new instance of the histogram bin class.
            </summary>
            <param name="lowerBound">The lower bound of the bin.</param>
            <param name="upperBound">The upper bound of the bin.</param>
            <param name="frequency">The frequency within the bin.</param>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Bin.LowerBound">
            <summary>
            Get and set the lower bound of the bin.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Bin.UpperBound">
            <summary>
            Get and set the upper bound of the bin.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Bin.Midpoint">
            <summary>
            Gets the midpoint of the bin.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Bin.Frequency">
            <summary>
            Get and set the frequency of the bin.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.Bin.CompareTo(Numerics.Data.Statistics.Histogram.Bin)">
            <summary>
            Comparison of two bins. The bins cannot be overlapping.
            </summary>
            <param name="other">The bin to compare with</param>
            <returns>
            0 if the upper bound and lower bound are bit-for-bit equal.
            +1 if this bin is lower than the compared bin.
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.Bin.Clone">
            <summary>
            Creates a copy of the histogram bin.
            </summary>
            <returns>A cloned histogram bin.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.Bin.Equals(System.Object)">
            <summary>
            Checks whether two histogram bins are equal.
            </summary>
            <returns>True if the bins are equal and false otherwise.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs a histogram based on the data provided. The Rice Rule is used to set the bin sizes.
            </summary>
            <param name="data">The data to construct a histogram with.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.#ctor(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Constructs a histogram with a specific number of bins and the data provided. The histogram limits are derived from the data.
            </summary>
            <param name="data">The data to construct a histogram with.</param>
            <param name="numberOfBins">The number of bins.</param>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.LowerBound">
            <summary>
            Get the starting bin value.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.UpperBound">
            <summary>
            Get the ending bin value.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.NumberOfBins">
            <summary>
            Returns the number of bins in the histogram.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.BinWidth">
            <summary>
            Returns the bin width.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.DataCount">
            <summary>
            Returns the length of the data sample.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Get the bin at a specific index.
            </summary>
            <param name="index">The index of the bin to be returned.</param>
            <returns>A copy of the bin.</returns>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Mean">
            <summary>
            Gets the mean of the histogram.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Median">
            <summary>
            Gets the median of the histogram.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.Mode">
            <summary>
            Gets the mode of the histogram.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.Histogram.StandardDeviation">
            <summary>
            Gets the standard deviation of the histogram.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.AddBin(Numerics.Data.Statistics.Histogram.Bin)">
            <summary>
            Add a bin to the bin list.
            </summary>
            <param name="bin">Histogram bin to add.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.AddData(System.Double)">
            <summary>
            Add one data value to the histogram. If the data value falls outside the range of the histogram,
            the start or end bin will automatically adapt.
            </summary>
            <param name="data">The data value to add.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.AddData(System.Collections.Generic.IList{System.Double})">
            <summary>
            Add a sequence of data values to the histogram. If the data value falls outside the range of the histogram,
            the start or end bin will automatically adapt.
            </summary>
            <param name="data">A sequence of data values to add.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.SortBins">
            <summary>
            Sort the histogram bins if needed.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Histogram.GetBinIndexOf(System.Double)">
            <summary>
            Returns the index in the histogram of the bin that contains the value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>The index of the bin containing the value.</returns>
        </member>
        <member name="T:Numerics.Data.Statistics.MultipleGrubbsBeckTest">
            <summary>
            Contains functions for computing the Multiple Grubbs Beck low outlier test.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item>
            Cohn, T. A., England, J. F., Berenbrock, C. E., Mason, R. R., Stedinger, J. R., and Lamontagne, J. R. (2013). 
            A generalized Grubbs-Beck test statistic for detecting multiple potentially influential low outliers in flood series. 
            Water Resources Research, 49(8), 5047-5058.
            </item>
            <item>
            This code converted from the FORTRAN source code for PeakfqSA, which can be downloaded at:
            <see href = "https://sites.google.com/a/alumni.colostate.edu/jengland/resources" />
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.MultipleGrubbsBeckTest.Function(System.Double[])">
            <summary>
            Generalized Grubbs-Beck Test.
            <remarks>
            <para>
            This test identifies the number of low outliers using the generalized Grubbs-Beck test.
            </para>
            </remarks>
            </summary>
            <param name="X">A vector of flood in real space.</param>
            <returns>The number of low outliers.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.MultipleGrubbsBeckTest.GGBCRITP(System.Int32,System.Int32,System.Double)">
            <summary>
            Auxiliary routine used to compute p-values (GGCRITP) for a Generalized Grubbs-Beck Test.
            </summary>
            <returns>P-Values.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.MultipleGrubbsBeckTest.FGGB(System.Double)">
            <summary>
            Auxiliary routine used in GGBCRITP
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.MultipleGrubbsBeckTest.GrubbsBeckTest(System.Collections.Generic.IList{System.Double},System.Double@,System.Double@)">
            <summary>
            The original Grubbs and Beck test for detection of outliers. Test is performed at the 10% significance level based on a normal distribution.
            </summary>
            <param name="sample">The data sample.</param>
            <param name="XHi">Output. Values greater are considered high outliers.</param>
            <param name="XLo">Output. Values lower are considered low outliers.</param>
        </member>
        <member name="T:Numerics.Data.Statistics.RunningStatistics">
            <summary>
            Contains functions for computing running statistics of a sample of data.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            This class is copied from the Math.NET Numerics library, <see href="http://numerics.mathdotnet.com"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningStatistics.#ctor">
            <summary>
            Constructs an empty running statistics class.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningStatistics.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs running statistics based on a list of values.
            </summary>
            <param name="values">List of data values.</param>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Count">
            <summary>
            Gets the total number of samples.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Minimum">
            <summary>
            Returns the minimum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Maximum">
            <summary>
            Returns the maximum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Mean">
            <summary>
            Returns the sample mean, an estimate of the population mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Variance">
            <summary>
            Returns the sample variance.
            On a dataset of size N, it will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.PopulationVariance">
            <summary>
            Returns the population variance.
            On a dataset of size N, it will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.StandardDeviation">
            <summary>
            Returns the sample standard deviation.
            On a dataset of size N, it will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.PopulationStandardDeviation">
            <summary>
            Returns the population standard deviation.
            On a dataset of size N, it will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.CoefficientOfVariation">
            <summary>
            Returns the coefficient of variation of the sample.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Skewness">
            <summary>
            Returns the sample skewness.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than three entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.PopulationSkewness">
            <summary>
            Returns the population skewness.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.Kurtosis">
            <summary>
            Returns the sample kurtosis.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than four entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:Numerics.Data.Statistics.RunningStatistics.PopulationKurtosis">
            <summary>
            Returns the population kurtosis.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than three entries or if any entry is NaN.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningStatistics.Push(System.Double)">
            <summary>
            Updates the running statistics by adding another data value (in-place).
            </summary>
            <param name="value">Data value.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningStatistics.Push(System.Collections.Generic.IList{System.Double})">
            <summary>
            Updates the running statistics by adding a sequence of data values (in-place).
            </summary>
            <param name="values">List of data values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningStatistics.Combine(Numerics.Data.Statistics.RunningStatistics,Numerics.Data.Statistics.RunningStatistics)">
            <summary>
            Create a new running statistics over the combined samples of two existing running statistics.
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.RunningStatistics.op_Addition(Numerics.Data.Statistics.RunningStatistics,Numerics.Data.Statistics.RunningStatistics)">
            <summary>
            Create a new running statistics over the combined samples of two existing running statistics.
            </summary>
        </member>
        <member name="T:Numerics.Data.Statistics.HypothesisTests">
            <summary>
            A class for performing statistical hypothesis tests. 
            </summary>
            <remarks>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            <para>
            <b> Description: </b>
            This is a method of statistical inference used to decide whether the data sufficiently support a particular hypothesis, typically
            through the calculation of some test statistic. The null hypothesis (H0) is assumed to be true until proven otherwise through the tests. In this class
            the p value is calculated to determine whether or not to reject the null hypothesis. If the p value is less than the specified significance level,
            the null hypothesis is rejected in favor of the alternative hypothesis (Ha).
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Statistical_hypothesis_test"/>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.OneSampleTtest(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            The one sample t-Test compares the mean of the sample to a hypothesized population mean.
            One rejects H0 if the p-value of the statistic is less than the significance level.
            </summary>
            <param name="sample">The data sample.</param>
            <param name="populationMean">Optional. The hypothesized mean. Default = 0.</param>
            <returns>Returns the 2-sided p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.EqualVarianceTtest(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The t-test determines if there is a significant difference between the means of two samples drawn from populations with equal variances.
            One rejects H0 if the p-value of the statistic is less than the significance level.
            </summary>
            <param name="sample1">Data sample 1.</param>
            <param name="sample2">Data sample 2.</param>
            <returns>Returns the 2-sided p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.UnequalVarianceTtest(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The t-test determines if there is a significant difference between the means of two samples drawn from populations with unequal variances.
            One rejects H0 if the p-value of the statistic is less than the significance level.
            </summary>
            <param name="sample1">Data sample 1.</param>
            <param name="sample2">Data sample 2.</param>
            <returns>Returns the 2-sided p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.PairedTtest(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The paired t-test determines whether the mean difference between two sets of observations is zero.
            One rejects H0 if the p-value of the statistic is less than the significance level.
            </summary>
            <param name="sample1">Data sample 1.</param>
            <param name="sample2">Data sample 2.</param>
            <returns>Returns the 2-sided p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.Ftest(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The F-test for significantly different variances. One rejects H0 if the p-value of the statistic is less than the significance level.
            </summary>
            <param name="sample1">Data sample 1.</param>
            <param name="sample2">Data sample 2.</param>
            <returns>Returns the p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.FtestModels(System.Double,System.Double,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            The F-test comparing two models. The null, H0, states that the restricted and full models are equal. 
            One rejects the null if the p-value of the statistic is less than the significance level.
            </summary>
            <param name="sseRestricted">The sum of squared errors (SSE) of the restricted model.</param>
            <param name="sseFull">The sum of squared errors (SSE) of the full model.</param>
            <param name="dfRestricted">The degrees of freedom of the restricted model.</param>
            <param name="dfFull">The degrees of freedom of the full model. </param>
            <param name="fStat">The F-test statistic.</param>
            <param name="pValue">The p-value of the test statistic.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.JarqueBeraTest(System.Collections.Generic.IList{System.Double})">
            <summary>
            The Jarque-Bera test for normality. One rejects H0 of normality if the p-value of the JB statistic is less than the significance level.
            </summary>
            <param name="sample">The data sample.</param>
            <returns>Returns the p-value of the test statistic.</returns>
            <remarks>The Jarque-Bera normality test statistics is a chi-squared random variable with 2 degrees of freedom.</remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.WaldWolfowitzTest(System.Collections.Generic.IList{System.Double})">
            <summary>
            The Wald and Wolfowitz test for independence and stationarity (trend). 
            </summary>
            <param name="sample">The data sample.</param>
            <returns>Returns the 2-sided p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.LjungBoxTest(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The Ljung-Box test whether the autocorrelations of the data are different from zero.
            </summary>
            <param name="sample">The data sample.</param>
            <param name="lagMax">The max lag to evaluate.</param>
            <returns>Returns the p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.MannWhitneyTest(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The Mann-Whitney test for homogeneity and stationarity (jump). 
            </summary>
            <param name="sample1">Data sample 1. Must be less than or equal in length to sample 2.</param>
            <param name="sample2">Data sample 2.</param>
            <returns>Returns the p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.MannKendallTest(System.Collections.Generic.IList{System.Double})">
            <summary>
            The Mann-Kendall test for homogeneity and stationarity (trend).
            </summary>
            <param name="sample">Data sample.</param>
            <returns>Returns the p-value of the test statistic.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.HypothesisTests.LinearTrendTest(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The linear trend test for stationarity (trend). 
            </summary>
            <param name="indices">Time series indices.</param>
            <param name="sample">Time series sample data.</param>
            <returns>Returns the p-value of the test statistic.</returns>
        </member>
        <member name="T:Numerics.Data.Statistics.Autocorrelation">
             <summary>
             Computes the autocovariance, autocorrelation, or partial autocorrelation function.
             </summary>
             <remarks>
                  <b> Authors: </b>
                 Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
             <para>
            <b> Description: </b>
             Autocovariance is a function that gives the covariance (measure of the joint variability of two random variables)
             of the process with itself at pairs of time points.
             Autocorrelation is the similarity of between observations of a random variable as a function of the time lag between them.
             The partial autocorrelation function gives the partial correlation of a stationary time series with it own lagged values of the 
             time series at all short lags. This is in contrast with the autocorrelation function that does not control for other lags.
             </para>
             <b> References: </b>
             <list type="bullet">
             <item><description> 
             <see href="https://en.wikipedia.org/wiki/Autocovariance"/>
             </description></item>
             <item><description>
             <see href="https://en.wikipedia.org/wiki/Autocorrelation"/>
             </description></item>
             <item><description>
             
             </description></item>
             </list>
             </remarks>
        </member>
        <member name="T:Numerics.Data.Statistics.Autocorrelation.Type">
            <summary>
            Enumeration of the type of autocorrelation.
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Autocorrelation.Type.Correlation">
            <summary>
            Autocorrelation
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Autocorrelation.Type.Covariance">
            <summary>
            Autocovariance
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.Autocorrelation.Type.Partial">
            <summary>
            Partial autocorrelation
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Function(System.Collections.Generic.IList{System.Double},System.Int32,Numerics.Data.Statistics.Autocorrelation.Type)">
            <summary>
            Computes the autocovariance, autocorrelation, or partial autocorrelation function.
            </summary>
            <param name="data">The list of data to evaluate.</param>
            <param name="lagMax">The maximum lag at which to estimate the function. Default is 10*log10(N/m) where N is the number of observations.
            Will be automatically limited to one less than the number of observations in the series.</param>
            <param name="type">The type of function to be computed. Default is correlation. </param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the function evaluated at the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Function(Numerics.Data.TimeSeries,System.Int32,Numerics.Data.Statistics.Autocorrelation.Type)">
            <summary>
            Computes the autocovariance, autocorrelation, or partial autocorrelation function.
            </summary>
            <param name="timeSeries">The time-series to evaluate.</param>
            <param name="lagMax">The maximum lag at which to estimate the function. Default is 10*log10(N/m) where N is the number of observations.
            Will be automatically limited to one less than the number of observations in the series.</param>
            <param name="type">The type of function to be computed. Default is correlation.</param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the function evaluated at the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Covariance(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Compute the autocovariance function.
            </summary>
            <param name="data">The list of data to assess.</param>
            <param name="lagMax">The maximum lag.</param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the covariance of the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Covariance(Numerics.Data.TimeSeries,System.Int32)">
            <summary>
            Compute the autocovariance function.
            </summary>
            <param name="timeSeries">The time-series to assess.</param>
            <param name="lagMax">The maximum lag.</param><returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the covariance of the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Correlation(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Compute the autocorrelation function.
            </summary>
            <param name="data">The list of data to assess.</param>
            <param name="lagMax">The maximum lag.</param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the autocorrelation of the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Correlation(Numerics.Data.TimeSeries,System.Int32)">
            <summary>
            Compute the autocorrelation function.
            </summary>
            <param name="timeSeries">The time-series to assess.</param>
            <param name="lagMax">The maximum lag.</param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the autocorrelation of the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Partial(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Compute the partial autocorrelation function.
            </summary>
            <param name="data">The list of data to assess.</param>
            <param name="lagMax">The maximum lag.</param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the partial autocorrelation of the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.Partial(Numerics.Data.TimeSeries,System.Int32)">
            <summary>
            Compute the partial autocorrelation function.
            </summary>
            <param name="timeSeries">The time-series to assess.</param>
            <param name="lagMax">The maximum lag.</param>
            <returns>
            A n x 2 matrix, with being the number of given input data points. The first column contains the lag and the 
            second column contains the partial autocorrelation of the given values.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Autocorrelation.CorrelationConfidenceInterval(System.Int32,System.Double)">
            <summary>
            Get confidence interval for ACF and PACF rho values.
            </summary>
            <param name="sampleSize">The sample size.</param>
            <param name="interval">The confidence interval width. Default = 0.95, or 95%.</param>
            <returns>
            An array that contains the lower and upper bound of the confidence interval.
            </returns>
        </member>
        <member name="T:Numerics.Data.Statistics.BoxCox">
            <summary>
            Class for performing Box-Cox transformation.
            </summary>
            <remarks>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            <para>
            <b> Description: </b>
            This method transforms non-normal dependent variables into a normal shape.
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.BoxCox.FitLambda(System.Collections.Generic.IList{System.Double},System.Double@,System.Double@)">
            <summary>
            Fit the transformation parameters using maximum likelihood estimation.
            </summary>
            <param name="values">The list of values to transform.</param>
            <param name="lambda1">Output. The transformation exponent. Range -5 to +5.</param>
            <param name="lambda2">Output. The transformation shift for negative values.</param>
            <remarks>
            https://www.rdocumentation.org/packages/EnvStats/versions/2.4.0/topics/boxcox
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.BoxCox.LogLikelihood(System.Collections.Generic.IList{System.Double},System.Double,System.Double)">
            <summary>
            The log-likelihood function. The transformed observations are assumed to come from a
            normal distribution. The change of variable formula is used to write the log-likelihood function.
            </summary>
            <param name="values">The list of values to transform.</param>
            <param name="lambda1">The transformation exponent. Range -5 to +5.</param>
            <param name="lambda2">The transformation shift for negative values.</param>
            <returns>
            The value of log-likelihood function evaluated at the given values and lambdas.
            </returns>
        </member>
        <member name="M:Numerics.Data.Statistics.BoxCox.Transform(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Box-Cox transformation of the value.
            </summary>
            <param name="value">The value to transform.</param>
            <param name="lambda1">The transformation exponent. Range -5 to +5.</param>
            <param name="lambda2">The transformation shift for negative values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.BoxCox.Transform(System.Collections.Generic.IList{System.Double},System.Double,System.Double)">
            <summary>
            Returns the Box-Cox transformation of each value in the list.
            </summary>
            <param name="values">The list of values to transform.</param>
            <param name="lambda1">The transformation exponent. Range -5 to +5.</param>
            <param name="lambda2">The transformation shift for negative values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.BoxCox.ReverseTransform(System.Double,System.Double,System.Double)">
            <summary>
            Returns the reverse of the Box-Cox transformed value.
            </summary>
            <param name="value">The value to reverse transform.</param>
            <param name="lambda1">The transformation exponent. Range -5 to +5.</param>
            <param name="lambda2">The transformation shift for negative values.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.BoxCox.ReverseTransform(System.Collections.Generic.IList{System.Double},System.Double,System.Double)">
            <summary>
            Returns the reverse of each Box-Cox transformed value in the list.
            </summary>
            <param name="values">The list of values to reverse transform.</param>
            <param name="lambda1">The transformation exponent. Range -5 to +5.</param>
            <param name="lambda2">The transformation shift for negative values.</param>
        </member>
        <member name="T:Numerics.Data.Statistics.PlottingPositions">
            <summary>
            Contains plotting position formulas.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            The choice of quantiles from a theoretical distribution can depend upon context and purpose.
            Several different formulas have been used or proposed as affine symmetrical plotting positions.
            Such formulas have the form (k − a) / (n + 1 − 2a) for some value of a in the range from 0 to 1,
            which gives a range between k / (n + 1) and (k − 1) / (n - 1).
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Q%E2%80%93Q_plot"/>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Function(System.Int32,System.Double)">
            <summary>
            The general plotting position formula. This formula assumes the data is uncensored and complete.
            </summary>
            <param name="N">The sample size.</param>
            <param name="alpha">The alpha coefficient. Range (0,1).</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Function(System.Int32,Numerics.Data.Statistics.PlottingPositions.PlottingPostionType)">
            <summary>
            The general plotting position formula. This formula assumes the data is uncensored and complete.
            </summary>
            <param name="N">The sample size.</param>
            <param name="plottingPostionType">The plotting position formula type.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Weibull(System.Int32)">
            <summary>
            The Weibull plotting position formula (alpha = 0.0). Recommended for uniform distribution.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Median(System.Int32)">
            <summary>
            The Median plotting position formula (alpha = 0.3175). Provides median exceedance probabilities for all distributions.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Blom(System.Int32)">
            <summary>
            The Blom (1958) plotting position formula (alpha = 0.375). Recommended for Normal, Gamma, 2-parameter Log Normal,
            3-parameter Log Normal, and Log Pearson Type III distributions.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Cunnane(System.Int32)">
            <summary>
            The Cunnane (1978) plotting position formula (alpha = 0.40). Recommended for GEV and Log-Gumbel distributions.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Gringorten(System.Int32)">
            <summary>
            The Gringorten (1963) plotting position formula (alpha = 0.44). Recommended for Exponential, Gumbel and Weibull distributions.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.Hazen(System.Int32)">
            <summary>
            The Hazen plotting position formula (alpha = 0.50). Recommended when the parameters of the parent distribution
            are unknown.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.PlottingPositions.KaplanMeier(System.Int32)">
            <summary>
            The Kaplan-Meier plotting position formula for uncensored data (k/n).
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="T:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType">
            <summary>
            Enumeration of plotting position types.
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.Weibull">
            <summary>
            The Weibull plotting position formula (alpha = 0.0).
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.Median">
            <summary>
            The Median plotting position formula (alpha = 0.3175).
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.Blom">
            <summary>
            The Blom (1958) plotting position formula (alpha = 0.375).
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.Cunnane">
            <summary>
            The Cunnane (1978) plotting position formula (alpha = 0.40).
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.Gringorten">
            <summary>
            The Gringorten (1963) plotting position formula (alpha = 0.44).
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.Hazen">
            <summary>
            The Hazen plotting position formula (alpha = 0.50).
            </summary>
        </member>
        <member name="F:Numerics.Data.Statistics.PlottingPositions.PlottingPostionType.KaplanMeier">
            <summary>
            The Kaplan-Meier plotting position formula for uncensored data (k/n).
            </summary>
        </member>
        <member name="T:Numerics.Data.Statistics.Correlation">
            <summary>
            Contains methods for determining the correlation of two data sets.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This class contains a shared functions for Pearson and Spearman Correlation Coefficients. The Pearson correlation coefficient measures linear correlation
            between two sets of data. The Spearman correlation coefficient is a nonparametric measure of rank correlation (i.e. measures the strength and direction of
            association between two ranked variables).
            </para>
            <b> References: </b>
            <list type="bullet">
            <item>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </item>
            <item>
            <see href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient"/>
            </item>
            <item>
            <see href="https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient"/>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.Correlation.Pearson(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the Pearson correlation coefficient.
            </summary>
            <param name="sample1">Sample data 1.</param>
            <param name="sample2">Sample data 2.</param>
            <returns>The Pearson correlation coefficient.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Correlation.Spearman(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the Spearman ranked correlation coefficient.
            </summary>
            <param name="sample1">Sample data 1.</param>
            <param name="sample2">Sample data 2.</param>
            <returns>The Spearman ranked correlation coefficient.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Correlation.KendallsTau(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes Kendall's Tau ranked correlation coefficient.
            </summary>
            <param name="sample1">Sample data 1.</param>
            <param name="sample2">Sample data 2.</param>
            <returns>The Kendall's Tau ranked correlation coefficient.</returns>
        </member>
        <member name="T:Numerics.Data.Statistics.Statistics">
            <summary>
            Contains functions for computing descriptive statistics of a sample of data.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item>
            <see href = "https://en.wikipedia.org/wiki/Summary_statistics" />
            </item>
            <item>
            <see href = "https://en.wikipedia.org/wiki/Descriptive_statistics" />
            </item>
            <item>
            This class contains some functions from the Math.NET Numerics library, <see href="http://numerics.mathdotnet.com"/>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Minimum(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the smallest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Maximum(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the largest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Sum(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the sum of the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Mean(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the arithmetic sample mean from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.ParallelMean(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the arithmetic sample mean from the unsorted data array by first enabling parallelization of the array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.GeometricMean(System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluates the geometric mean of the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.HarmonicMean(System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluates the harmonic mean of the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Variance(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the unbiased population variance from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluates the population variance from the full population provided as unsorted array.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluates the population standard deviation from the full population provided as unsorted array.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.MeanVariance(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population variance from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN and NaN for variance if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.MeanStandardDeviation(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population standard deviation from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN and NaN for standard deviation if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.CoefficientOfVariation(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the coefficient of variation from the provided sample of data.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Skewness(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the skewness coefficient from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.JackKnifeStandardError(System.Collections.Generic.IList{System.Double},System.Func{System.Collections.Generic.IList{System.Double},System.Double})">
            <summary>
            Computes the standard error of the statistic, using the jackknife method.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <param name="statistic">The statistic for estimating standard error.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.JackKnifeSample(System.Collections.Generic.IList{System.Double},System.Func{System.Collections.Generic.IList{System.Double},System.Double})">
            <summary>
            Returns a jackknifed sample.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <param name="statistic">The statistic for estimating a sample.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Kurtosis(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the kurtosis from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Covariance(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the unbiased population covariance from the provided two sample arrays.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="sampleData1">First sample of data, no sorting is assumed.</param>
            <param name="sampleData2">Second sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.PopulationCovariance(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluates the population covariance from the full population provided as two arrays.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="sampleData1">First sample of data, no sorting is assumed.</param>
            <param name="sampleData2">Second sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.ProductMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the first four product moments of a sample {Mean, Standard Deviation, Skew, and Kurtosis}, or returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.LinearMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the linear moments of a sample {L-Mean (λ1), L-Scale (λ2), L-Skewness (τ3), and L-Kurtosis (τ4)}, or returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Percentile(System.Collections.Generic.IList{System.Double},System.Double,System.Boolean)">
            <summary>
            Returns the k-th percentile of values in a sample.
            </summary>
            <param name="sampleData">Sample of data.</param>
            <param name="k">The k-th percentile to find.</param>
            <param name="sampleDataIsSorted">Boolean value indicating if the sample of data is sorted or not. Assumed false, not sorted, by default.</param>
            <returns>The k-th percentile.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.FiveNumberSummary(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the 5-number summary {min, 25th-percentile, 50th-percentile, 75th-percentile, max} from a sample of data.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <returns>5-number summary statistics.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.SevenNumberSummary(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the 7-number summary {min, 5th percentile, 25th-percentile, 50th-percentile, 75th-percentile, 95th-percentile, max} from a sample of data.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <returns>7-number summary statistics.</returns>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.RanksInplace(System.Double[])">
            <summary>
            Returns the rank of each entry of the unsorted data array.
            </summary>
            <param name="data">The array of sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.RanksInPlace(System.Double[],System.Double[]@)">
            <summary>
            Returns the rank of each entry of the unsorted data array.
            </summary>
            <param name="data">The array of sample of data, no sorting is assumed.</param>
            <param name="ties">Output. The number of ties in the data.</param>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.RanksTies(System.Double[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            Helper function for RanksInplace(double[], out double[])
            </summary>
        </member>
        <member name="M:Numerics.Data.Statistics.Statistics.Entropy(System.Double[],System.Func{System.Double,System.Double})">
            <summary>
            Computes the entropy function for a set of numerical values in a given Probability Density Function (pdf).
            </summary>
            <param name="values">The array of values.</param>
            <param name="pdf">A probability distribution function.</param>
        </member>
        <member name="T:Numerics.Data.BlockFunctionType">
            <summary>
            Enumeration of time block function types.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.BlockFunctionType.Minimum">
            <summary>
            Compute the minimum over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.BlockFunctionType.Maximum">
            <summary>
            Compute the maximum over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.BlockFunctionType.Average">
            <summary>
            Compute the average over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.BlockFunctionType.Sum">
            <summary>
            Compute the sum over each time block.
            </summary>
        </member>
        <member name="T:Numerics.Data.MathFunctionType">
            <summary>
            Enumeration of math function types.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Add">
            <summary>
            Compute the sum over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Subtract">
            <summary>
            Compute the difference over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Multiply">
            <summary>
            Compute the product over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Divide">
            <summary>
            Compute the quotient over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Logarithm">
            <summary>
            Compute the logarithmic transform over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Exponentiate">
            <summary>
            Raise each time block to some power.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Inverse">
            <summary>
            Compute the inverse over each time block.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Replace">
            <summary>
            Replace missing values.
            </summary>
        </member>
        <member name="F:Numerics.Data.MathFunctionType.Interpolate">
            <summary>
            Interpolate missing values.
            </summary>
        </member>
        <member name="T:Numerics.Data.Series`2">
            <summary>
            An abstract series class, which is a collection of series ordinates.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.Series`2._seriesOrdinates">
            <summary>
            Internal list.
            </summary>
        </member>
        <member name="E:Numerics.Data.Series`2.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.SuppressCollectionChanged">
            <summary>
            Suppress collection changed events from firing.
            </summary>
        </member>
        <member name="P:Numerics.Data.Series`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.Series`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Add(Numerics.Data.SeriesOrdinate{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Insert(System.Int32,Numerics.Data.SeriesOrdinate{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Remove(Numerics.Data.SeriesOrdinate{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Clear">
            <summary>
            Remove all elements from the collection.
            </summary>
        </member>
        <member name="M:Numerics.Data.Series`2.Contains(Numerics.Data.SeriesOrdinate{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.CopyTo(Numerics.Data.SeriesOrdinate{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.IndexOf(Numerics.Data.SeriesOrdinate{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Data.Series`2.RaiseCollectionChangedReset">
            <summary>
            Raise the collection changed reset event.
            </summary>
        </member>
        <member name="M:Numerics.Data.Series`2.ValuesToList">
            <summary>
            Returns the list of series values as a list.
            </summary>
        </member>
        <member name="M:Numerics.Data.Series`2.ValuesToArray">
            <summary>
            Returns the list of series values as an array.
            </summary>
        </member>
        <member name="M:Numerics.Data.Series`2.IndexesToList">
            <summary>
            Returns the list of series indexes as a list.
            </summary>
        </member>
        <member name="M:Numerics.Data.Series`2.IndexesToArray">
            <summary>
            Returns the list of series indexes as an array.
            </summary>
        </member>
        <member name="T:Numerics.Data.SeriesOrdinate`2">
            <summary>
            A series ordinate.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.SeriesOrdinate`2.#ctor">
            <summary>
            Constructs a new series ordinate.
            </summary>
        </member>
        <member name="M:Numerics.Data.SeriesOrdinate`2.#ctor(`0,`1)">
            <summary>
            Constructs a new series ordinate. 
            </summary>
            <param name="index">The ordinate index.</param>
            <param name="value">The ordinate value.</param>
        </member>
        <member name="F:Numerics.Data.SeriesOrdinate`2._index">
            <summary>
            Protected index property.
            </summary>
        </member>
        <member name="F:Numerics.Data.SeriesOrdinate`2._value">
            <summary>
            Protected value property.
            </summary>
        </member>
        <member name="E:Numerics.Data.SeriesOrdinate`2.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.SeriesOrdinate`2.Index">
            <summary>
            The index of the series ordinate.
            </summary>
        </member>
        <member name="P:Numerics.Data.SeriesOrdinate`2.Value">
            <summary>
            The value of the time-series ordinate.
            </summary>
        </member>
        <member name="M:Numerics.Data.SeriesOrdinate`2.op_Equality(Numerics.Data.SeriesOrdinate{`0,`1},Numerics.Data.SeriesOrdinate{`0,`1})">
            <summary>
            Equality operator overload. 
            </summary>
            <param name="left">The first SeriesOrdinate object to compare.</param>
            <param name="right">The second SeriesOrdinate object to compare/</param>
            <returns>True of the two SeriesOrdinate objects are equal and false otherwise.</returns>
        </member>
        <member name="M:Numerics.Data.SeriesOrdinate`2.op_Inequality(Numerics.Data.SeriesOrdinate{`0,`1},Numerics.Data.SeriesOrdinate{`0,`1})">
            <summary>
            Inequality operator overload. 
            </summary>
            <param name="left">The first SeriesOrdinate object to compare.</param>
            <param name="right">The second SeriesOrdinate object to compare/</param>
            <returns>True of the two SeriesOrdinate objects are NOT equal and false otherwise.</returns>
        </member>
        <member name="M:Numerics.Data.SeriesOrdinate`2.RaisePropertyChanged(System.String)">
            <summary>
            Raise property changed event.
            </summary>
            <param name="propertyName">Name of property that changed.</param>
        </member>
        <member name="M:Numerics.Data.SeriesOrdinate`2.Clone">
            <summary>
            Returns a copy of the series ordinate.
            </summary>
        </member>
        <member name="T:Numerics.Data.SmoothingFunctionType">
            <summary>
            Enumeration of time series smoothing function options.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.SmoothingFunctionType.Difference">
            <summary>
            Perform successive differences of the data.
            </summary>
        </member>
        <member name="F:Numerics.Data.SmoothingFunctionType.MovingAverage">
            <summary>
            Perform a forward moving average of the data. 
            </summary>
        </member>
        <member name="F:Numerics.Data.SmoothingFunctionType.MovingSum">
            <summary>
            Performs a forward moving sum of the data.
            </summary>
        </member>
        <member name="F:Numerics.Data.SmoothingFunctionType.None">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="T:Numerics.Data.TimeBlockWindow">
            <summary>
            Enumeration of time block window options.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.TimeBlockWindow.CalendarYear">
            <summary>
            A full calendar year of 365 days from January 1st to December 31st.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeBlockWindow.WaterYear">
            <summary>
            A full year of 12 months from October 1st to September 30th.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeBlockWindow.CustomYear">
            <summary>
            A custom, user specified year.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeBlockWindow.Quarter">
            <summary>
            Quarter of a year, a 3 month period.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeBlockWindow.Month">
            <summary>
            A month of time.
            </summary>
        </member>
        <member name="T:Numerics.Data.TimeSeriesDownload">
            <summary>
            Download time series data from the Internet.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="T:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType">
            <summary>
            Enumeration of USGS time series options.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType.DailyDischarge">
            <summary>
            Daily discharge.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType.DailyStage">
            <summary>
            Daily stage.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType.InstantaneousDischarge">
            <summary>
            Instantaneous discharge, typically record at a 15-minute interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType.InstantaneousStage">
            <summary>
            Instantaneous stage, typically record at a 15-minute interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType.PeakDischarge">
            <summary>
            Annual max peak discharge.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType.PeakStage">
            <summary>
            Annual max peak stage.
            </summary>
        </member>
        <member name="T:Numerics.Data.TimeSeriesDownload.GHCNTimeSeriesType">
            <summary>
            Enumeration of GHCN time series options.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.GHCNTimeSeriesType.DailyPrecipitation">
            <summary>
            Daily precipitation.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.GHCNTimeSeriesType.DailySnow">
            <summary>
            Daily snow.
            </summary>
        </member>
        <member name="T:Numerics.Data.TimeSeriesDownload.DepthUnit">
            <summary>
            Enumeration of GHCN depth unit options.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.DepthUnit.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.DepthUnit.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeSeriesDownload.DepthUnit.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeriesDownload.FromGHCN(System.String,Numerics.Data.TimeSeriesDownload.GHCNTimeSeriesType,Numerics.Data.TimeSeriesDownload.DepthUnit)">
            <summary>
            Download data from the Global Historical Climatology Network (GHCN). 
            </summary>
            <param name="siteNumber">The station identification code.</param>
            <param name="timeSeriesType">The time series type. Default = Daily precipitation.</param>
            <param name="unit">The depth unit. Default = inches.</param>
            <returns>A downloaded time series.</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeriesDownload.FromUSGS(System.String,Numerics.Data.TimeSeriesDownload.USGSTimeSeriesType)">
            <summary>
            Download time series data from USGS
            </summary>
            <param name="siteNumber">USGS site number.</param>
            <param name="timeSeriesType">The time series type.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeriesDownload.IsConnectedToInternet">
            <summary>
            Checks if there is an Internet connection.
            </summary>
        </member>
        <member name="T:Numerics.Data.OrderedPairedData">
            <summary>
            Class designed to store x-y data that is ordered for both the x and y values.
            </summary>
            <remarks>
                <b> Authors:</b>
                Woodrow Fields, USACE Risk Management Center, woodrow.l.fields@usace.army.mil
            <para>
            <b> Description: </b>
            The most common use case for this class is to store curve data such as a cumulative distribution function.
            One of the more powerful functions associated with this class is the Transform() function which allows to transform
            the OrderedPairedData class with another to create a new class. Common use cases of the Transform() function include
            transforming a flood frequency function into a stage frequency function using a flow-stage rating curve.
            </para>
            </remarks> 
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.XSearchStart">
            <summary>
            Keeps track of the starting search location for x-values. 
            </summary>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.YSearchStart">
            <summary>
            Keeps track of the starting search location for y-values. 
            </summary>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.UseSmartSearch">
            <summary>
            Determines whether to use a smart searching algorithm or just sequential search.
            </summary>
        </member>
        <member name="F:Numerics.Data.OrderedPairedData.XdeltaStart">
            <summary>
            Keeps track of the difference is start locations. 
            </summary>
        </member>
        <member name="F:Numerics.Data.OrderedPairedData.YdeltaStart">
            <summary>
            Keeps track of the difference is start locations. 
            </summary>
        </member>
        <member name="F:Numerics.Data.OrderedPairedData.Xcorrelated">
            <summary>
            Determines which search method to use. If values are correlated, use the Hunt method. 
            </summary>
        </member>
        <member name="F:Numerics.Data.OrderedPairedData.Ycorrelated">
            <summary>
            Determines which search method to use. If values are correlated, use the Hunt method. 
            </summary>
        </member>
        <member name="E:Numerics.Data.OrderedPairedData.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.IsValid">
            <summary>
            Represents if the paired dataset has valid ordinates and order.
            </summary>
            <returns>boolean representing data validity.</returns>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.Count">
            <summary>
            Number of ordinates in the dataset.
            </summary>
            <returns>Integer representing the number of ordinates.</returns>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.StrictX">
            <summary>
            Determines whether the sort order is strict on the X variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.StrictY">
            <summary>
            Determines whether the sort order is strict on the Y variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.OrderX">
            <summary>
            Gets or sets the sort order of the X variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.OrderY">
            <summary>
            Gets or sets the sort order of the Y variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.System#Collections#Generic#ICollection{Numerics#Data#Ordinate}#IsReadOnly">
            <summary>
            ReadOnly is an implementation of ICollection and not implemented for this class.
            </summary>
            <returns>Boolean.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.#ctor(System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder,System.Int32)">
            <summary>
            Create empty instance of the ordered paired data class.
            </summary>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
            <param name="capacity"> Optional, capacity of the collection.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder)">
            <summary>
            Create an instance of the ordered paired data class with defined ordinate data.
            </summary>
            <param name="xData">Ordinate x values.</param>
            <param name="yData">Ordinate y values.</param>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.#ctor(System.Collections.Generic.IList{Numerics.Data.Ordinate},System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder)">
            <summary>
            Create an instance of the ordered paired data class with defined ordinate data.
            </summary>
            <param name="data">Ordinate values.</param>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create a new instance of the ordered paired data class from an XElement XML object.
            </summary>
            <param name="el"> The XElement the OrderedPairedData object is being created from </param>
        </member>
        <member name="P:Numerics.Data.OrderedPairedData.Item(System.Int32)">
            <summary>
            Get or set the ordinate at a specified index.
            </summary>
            <param name="index">Index of ordinate in the collection to manipulate.</param>
            <returns>Ordinate at the specified index.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.IndexOf(Numerics.Data.Ordinate)">
            <summary>
            Determines the index of a specific ordinate in the collection.
            </summary>
            <param name="item">The ordinate to locate in the collection.</param>
            <returns>The index of ordinate item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.IndexOf(System.Double,System.Double)">
            <summary>
            Determines the first index of an ordinate where the x and y values are equal in the collection.
            </summary>
            <param name="xValue">The X value to locate in the collection.</param>
            <param name="yValue">The Y value to locate in the collection.</param>
            <returns>The index of the first ordinate item with equivalent x and y values if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Validate">
            <summary>
            Method to determine validity of all ordinates in the collection.
            </summary>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.OrdinateValid(System.Int32,System.Boolean)">
            <summary>
            Determines the validity of a specific ordinate at a specified index.
            </summary>
            <param name="index">The index of ordinate item.</param>
            <param name="lookBackward">Optional parameter to also look backward when determining validity of the ordinate. This parameter is included as an optimization for situations where looking at the previous ordinate is not required.</param>
            <returns>A boolean that indicates if the ordinate at the specified index is valid or not within the dataset.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.GetErrors">
            <summary>
            Get a list of errors in the OrderedPairedData object.
            </summary>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Remove(Numerics.Data.Ordinate)">
            <summary>
            Removes the first occurrence of a target ordinate from the collection.
            </summary>
            <param name="item">The ordinate to remove from the collection.</param>
            <returns>True if item was successfully removed from the collection; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.RemoveAt(System.Int32)">
            <summary>
            Removes the ordinate from the collection at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of ordinates from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Add(Numerics.Data.Ordinate)">
            <summary>
            Adds an ordinate to the collection.
            </summary>
            <param name="item">The ordinate to add to the collection.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Insert(System.Int32,Numerics.Data.Ordinate)">
            <summary>
            Inserts an item to the collection of ordinates.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The ordinate to insert into the collection.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Clear">
            <summary>
            Removes all ordinates form the collection and sets count to zero.
            </summary>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Contains(Numerics.Data.Ordinate)">
            <summary>
            Determines whether the collection contains a specific ordinate.
            </summary>
            <param name="item">The ordinate to locate in the collection.</param>
            <returns>True if ordinate is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.CopyTo(Numerics.Data.Ordinate[],System.Int32)">
            <summary>
            Copies the ordinates to an System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied
            from. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Clone">
            <summary>
            Clones the object to a new object.
            </summary>
            <returns>Clone of target OrderedPairedData collection.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.Invert">
            <summary>
            Create an inverted function.
            </summary>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.op_Equality(Numerics.Data.OrderedPairedData,Numerics.Data.OrderedPairedData)">
            <summary>
            Tests for numerical equality between two OrderedPairedData collection.
            </summary>
            <param name="left">OrderedPairedData object to the left of the equality operator.</param>
            <param name="right">OrderedPairedData object to the right of the equality operator.</param>
            <returns>True if two objects are numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.op_Inequality(Numerics.Data.OrderedPairedData,Numerics.Data.OrderedPairedData)">
            <summary>
            Tests for numerical inequality between two OrderedPairedData collection.
            </summary>
            <param name="left">OrderedPairedData object to the left of the inequality operator.</param>
            <param name="right">OrderedPairedData object to the right of the inequality operator.</param>
            <returns>True if two objects are not numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.TrapezoidalAreaUnderY">
            <summary>
            Calculates the area between the Y values and the zero axis using the trapezoidal approximation.
            </summary>
            <returns>The area under the curve.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.TrapezoidalAreaUnderX">
            <summary>
            Calculates the area between the X values and the zero axis using the trapezoidal approximation.
            </summary>
            <returns>The area under the curve.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.SaveToXElement">
            <summary>
            Converts the ordered paired data set to an XElement for saving to XML.
            </summary>
            <returns>An XElement representation of the data.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.BaseInterpolate(System.Double,System.Int32,System.Boolean,Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Given a value (x or y) returns the interpolated value (y or x).
            </summary>
            <param name="value"> The value to be interpolated. </param>
            <param name="index">The zero-based index of the lower bound of the interpolation interval.</param>
            <param name="givenX"> Optional boolean if the given value is an x value. Default is set to true.</param>
            <param name="xTransform">Optional. Transform for the x values. Default = None.</param>
            <param name="yTransform">Optional. Transform for the y values. Default = None.</param>
            <returns> The interpolated value.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.GetYFromX(System.Double,Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Interpolate y from x.
            </summary>
            <param name="x">The x value. </param>
            <param name="xTransform">Optional. Transform for the x values. Default = None.</param>
            <param name="yTransform">Optional. Transform for the y values. Default = None.</param>
            <returns> The interpolated value.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.GetXFromY(System.Double,Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Interpolate x from y.
            </summary>
            <param name="y">The y value. </param>
            <param name="xTransform">Optional. Transform for the x values. Default = None.</param>
            <param name="yTransform">Optional. Transform for the y values. Default = None.</param>
            <returns> The interpolated value.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.GetYFromX(System.Collections.Generic.IList{System.Double},Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Interpolate y-values from a list of x-values.
            </summary>
            <param name="xValues">The list of x-values.</param>
            <param name="xTransform">Optional. Transform for the x values. Default = None.</param>
            <param name="yTransform">Optional. Transform for the y values. Default = None.</param>
            <returns>An array of interpolated values.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.GetXFromY(System.Collections.Generic.IList{System.Double},Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Interpolate x-values from a list of y-values.
            </summary>
            <param name="yValues">The list of y-values.</param>
            <param name="xTransform">Optional. Transform for the x values. Default = None.</param>
            <param name="yTransform">Optional. Transform for the y values. Default = None.</param>
            <returns>An array of interpolated values.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.SearchX(System.Double)">
            <summary>
            Search for the lower bound of the interpolation interval. This method updates whether the values being searched on repeated calls are correlated, 
            and saves search value for future use on the next call.  
            </summary>
            <param name="x">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.SearchY(System.Double)">
            <summary>
            Search for the lower bound of the interpolation interval. This method updates whether the values being searched on repeated calls are correlated, 
            and saves search value for future use on the next call.  
            </summary>
            <param name="y">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.BinarySearchX(System.Double)">
            <summary>
            Searches ordinates in the OrderedPairedData collection
            for an ordinate based on X-value and returns the zero-based index of the element.
            </summary>
            <param name="value">The X-value to locate.</param>
            <returns>The zero-based index of the ordinate in the collection if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of the collection count.
            </returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.BinarySearchY(System.Double)">
            <summary>
            Searches ordinates in the OrderedPairedData collection
            for an ordinate based on Y-value and returns the zero-based index of the element.
            </summary>
            <param name="value">The Y-value to locate.</param>
            <returns>The zero-based index of the ordinate in the collection if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of the collection count.
            </returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.SequentialSearchX(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a sequential search method.
            </summary>
            <param name="x">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.SequentialSearchY(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a sequential search method.
            </summary>
            <param name="y">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.BisectionSearchX(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a bisection search method.
            </summary>
            <param name="x">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.BisectionSearchY(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a bisection search method.
            </summary>
            <param name="y">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.HuntSearchX(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a hunt search method.
            </summary>
            <param name="x">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.HuntSearchY(System.Double)">
            <summary>
            Searches for the lower bound of the location of a value using a hunt search method.
            </summary>
            <param name="y">The value to search for.</param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.DouglasPeuckerSimplify(System.Double)">
            <summary>
            The Douglas Peucker algorithm that decimates a curve composed of line segments to a similar curve with fewer points.
            </summary>
            <param name="tolerance"> Tolerance to remove points. Higher tolerance will remove more points.</param>
            <returns> An OrderedPairedData object that has been simplified according to the algorithm and tolerance level. </returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.DouglasPeuckerReduction(System.Double)">
            <summary>
            Helper function for DouglasPeuckerSimplfy().
            </summary>
            <remarks>
            <b> References: </b>
            <see href="http://www.codeproject.com/Articles/18936/A-Csharp-Implementation-of-Douglas-Peucker-Line-Ap"/>
            </remarks>
            <param name="tolerance">Tolerance to remove points. Higher tolerance will remove more points.</param>
            <returns>
            A list of indexes to keep for the simplified x and y values of a line.
            </returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.DouglasPeuckerReduction(System.Int32,System.Int32,System.Double,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Helper function for DouglasPeuckerSimplfy()
            </summary>
            <param name="firstPoint"> The first ordinate in the OrderedPairedData object .</param>
            <param name="lastPoint"> The last ordinate in the OrderedPairedData object. </param>
            <param name="tolerance"> Tolerance to remove points. Higher tolerance will remove more points. </param>
            <param name="pointIndexesToKeep"> The list of simplified points to keep </param>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.PerpendicularDistance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance of a point from a given line using 3 given points to form a triangle.
            </summary>
            <param name="aX"> The first point's x value.</param>
            <param name="aY"> The first point's y value. </param>
            <param name="bX"> The second point's x value. </param>
            <param name="bY"> The second point's y value. </param>
            <param name="cX"> The third point's x value. </param>
            <param name="cY"> The third point's y value. </param>
            <returns> The distance between the point and the curve. </returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.VisvaligamWhyattSimplify(System.Int32)">
            <summary>
            The Visvaligam-Whyatt algorithm that decimates a curve composed of line segments to a similar curve with fewer points.
            This method will be improved when we implement the priority queue in .NET 8.
            </summary>
            <remarks>
            <b> Reference: </b>
            <see href="http://bost.ocks.org/mike/simplify/"/>
            </remarks>
            <param name="numToKeep"> The number of points to keep for the simplified curve. </param>
            <returns> An OrderedPairedData object that has been simplified according to the algorithm and given number of points to keep.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.TriangleArea(Numerics.Data.Ordinate,Numerics.Data.Ordinate,Numerics.Data.Ordinate)">
            <summary>
            Calculates the triangle area between 3 points
            </summary>
            <param name="point1"> First point or vertex.</param>
            <param name="point2"> Second point or vertex.</param>
            <param name="point3"> Third point or vertex.</param>
            <returns> The area of the triangle formed by the three given points.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.LangSimplify(System.Double,System.Int32)">
            <summary>
            The Lang algorithm that decimates a curve composed of line segments to a similar curve with fewer points.
            </summary>
            <param name="tolerance"> Tolerance to remove points. Higher tolerance will remove more points. </param>
            <param name="lookAhead"> How many points to look ahead at. This defines the search region that the tolerance is used on.</param>
            <returns> An OrderedPairedData object that has been simplified according to the algorithm, given tolerance, 
            and number of points in the search region.</returns>
        </member>
        <member name="M:Numerics.Data.OrderedPairedData.RecursiveTolerance(System.Int32,System.Int32,System.Double)">
            <summary>
            Helper function for LangSimplfy() that helps select which points to keep for the simplified curve
            </summary>
            <param name="i"> The index in the list of ordinates the algorithm is currently on</param>
            <param name="lookAhead"> How many points to look ahead at. This defines the search region that the tolerance is used on.</param>
            <param name="tolerance"> Tolerance to remove points. Higher tolerance will remove more points. </param>
            <returns> An index to in the ordinate  list to look at next.</returns>
        </member>
        <member name="T:Numerics.Data.Ordinate">
            <summary>
            Class to store ordinate information where X and Y are stored as double precision numbers.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
            <list type="bullet">
            <item><description>
                Woodrow Fields, USACE Risk Management Center, woodrow.l.fields@usace.army.mil 
            </description></item>
            <item><description>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil 
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.Ordinate.#ctor(System.Double,System.Double)">
            <summary>
            X-Y ordinate.
            </summary>
            <param name="xValue">The x-value.</param>
            <param name="yValue">The y-value.</param>
        </member>
        <member name="M:Numerics.Data.Ordinate.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs new ordinate from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
        </member>
        <member name="F:Numerics.Data.Ordinate.X">
            <summary>
            X Value.
            </summary>
        </member>
        <member name="F:Numerics.Data.Ordinate.Y">
            <summary>
            Y Value.
            </summary>
        </member>
        <member name="F:Numerics.Data.Ordinate.IsValid">
            <summary>
            Boolean indicating if the ordinate has valid numeric values or not.
            </summary>
        </member>
        <member name="M:Numerics.Data.Ordinate.OrdinateValid(Numerics.Data.Ordinate,System.Boolean,System.Boolean,Numerics.Data.SortOrder,Numerics.Data.SortOrder,System.Boolean)">
            <summary>
            Test if the ordinate is valid given monotonic criteria with the next/previous ordinate in a series.
            </summary>
            <param name="ordinateToCompare">Ordinate to compare to the target ordinate.</param>
            <param name="strictX">Are the x-values strictly monotonic?</param>
            <param name="strictY">Are the y-values strictly monotonic?</param>
            <param name="xOrder">The order of the x-values.</param>
            <param name="yOrder">The order of the y-values.</param>
            <param name="compareOrdinateIsNext">Boolean identifying if the ordinate to compare is the next or previous ordinate in a series.</param>
            <returns> A boolean indicating if the ordinate is valid or not given the criteria.</returns>
        </member>
        <member name="M:Numerics.Data.Ordinate.OrdinateErrors(Numerics.Data.Ordinate,System.Boolean,System.Boolean,Numerics.Data.SortOrder,Numerics.Data.SortOrder,System.Boolean)">
            <summary>
            Get any error messages with the ordinate given monotonic criteria with the next/previous ordinate in a series.
            </summary>
            <param name="ordinateToCompare">Ordinate to compare to the target ordinate.</param>
            <param name="strictX">Are the x-values strictly monotonic?</param>
            <param name="strictY">Are the y-values strictly monotonic?</param>
            <param name="xOrder">The order of the x-values.</param>
            <param name="yOrder">The order of the y-values.</param>
            <param name="compareOrdinateIsNext">Boolean identifying if the ordinate to compare is the next or previous ordinate in a series.</param>
            <returns> A list of error messages given the criteria.</returns>
        </member>
        <member name="M:Numerics.Data.Ordinate.OrdinateErrors">
            <summary>
            Get errors in the ordinate data.
            </summary>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Numerics.Data.Ordinate.Transform(Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Transform the x and y coordinates and return a transformed ordinate.
            </summary>
            <param name="xTransform">Transform method for the x value.</param>
            <param name="yTransform">Transform method for the y value.</param>
        </member>
        <member name="M:Numerics.Data.Ordinate.op_Equality(Numerics.Data.Ordinate,Numerics.Data.Ordinate)">
            <summary>
            Checks if two ordinates are equal.
            </summary>
            <param name="left"> First ordinate to compare.</param>
            <param name="right"> Second ordinate to compare.</param>
            <returns>True if two objects are numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.Ordinate.op_Inequality(Numerics.Data.Ordinate,Numerics.Data.Ordinate)">
            <summary>
            Checks if two ordinates are not equal.
            </summary>
            <param name="left"> First ordinate to compare.</param>
            <param name="right"> Second ordinate to compare.</param>
            <returns>True if two objects are not numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.Ordinate.ToXElement">
            <summary>
            Returns the ordinate as XElement.
            </summary>
        </member>
        <member name="T:Numerics.Data.TimeInterval">
            <summary>
            Enumeration of available time-series time intervals.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Data.TimeInterval.OneMinute">
            <summary>
            A 1 minute time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.FiveMinute">
            <summary>
            A 5 minute time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.FifteenMinute">
            <summary>
            A 15 minute time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.ThirtyMinute">
            <summary>
            A 30 minute time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.OneHour">
            <summary>
            A 1 hour time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.SixHour">
            <summary>
            A 6 hour time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.TwelveHour">
            <summary>
            A 12 hour time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.OneDay">
            <summary>
            A 1 day time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.SevenDay">
            <summary>
            A 7 day, or 1 week time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.OneMonth">
            <summary>
            A 1 month time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.OneQuarter">
            <summary>
            A 1 quarter, or 3 month, time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.OneYear">
            <summary>
            A 1 year time interval.
            </summary>
        </member>
        <member name="F:Numerics.Data.TimeInterval.Irregular">
            <summary>
            An irregular time interval.
            </summary>
        </member>
        <member name="T:Numerics.Data.TimeSeries">
            <summary>
            A time-series class, which is a collection of time-series ordinates.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.TimeSeries.#ctor">
            <summary>
            Constructs an empty time-series.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.#ctor(Numerics.Data.TimeInterval)">
            <summary>
            Constructs an empty time-series with a specified time interval.
            </summary>
            <param name="timeInterval">The time interval for the series.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.#ctor(Numerics.Data.TimeInterval,System.DateTime,System.DateTime)">
            <summary>
            Constructs an empty time-series with a specified start and end date.
            </summary>
            <param name="timeInterval">The time interval for the series.</param>
            <param name="startDate">The start date/time of the series.</param>
            <param name="endDate">The end date/time of the series.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.#ctor(Numerics.Data.TimeInterval,System.DateTime,System.DateTime,System.Double)">
            <summary>
            Constructs a time-series with a specified start and end date, and a constant fixed value.
            </summary>
            <param name="timeInterval">The time interval for the series.</param>
            <param name="startDate">The start date/time of the series.</param>
            <param name="endDate">The end date/time of the series.</param>
            <param name="fixedValue">A fixed value to be assigned to each ordinate.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.#ctor(Numerics.Data.TimeInterval,System.DateTime,System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs a time-series based on the start date and a list of data values.
            </summary>
            <param name="timeInterval">The time interval for the series.</param>
            <param name="startDate">The start date/time of the series.</param>
            <param name="data">A list of data values.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs a time-series based on XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
        </member>
        <member name="P:Numerics.Data.TimeSeries.TimeInterval">
            <summary>
            Returns the time interval of the time-series.
            </summary>
        </member>
        <member name="P:Numerics.Data.TimeSeries.HasMissingValues">
            <summary>
            Gets whether there are missing values.
            </summary>
        </member>
        <member name="P:Numerics.Data.TimeSeries.StartDate">
            <summary>
            Gets the start date of the time-series.
            </summary>
        </member>
        <member name="P:Numerics.Data.TimeSeries.EndDate">
            <summary>
            Gets the end date of the time-series.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.SortByTime(System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the elements in the entire collection by the time ordinate given a specified sort direction.
            </summary>
            <param name="Order">Optional. Ascending or descending order. Default = Ascending.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.SortByValue(System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the elements in the entire collection by value given a specified sort direction.
            </summary>
            <param name="Order">Optional. Ascending or descending order. Default = Ascending.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Add(System.Double)">
            <summary>
            Add a constant to each value in the time-series. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to add to each value in the series.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Add(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Add a constant to specified values in the time-series. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to add to each value in the series.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Subtract(System.Double)">
            <summary>
            Subtract a constant from each value in the time-series. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to subtract each value in the series.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Subtract(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Subtract a constant from specified values in the time-series. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to subtract each value in the series.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Multiply(System.Double)">
            <summary>
            Multiply each value in the time-series by a constant. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to multiply each value by in the series.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Multiply(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiply specified values in the time-series by a constant. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to multiply each value by in the series.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Divide(System.Double)">
            <summary>
            Divide each value in the time-series by a constant. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to divide each value by in the series.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Divide(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Divide specified values in the time-series by a constant. Missing values are kept as missing.
            </summary>
            <param name="constant">Factor to divide each value by in the series.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.AbsoluteValue">
            <summary>
            Set each value in the time-series to its absolute value. Missing values are kept as missing.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.AbsoluteValue(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Set specified values in the time-series to its absolute value. Missing values are kept as missing.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Exponentiate(System.Double)">
            <summary>
            Raise each value in the time-series by the specified power or exponent. Missing values are kept as missing.
            </summary>
            <param name="power">Power or exponent.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Exponentiate(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Raise specified values in the time-series by the specified power or exponent. Missing values are kept as missing.
            </summary>
            <param name="power">Power or exponent.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.LogTransform(System.Double)">
            <summary>
            Log transform values in the time-series. Missing values are kept as missing.
            </summary>
            <param name="baseValue">The log base value.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.LogTransform(System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>
            Log transform specified values in the time-series. Missing values are kept as missing.
            </summary>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
            <param name="baseValue">The log base value.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Standardize">
            <summary>
            Standardize the time series values. This action is not reversible. 
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Inverse">
            <summary>
            Each value in the time-series is replaced by its inverse (1/x). Missing values are kept as missing. If the value is 0.0, the value is set to Double.NaN.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Inverse(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Specified values in the time-series are replaced by their inverse (1/x). Missing values are kept as missing. If the value is 0.0, the value is set to Double.NaN.
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the inverse calculation to.</param>
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.CumulativeSum">
            <summary>
            Returns the cumulative sum of the time-series. Missing values are treated as zero when accumulating values.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Difference(System.Int32)">
            <summary>
            Returns a time-series of the successive differences per time period.
            </summary>
            <param name="period">Time period for taking differences. If time interval is 1-hour, and period is 12, the difference will be computed over a moving 12 hour block.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.NumberOfMissingValues">
            <summary>
            Returns the number of missing values.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ReplaceMissingData(System.Double)">
            <summary>
            Replaces all missing data (Double.NaN) with the specified value.
            </summary>
            <param name="value">Value for missing data.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ReplaceMissingData(System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>
            Replaces missing data (Double.NaN) for specified indexes with the specified value.
            </summary>
            <param name="value">Value for missing data.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.InterpolateMissingData(System.Int32)">
            <summary>
            Interpolate missing data. Data will only be interpolated if the number of consecutive missing value is less than the specified limit.
            </summary>
            <param name="maxNumberOfMissing">The maximum number of consecutive missing values.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.InterpolateMissingData(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Interpolate missing data. Data will only be interpolated if the number of consecutive missing value is less than the specified limit.
            </summary>
            <param name="maxNumberOfMissing">The maximum number of consecutive missing values.</param>
            <param name="indexes">List of integer index values (0 based) for each ordinate in the time series to apply the calculation to.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.AddTimeInterval(System.DateTime,Numerics.Data.TimeInterval)">
            <summary>
            Returns a new date/time that adds the time interval to the specified data/time value.
            </summary>
            <param name="time">Time to increase.</param>
            <param name="timeInterval">The time interval.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.SubtractTimeInterval(System.DateTime,Numerics.Data.TimeInterval)">
            <summary>
            Returns a new date/time that subtracts the time interval to the specified data/time value.
            </summary>
            <param name="time">Time to decrease.</param>
            <param name="timeInterval">The time interval.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.TimeIntervalInHours(Numerics.Data.TimeInterval)">
            <summary>
            Converts the time interval to hours.
            </summary>
            <returns>The time interval in hours.</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeries.CheckIfMinStepsExceeded(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Determines if the minimum step between events has been exceeded. 
            </summary>
            <param name="startTime">Start time of the starting event.</param>
            <param name="endTime">End time of the ending event.</param>
            <param name="minStepsBetweenEvents">Minimum time steps between events.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MovingAverage(System.Int32)">
            <summary>
            Returns a moving average time-series based on the specified time period. The average is computed based on the previous n=period ordinates.
            </summary>
            <param name="period">The time period to average over. If time interval is 1-hour, and period is 12, the moving average will be computed over a moving 12 hour block.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MovingSum(System.Int32)">
            <summary>
            Returns a moving sum time-series based on the specified time period. The sum is computed based on the previous n=period ordinates.
            </summary>
            <param name="period">The time period to sum over. If time interval is 1-hour, and period is 12, the moving sum will be computed over a moving 12 hour block.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ShiftAllDates(System.DateTime)">
            <summary>
            Shift all of the dates to match the new start date.
            </summary>
            <param name="newStartDate">The new start date.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ShiftDatesByDay(System.Int32)">
            <summary>
            Shift the dates by a specified number of days.
            </summary>
            <param name="numberOfDays">The number of days to shift by.</param>
            <returns> A new TimeSeries object with the dates shifted</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ShiftDatesByMonth(System.Int32)">
            <summary>
            Shift the dates by a specified number of months.
            </summary>
            <param name="numberOfMonths">The number of months to shift by.</param>
            <returns> A new TimeSeries object with the dates shifted</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ShiftDatesByYear(System.Int32)">
            <summary>
            Shift the dates by a specified number of years. 
            </summary>
            <param name="numberOfYears">The number of years to shift by.</param>
            <returns> A new TimeSeries object with the dates shifted</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ClipTimeSeries(System.DateTime,System.DateTime)">
            <summary>
            Clip the time-series.
            </summary>
            <param name="startDate">The new start date/time of the series.</param>
            <param name="endDate">The new end date/time of the series.</param>
            <returns> A new TimeSeries object with the dates clipped</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ConvertTimeInterval(Numerics.Data.TimeInterval,System.Boolean)">
            <summary>
            Convert the current time-series to a new time interval.
            </summary>
            <param name="timeInterval">The new time interval.</param>
            <param name="average">Optional. Determines if values should be averaged (true) or cumulated (false) for larger time steps. Default = true.</param>
            <returns>A new TimeSeries object with the new interval.</returns>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MinValue">
            <summary>
            Gets the min value of the time-series.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MaxValue">
            <summary>
            Gets the max value of the time-series.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MeanValue">
            <summary>
            Gets the mean of the time-series values.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.StandardDeviation">
            <summary>
            Gets the standard deviation of the time-series values.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.SummaryPercentiles">
            <summary>
            Returns summary percentile stats for the 5th, 25th, 50th, 75th, and 95th percentiles.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Percentiles(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of percentiles given a list of k-th percentile values.
            </summary>
            <param name="kValues">A list of k-th percentile values.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Duration">
            <summary>
            Returns the duration (percent of time exceedance curve)
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MonthlyPercentiles(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of percentiles given a list of k-th percentile values, for each month of the year.
            Number of rows = 12. Number of columns = length of the k-value list.
            </summary>
            <param name="kValues">A list of k-th percentile values.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MonthlySummaryStatistics">
            <summary>
            Returns an array of summary statistics for each month of the year. 
            Number of rows = 12. Number of columns = 8 {min, 5%, 25%, 50%, 75%, 95%, max, mean}.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.SummaryStatistics">
            <summary>
            Returns a dictionary of the time series summary statistics.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.SummaryHypothesisTest(System.Int32)">
            <summary>
            Returns a dictionary of the hypothesis test results.
            </summary>
            <param name="splitLocation">The location in the series to split the data samples.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MonthlyFrequency">
            <summary>
            Compute the monthly frequency of occurrence.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.CalendarYearSeries(Numerics.Data.BlockFunctionType,Numerics.Data.SmoothingFunctionType,System.Int32)">
            <summary>
            Returns an annual (irregular) block series.  
            </summary>
            <param name="blockFunction">Optional. The block function type; e.g. min, max, sum, or average. Default = Maximum.</param>
            <param name="smoothingFunction">Optional. The smoothing function type. Default = None.</param>
            <param name="period">Optional. The time period to perform smoothing over. If time interval is 1-hour, and period = 12, the smoothing will be computed over a moving 12 hour block. Default = 1.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.CustomYearSeries(System.Int32,Numerics.Data.BlockFunctionType,Numerics.Data.SmoothingFunctionType,System.Int32)">
            <summary>
            Returns an annual (irregular) block series based on a 12-month year with a customized starting month. 
            </summary>
            <param name="startMonth">Optional. The month when the custom year begins. Default = 10 (or October).</param>
            <param name="blockFunction">Optional. The block function type; e.g. min, max, sum, or average. Default = Maximum.</param>
            <param name="smoothingFunction">Optional. The smoothing function type. Default = None.</param>
            <param name="period">Optional. The time period to perform smoothing over. If time interval is 1-hour, and period = 12, the smoothing will be computed over a moving 12 hour block. Default = 1.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.CustomYearSeries(System.Int32,System.Int32,Numerics.Data.BlockFunctionType,Numerics.Data.SmoothingFunctionType,System.Int32)">
            <summary>
            Returns a custom annual (irregular) block series based on a customized window. 
            </summary>
            <param name="startMonth">The month when the custom year begins.</param>
            <param name="endMonth">The month when the custom year ends.</param>
            <param name="blockFunction">Optional. The block function type; e.g. min, max, sum, or average. Default = Maximum.</param>
            <param name="smoothingFunction">Optional. The smoothing function type. Default = None.</param>
            <param name="period">Optional. The time period to perform smoothing over. If time interval is 1-hour, and period = 12, the smoothing will be computed over a moving 12 hour block. Default = 1.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.MonthlySeries(Numerics.Data.BlockFunctionType,Numerics.Data.SmoothingFunctionType,System.Int32)">
            <summary>
            Returns an monthly (irregular) block series.  
            </summary>
            <param name="blockFunction">Optional. The block function type; e.g. min, max, sum, or average. Default = Maximum.</param>
            <param name="smoothingFunction">Optional. The smoothing function type. Default = None.</param>
            <param name="period">Optional. The time period to perform smoothing over. If time interval is 1-hour, and period = 12, the smoothing will be computed over a moving 12 hour block. Default = 1.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.QuarterlySeries(Numerics.Data.BlockFunctionType,Numerics.Data.SmoothingFunctionType,System.Int32)">
            <summary>
            Returns an quarterly (irregular) block series.  
            </summary>
            <param name="blockFunction">Optional. The block function type; e.g. min, max, sum, or average. Default = Maximum.</param>
            <param name="smoothingFunction">Optional. The smoothing function type. Default = None.</param>
            <param name="period">Optional. The time period to perform smoothing over. If time interval is 1-hour, and period = 12, the smoothing will be computed over a moving 12 hour block. Default = 1.</param>
        </member>
        <member name="M:Numerics.Data.TimeSeries.PeaksOverThresholdSeries(System.Double,System.Int32,Numerics.Data.SmoothingFunctionType,System.Int32)">
            <summary>
            Returns a peaks-over-threshold (POT) series.
            </summary>
            <param name="threshold">The threshold value.</param>
            <param name="minStepsBetweenEvents">The minimum number of time steps between independent peak events. This time condition ensures independence between events. Default = 1.</param>
            <param name="smoothingFunction">The smoothing function type. Smoothing is performed before the peaks-over-threshold analysis.</param>
            <param name="period">The time period to perform smoothing over. If time interval is 1-hour, and period is 12. The smoothing will be computed over a moving 12 hour block.</param>
            <remarks>
            This routine is based on the 'clust' method included in the POT R package (https://cran.r-project.org/web/packages/POT/index.html).
            The clusters of exceedances are defined as follows:
            <list type="bullet">
            <item>
            The first exceedance initiates the first cluster;
            </item>
            <item>
            The first observation under the threshold u “ends” the current cluster unless the minimum steps between events does not hold;
            </item>
            <item>
            The next exceedance initiates a new cluster;
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Data.TimeSeries.ToXElement">
            <summary>
            Returns an XElement of a series ordinate.
            </summary>
        </member>
        <member name="M:Numerics.Data.TimeSeries.Clone">
            <summary>
            Creates a copy of the time series.
            </summary>
        </member>
        <member name="T:Numerics.Data.UncertainOrderedPairedData">
            <summary>
            Class designed to store xy data that is ordered for both the x and y values. Here y is uncertain and represented 
            as a continuous distribution.
            </summary>
            <remarks>
                <b> Authors:</b>
                Woodrow Fields, USACE Risk Management Center, woodrow.l.fields@usace.army.mil
            </remarks> 
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.AllowDifferentDistributionTypes">
            <summary>
            Gets or sets whether to allow different distribution types in the list. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.IsValid">
            <summary>
            Determines if the list is valid. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.StrictX">
            <summary>
            Determines whether the sort order is strict on the X variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.StrictY">
            <summary>
            Determines whether the sort order is strict on the Y variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.OrderX">
            <summary>
            Gets or sets the sort order of the X variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.OrderY">
            <summary>
            Gets or sets the sort order of the Y variable. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.Distribution">
            <summary>
            Gets the univariate distribution type. 
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.Count">
            <summary>
            Gets the count of the number of UncertainOrdinates currently stored
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.IsReadOnly">
            <summary>
            Boolean that dictates if an object is read-only or can be modified
            </summary>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.SupressCollectionChanged">
            <summary>
            Boolean of whether or not to invoke anything on CollectionChanged
            </summary>
        </member>
        <member name="E:Numerics.Data.UncertainOrderedPairedData.CollectionChanged">
            <summary>
            Handles the event of CollectionChanged
            </summary>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.#ctor(System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder,Numerics.Distributions.UnivariateDistributionType,System.Int32)">
            <summary>
            Create empty instance of the uncertain ordered paired data class.
            </summary>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
            <param name="distributionType">The distribution type of the y values</param>
            <param name="capacity"> Optional, capacity of the collection.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Numerics.Distributions.UnivariateDistributionBase},System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder,Numerics.Distributions.UnivariateDistributionType)">
            <summary>
            Create an instance of the uncertain ordered paired data class with defined uncertain ordinate data.
            </summary>
            <param name="xData">Uncertain ordinate x values.</param>
            <param name="yData">Uncertain ordinate y values.</param>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
            <param name="distributionType">The distribution type of the y values</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.#ctor(System.Collections.Generic.IList{Numerics.Data.UncertainOrdinate},System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder,Numerics.Distributions.UnivariateDistributionType)">
            <summary>
            Create an instance of the uncertain ordered paired data class with defined uncertain ordinate data.
            </summary>
            <param name="data">Uncertain ordinate values.</param>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
            <param name="distributionType">The distribution type of the y values</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.#ctor(System.Collections.Generic.IList{Numerics.Data.UncertainOrdinate},System.Boolean,Numerics.Data.SortOrder,System.Boolean,Numerics.Data.SortOrder,Numerics.Distributions.UnivariateDistributionType,System.Boolean)">
            <summary>
            Helper function for the Clone() method that creates an instance of the uncertain ordered paired data class with defined uncertain ordinate data.
            </summary>
            <param name="data">Uncertain ordinate values.</param>
            <param name="strictOnX">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="xOrder">Order of the x values.</param>
            <param name="strictOnY">Boolean indicating if x values are strictly increasing/decreasing. True means x values cannot be equal.</param>
            <param name="yOrder">Order of the y values.</param>
            <param name="distributionType">The distribution type of the y values</param>
            <param name="dataValid">Boolean of if the data is valid.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create a new instance of the uncertain ordered paired data class from an XElement XML object.
            </summary>
            <param name="el">The XElement the UncertainOrderPairedData object is being created from.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.RaiseCollectionChangedReset">
            <summary>
            Resets the event handling of the CollectionChanged event
            </summary>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.CurveSample(System.Double)">
            <summary>
            This function samples a curve using the probability axis of the continuous distribution in the Y value for each x ordinate, which will result in a new paired data curve.
            </summary>
            <param name="probability">A value between 0 and 1 representing the value to sample from each y continuous distribution</param>
            <returns>A sampled curve provided as an OrderedPairedData object.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.CurveSample">
            <summary>
            This function samples a curve using the mean of the Y value for each x ordinate, which will result in a new paired data curve.
            </summary>
            <returns>A sampled curve provided as an OrderedPairedData object.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Clone">
            <summary>
            Creates a deep clone of the object to a new object.
            </summary>
            <returns>Deep clone of target UncertainOrderedPairedData collection.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Validate">
            <summary>
            Method to determine validity of all ordinates in the collection.
            </summary>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.OrdinateValid(System.Int32,System.Boolean)">
            <summary>
            Determines the validity of a specific ordinate at a specified index.
            </summary>
            <param name="index">The index of ordinate item.</param>
            <param name="lookBackward">Optional parameter to also look backward when determining validity of the ordinate. This parameter is included as an 
            optimization for situations where looking at the previous ordinate is not required.</param>
            <returns>A boolean that indicates if the ordinate at the specified index is valid or not within the dataset.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.GetErrors">
            <summary>
            Get a list of errors in the UncertainOrderedPairedData object.
            </summary>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.op_Equality(Numerics.Data.UncertainOrderedPairedData,Numerics.Data.UncertainOrderedPairedData)">
            <summary>
            Tests for numerical equality between two UncertainOrderedPairedData collections.
            </summary>
            <param name="left">UncertainOrderedPairedData object to the left of the equality operator.</param>
            <param name="right">UncertainOrderedPairedData object to the right of the equality operator.</param>
            <returns>True if two objects are numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.op_Inequality(Numerics.Data.UncertainOrderedPairedData,Numerics.Data.UncertainOrderedPairedData)">
            <summary>
            Tests for numerical inequality between two UncertainOrderedPairedData collections.
            </summary>
            <param name="left">UncertainOrderedPairedData object to the left of the inequality operator.</param>
            <param name="right">UncertainOrderedPairedData object to the right of the inequality operator.</param>
            <returns>True if two objects are not numerically equal; otherwise, False.</returns>
        </member>
        <member name="P:Numerics.Data.UncertainOrderedPairedData.Item(System.Int32)">
            <summary>
            Get and sets the element at the specific index.
            </summary>
            <param name="index">The zero-based index of the element to get or set</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.IndexOf(Numerics.Data.UncertainOrdinate)">
            <summary>
            Determines the index of a specific ordinate in the collection.
            </summary>
            <param name="item">The ordinate to locate in the collection.</param>
            <returns>The index of ordinate item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Remove(Numerics.Data.UncertainOrdinate)">
            <summary>
            Removes the first occurrence of a target ordinate from the collection.
            </summary>
            <param name="item">The ordinate to remove from the collection.</param>
            <returns>True if item was successfully removed from the collection; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.RemoveAt(System.Int32)">
            <summary>
            Removes the ordinate from the collection at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of ordinates from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.RemoveRange(System.Int32[])">
            <summary>
            Removes a range of ordinates from the collection at specified positions.
            </summary>
            <param name="rowIndicesToRemove">The zero-based indices of the items to remove.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Add(Numerics.Data.UncertainOrdinate)">
            <summary>
            Adds an ordinate to the collection.
            </summary>
            <param name="item">The ordinate to add to the collection.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.AddRange(System.Collections.Generic.IList{Numerics.Data.UncertainOrdinate})">
            <summary>
            Add a series of ordinates to the collection.
            </summary>
            <param name="items">Items to be added to the collection.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Insert(System.Int32,Numerics.Data.UncertainOrdinate)">
            <summary>
            Inserts an item to the collection of ordinates.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The ordinate to insert into the collection.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.InsertRange(System.Int32,System.Collections.Generic.IList{Numerics.Data.UncertainOrdinate})">
            <summary>
            Insert a range of items into the collection of ordinates.
            </summary>
            <param name="index">The zero-based index at which the items will be inserted.</param>
            <param name="items">The ordinates to insert into the collection.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Clear">
            <summary>
            Removes all ordinates form the collection and sets count to zero.
            </summary>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.Contains(Numerics.Data.UncertainOrdinate)">
            <summary>
            Determines whether the collection contains a specific uncertain ordinate.
            </summary>
            <param name="item">The uncertain ordinate to locate in the collection.</param>
            <returns>True if ordinate is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.CopyTo(Numerics.Data.UncertainOrdinate[],System.Int32)">
            <summary>
            Copies the ordinates to an System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied
            from. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrderedPairedData.SaveToXElement">
            <summary>
            Converts the uncertain ordered paired data set to an XElement for saving to xml.
            </summary>
            <returns>An XElement representation of the data.</returns>
        </member>
        <member name="T:Numerics.Data.UncertainOrdinate">
            <summary>
            Class to store uncertain ordinate information where X is stored as a double precision number and Y is stored as a continuous distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
            <list type="bullet">
            <item><description>
                Woodrow Fields, USACE Risk Management Center, woodrow.l.fields@usace.army.mil 
            </description></item>
            <item><description>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil 
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.#ctor(System.Double,Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            Constructs new uncertain ordinate.
            </summary>
            <param name="xValue">The x-value.</param>
            <param name="yValue">The y-value distribution.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs new uncertain ordinate from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.#ctor(System.Xml.Linq.XElement,Numerics.Distributions.UnivariateDistributionType)">
            <summary>
            Constructs new uncertain ordinate from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
            <param name="distributionType">The probability distribution type of Y.</param>
        </member>
        <member name="F:Numerics.Data.UncertainOrdinate.X">
            <summary>
            X Value.
            </summary>
        </member>
        <member name="F:Numerics.Data.UncertainOrdinate.Y">
            <summary>
            Y distribution.
            </summary>
        </member>
        <member name="F:Numerics.Data.UncertainOrdinate.IsValid">
            <summary>
            Boolean indicating if the ordinate has valid numeric values or not.
            </summary>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.GetOrdinate(System.Double)">
            <summary>
            Sample the uncertain ordinate to return a 'sampled' ordinate value.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <returns>A 'sampled' ordinate value.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.GetOrdinate">
            <summary>
            Gets the mean value of the uncertain distribution and returns a new ordinate value.
            </summary>
            <returns>A mean ordinate value.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.OrdinateValid(Numerics.Data.UncertainOrdinate,System.Boolean,System.Boolean,Numerics.Data.SortOrder,Numerics.Data.SortOrder,System.Boolean,System.Boolean)">
            <summary>
            Test if the ordinate is valid given monotonic criteria with the next/previous ordinate in a series.
            </summary>
            <param name="ordinateToCompare">Ordinate to compare to the target ordinate.</param>
            <param name="strictX">Are the x-values strictly monotonic?</param>
            <param name="strictY">Are the y-values strictly monotonic?</param>
            <param name="xOrder">The order of the x-values.</param>
            <param name="yOrder">The order of the y-values.</param>
            <param name="compareOrdinateIsNext">Boolean identifying if the ordinate to compare is the next or previous ordinate in a series.</param>
            <param name="allowDifferentTypes">Allow different distribution types. Default = false.</param>
            <returns> A boolean indicating if the ordinate is valid or not given the criteria.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.OrdinateErrors(Numerics.Data.UncertainOrdinate,System.Boolean,System.Boolean,Numerics.Data.SortOrder,Numerics.Data.SortOrder,System.Boolean,System.Boolean)">
            <summary>
            Get all errors associated with the ordinate given monotonic criteria with the next/previous ordinate in a series.
            </summary>
            <param name="ordinateToCompare">Ordinate to compare to the target ordinate.</param>
            <param name="strictX">Are the x-values strictly monotonic?</param>
            <param name="strictY">Are the y-values strictly monotonic?</param>
            <param name="xOrder">The order of the x-values.</param>
            <param name="yOrder">The order of the y-values.</param>
            <param name="compareOrdinateIsNext">Boolean identifying if the ordinate to compare is the next or previous ordinate in a series.</param>
            <param name="allowDifferentTypes">Allow different distribution types. Default = false.</param>
            <returns>A list of error messages given the criteria.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.OrdinateErrors">
            <summary>
            Get errors with the ordinate.
            </summary>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.op_Equality(Numerics.Data.UncertainOrdinate,Numerics.Data.UncertainOrdinate)">
            <summary>
            Checks if two uncertain ordinates are equal.
            </summary>
            <param name="left">First uncertain ordinate to compare.</param>
            <param name="right">Second uncertain ordinate to compare.</param>
            <returns>True if two objects are numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.op_Inequality(Numerics.Data.UncertainOrdinate,Numerics.Data.UncertainOrdinate)">
            <summary>
            Checks if two uncertain ordinates are not equal.
            </summary>
            <param name="left">First uncertain ordinate to compare.</param>
            <param name="right">Second uncertain ordinate to compare.</param>
            <returns>True if two objects are not numerically equal; otherwise, False.</returns>
        </member>
        <member name="M:Numerics.Data.UncertainOrdinate.ToXElement">
            <summary>
            Returns the ordinate as XElement.
            </summary>
        </member>
        <member name="T:Numerics.Data.LinearRegression">
            <summary>
            A class for performing linear regression. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Linear regression works to estimate the linear relationship between a single, scalar response (dependent) variable and one or more explanatory 
            (independent) variables. This implementation estimates Y = α + βX + e, where e ~ N(0,σ), and fits the linear regression model using singular value decomposition (SVD).
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Linear_regression"/>
            </remarks>
        </member>
        <member name="M:Numerics.Data.LinearRegression.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,System.Boolean)">
            <summary>
            Estimates the model Y = α + βX + e, where e ~ N(0,σ).
            </summary>
            <param name="x">The matrix of predictor values.</param>
            <param name="y">The response vector.</param>
            <param name="hasIntercept">Determines if an intercept should be estimate. Default = true.</param>
        </member>
        <member name="P:Numerics.Data.LinearRegression.Y">
            <summary>
            The vector of response values.
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.X">
            <summary>
            The matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.Parameters">
            <summary>
            The list of estimated parameter values.
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.ParameterNames">
            <summary>
            The list of the estimated parameter names. 
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.ParameterStandardErrors">
            <summary>
            The list of the estimated parameter standard errors. 
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.ParameterTStats">
            <summary>
            The list of the estimated parameter t-statistics.
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.Covariance">
            <summary>
            The estimate parameter covariance matrix. 
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.StandardError">
            <summary>
            The model standard error.
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.SampleSize">
            <summary>
            The data sample size. 
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.DegreesOfFreedom">
            <summary>
            The model degrees of freedom.
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.RSquared">
            <summary>
            The Coefficient of Determination (or R-squared). 
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.AdjRSquared">
            <summary>
            Adjusted R-squared.
            </summary>
        </member>
        <member name="P:Numerics.Data.LinearRegression.Residuals">
            <summary>
            The residuals of the fitted linear model. 
            </summary>
        </member>
        <member name="M:Numerics.Data.LinearRegression.Summary">
            <summary>
            Provides a standard summary output table in a list of strings. 
            </summary>
        </member>
        <member name="M:Numerics.Data.LinearRegression.FitSVD">
            <summary>
            Estimate the model using Singular Value Decomposition. 
            </summary>
        </member>
        <member name="M:Numerics.Data.LinearRegression.Predict(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the predicted Y values given the X-values. 
            </summary>
            <param name="x">The matrix of predictor values.</param>
        </member>
        <member name="M:Numerics.Data.LinearRegression.PredictionIntervals(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Returns the prediction intervals for Y in a 2D array with columns: lower, upper, mean.
            </summary>
            <param name="x">The matrix of predictor values.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% prediction intervals.</param>
        </member>
        <member name="T:Numerics.Distributions.Copulas.BivariateCopula">
            <summary>
            Declares common functionality of all Bivariate Copulas.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.Copulas.BivariateCopula._theta">
            <summary>
            Protected dependency property.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.BivariateCopula._parametersValid">
            <summary>
            Protected parameter is valid property.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.Theta">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.ParameterToString">
            <summary>
            Returns the name and value of the theta parameter in 2-column array of string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.ParameterNameShortForm">
            <summary>
            Returns the distribution parameter name in short form (e.g. θ).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.GetParameterPropertyName">
            <summary>
            Returns the distribution parameter property name.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.ParametersValid">
            <summary>
            Returns a boolean value describing if the current parameters are valid or not.
            If not, an ArgumentOutOfRange exception will be thrown when trying to use statistical functions (e.g. CDF())
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.MarginalDistributionX">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.MarginalDistributionY">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.BivariateCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.PDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.LogPDF(System.Double,System.Double)">
            <summary>
            Returns the natural log of the PDF.
            </summary>
            <param name="u">The reduced variate between 0 and 1.</param>
            <param name="v">The reduced variate between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.CDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.ValidateParameter(System.Double,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.Clone">
            <summary>
            Create a deep copy of the copula.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.ORJointExceedanceProbability(System.Double,System.Double)">
            <summary>
            Returns the OR joint exceedance probability. When either of the variables exceeds a particular threshold value
            </summary>
            <param name="u">The reduced variate between 0 and 1.</param>
            <param name="v">The reduced variate between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.ANDJointExceedanceProbability(System.Double,System.Double)">
            <summary>
            Returns the AND joint exceedance probability. When both variables exceed a particular threshold value simultaneously.
            </summary>
            <param name="u">The reduced variate between 0 and 1.</param>
            <param name="v">The reduced variate between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.GenerateRandomValues(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.PseudoLogLikelihood(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The pseudo log-likelihood function.
            </summary>
            <param name="sampleDataX">The sample data for the X variable. When estimating with pseudo likelihood, this should be the plotting positions of the data.</param>
            <param name="sampleDataY">The sample data for the Y variable. When estimating with pseudo likelihood, this should be the plotting positions of the data.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.IFMLogLikelihood(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The inference from margins (IFM) log-likelihood function. The marginal distribution are assumed to have already been estimated independently. 
            </summary>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopula.LogLikelihood(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The full log-likelihood function. The marginal distributions are estimated simultaneously with the copula. 
            </summary>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="T:Numerics.Distributions.Copulas.BivariateCopulaEstimation">
            <summary>
            A class for estimating the parameters of a bivariate copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopulaEstimation.Estimate(Numerics.Distributions.Copulas.BivariateCopula@,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Distributions.Copulas.CopulaEstimationMethod)">
            <summary>
            Estimate the bivariate copula.
            </summary>
            <param name="estimationMethod"></param>
            <param name="copula">The copula to estimate.</param>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopulaEstimation.MPL(Numerics.Distributions.Copulas.BivariateCopula,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The maximum pseudo likelihood method. 
            </summary>
            <param name="copula">The copula to estimate.</param>
            <param name="sampleDataX">The sample data for the X variable.When estimating with pseudo likelihood, this should be the plotting positions of the data.</param>
            <param name="sampleDataY">The sample data for the Y variable.When estimating with pseudo likelihood, this should be the plotting positions of the data.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopulaEstimation.IFM(Numerics.Distributions.Copulas.BivariateCopula,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The inference from margins method. 
            </summary>
            <param name="copula">The copula to estimate.</param>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.BivariateCopulaEstimation.MLE(Numerics.Distributions.Copulas.BivariateCopula,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The maximum likelihood estimation method.
            </summary>
            <param name="copula">The copula to estimate.</param>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="T:Numerics.Distributions.Copulas.ArchimedeanCopula">
            <summary>
            Declares common functionality of all Archimedean Copulas.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ArchimedeanCopula.ParameterToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ArchimedeanCopula.ParameterNameShortForm">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.ValidateParameter(System.Double,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.Generator(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.GeneratorInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.GeneratorPrime(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.GeneratorPrime2(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.GeneratorPrimeInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.PDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.CDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ArchimedeanCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
            <remarks>
            This method is based on Genest et al. 1986
            1) Two independent uniformly distributed U(0,1) random variates, u and v, are generated.
            2) Two new variables, s and w, are obtained as s = GeneratorPrime(u) / v and w = GeneratorPrimeInverse(s).
            3) Another variable v is obtained as v = GeneratorInverse(Generator(w) - Generator(u))
            4) The pairs u and v are the simulated pair, preserving the dependence structure.
            5) Both these u and v in the range [0,1]. These simulated pairs of u and v are then
            back-transformed through their corresponding marginal distributions.
            </remarks>
        </member>
        <member name="T:Numerics.Distributions.Copulas.IArchimedeanCopula">
            <summary>
            An interface for Archimedean Copulas.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IArchimedeanCopula.Generator(System.Double)">
            <summary>
            The generator function of the copula.
            </summary>
            <param name="t">The reduced variate.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IArchimedeanCopula.GeneratorPrime(System.Double)">
            <summary>
            The first derivative of the generator function.
            </summary>
            <param name="t">The reduced variate.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IArchimedeanCopula.GeneratorPrime2(System.Double)">
            <summary>
            The second derivative of the generator function.
            </summary>
            <param name="t">The reduced variate.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IArchimedeanCopula.GeneratorInverse(System.Double)">
            <summary>
            The inverse of the generator function.
            </summary>
            <param name="t">The reduced variate.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IArchimedeanCopula.GeneratorPrimeInverse(System.Double)">
            <summary>
            The inverse of the first derivative of the generator function.
            </summary>
            <param name="t">The reduced variate.</param>
        </member>
        <member name="T:Numerics.Distributions.Copulas.ClaytonCopula">
            <summary>
            The Clayton copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.#ctor">
            <summary>
            Constructs a Clayton copula with a dependency θ = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.#ctor(System.Double)">
            <summary>
            Constructs a Clayton copula with a specified θ.
            </summary>
            <param name="theta">The dependency parameter, θ.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.#ctor(System.Double,Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.IUnivariateDistribution)">
             <summary>
             Constructs a Clayton copula with a specified θ and marginal distributions.
             </summary>
             <param name="theta">The dependency parameter, θ.</param>
            <param name="marginalDistributionX">The X marginal distribution for the copula.</param>
            <param name="marginalDistributionY">The Y marginal distribution for the copula.</param>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ClaytonCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ClaytonCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ClaytonCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ClaytonCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.ClaytonCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.Generator(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.GeneratorInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.GeneratorPrime(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.GeneratorPrime2(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.GeneratorPrimeInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.CDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.SetThetaFromTau(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the dependency parameter using the method of moments.
            </summary>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.ClaytonCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Copulas.CopulaEstimationMethod">
            <summary>
            Copula Estimation Methods.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaEstimationMethod.FullLikelihood">
            <summary>
            The full maximum likelihood estimation method requires parametric marginal distributions to predict the data. 
            The marginal distributions and the copula dependency are estimated simultaneously. 
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaEstimationMethod.PseudoLikelihood">
            <summary>
            A semi-parametric approach that uses the plotting positions of the data to 
            estimate the copula dependency using maximum likelihood.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaEstimationMethod.InferenceFromMargins">
            <summary>
            The inference from margins (IFM) method includes two procedures: 
            1) marginal distributions are independently estimated from the observed values;
            2) the copula dependency is estimate through the maximization of the likelihood function 
            given the marginal distributions. 
            </summary>
        </member>
        <member name="T:Numerics.Distributions.Copulas.CopulaType">
            <summary>
            Enumeration of Copula types.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaType.AliMikhailHaq">
            <summary>
            Ali-Mikhail-Haq (AMH)
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaType.Clayton">
            <summary>
            Clayton
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaType.Frank">
            <summary>
            Frank
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaType.Gumbel">
            <summary>
            Gumbel
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaType.Joe">
            <summary>
            Joe
            </summary>
        </member>
        <member name="F:Numerics.Distributions.Copulas.CopulaType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:Numerics.Distributions.Copulas.FrankCopula">
            <summary>
            The Frank copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.#ctor">
            <summary>
            Constructs a Frank copula with a dependency θ = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.#ctor(System.Double)">
            <summary>
            Constructs a Frank copula with a specified θ.
            </summary>
            <param name="theta">The dependency parameter, θ.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.#ctor(System.Double,Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.IUnivariateDistribution)">
             <summary>
             Constructs a Frank copula with a specified θ and marginal distributions.
             </summary>
             <param name="theta">The dependency parameter, θ.</param>
            <param name="marginalDistributionX">The X marginal distribution for the copula.</param>
            <param name="marginalDistributionY">The Y marginal distribution for the copula.</param>
        </member>
        <member name="P:Numerics.Distributions.Copulas.FrankCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.FrankCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.FrankCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.FrankCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.FrankCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.ValidateParameter(System.Double,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.Generator(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.GeneratorInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.GeneratorPrime(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.GeneratorPrime2(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.GeneratorPrimeInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.PDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.CDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.FrankCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Copulas.AMHCopula">
            <summary>
            The Ali-Mikhail-Haq (AHM) copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.#ctor">
            <summary>
            Constructs a Ali-Mikhail-Haq (AHM) copula with a dependency θ = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.#ctor(System.Double)">
            <summary>
            Constructs a Ali-Mikhail-Haq (AHM) copula with a specified θ.
            </summary>
            <param name="theta">The dependency parameter, θ.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.#ctor(System.Double,Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.IUnivariateDistribution)">
             <summary>
             Constructs a Ali-Mikhail-Haq (AHM) copula with a specified θ and marginal distributions.
             </summary>
             <param name="theta">The dependency parameter, θ.</param>
            <param name="marginalDistributionX">The X marginal distribution for the copula.</param>
            <param name="marginalDistributionY">The Y marginal distribution for the copula.</param>
        </member>
        <member name="P:Numerics.Distributions.Copulas.AMHCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.AMHCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.AMHCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.AMHCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.AMHCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.ValidateParameter(System.Double,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.Generator(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.GeneratorInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.GeneratorPrime(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.GeneratorPrime2(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.GeneratorPrimeInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.PDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.SetThetaFromTau(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the dependency parameter using the method of moments.
            </summary>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.AMHCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Copulas.JoeCopula">
            <summary>
            The Joe copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.#ctor">
            <summary>
            Constructs a Joe copula with a dependency θ = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.#ctor(System.Double)">
            <summary>
            Constructs a Joe copula with a specified θ.
            </summary>
            <param name="theta">The dependency parameter, θ.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.#ctor(System.Double,Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.IUnivariateDistribution)">
             <summary>
             Constructs a Joe copula with a specified θ and marginal distributions.
             </summary>
             <param name="theta">The dependency parameter, θ.</param>
            <param name="marginalDistributionX">The X marginal distribution for the copula.</param>
            <param name="marginalDistributionY">The Y marginal distribution for the copula.</param>
        </member>
        <member name="P:Numerics.Distributions.Copulas.JoeCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.JoeCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.JoeCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.JoeCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.JoeCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.Generator(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.GeneratorInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.GeneratorPrime(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.GeneratorPrime2(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.GeneratorPrimeInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.JoeCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Copulas.NormalCopula">
            <summary>
            The Gaussian (Normal) copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.#ctor">
            <summary>
            Constructs a bivariate Gaussian copula with a correlation rho ρ = 0.0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.#ctor(System.Double)">
            <summary>
            Constructs a bivariate Gaussian copula with a specified correlation rho ρ.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.#ctor(System.Double,Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.IUnivariateDistribution)">
             <summary>
             Constructs a bivariate Gaussian copula with a specified θ and marginal distributions.
             </summary>
             <param name="rho">The dependency parameter, θ.</param>
            <param name="marginalDistributionX">The X marginal distribution for the copula.</param>
            <param name="marginalDistributionY">The Y marginal distribution for the copula.</param>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.ParameterToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.ParameterNameShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.NormalCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.ValidateParameter(System.Double,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.PDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.CDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.NormalCopula.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Copulas.GumbelCopula">
            <summary>
            The Gumbel copula. Sometimes referred to as Gumbel-Hougaard copula.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.#ctor">
            <summary>
            Constructs a Gumbel copula with a dependency θ = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.#ctor(System.Double)">
            <summary>
            Constructs a Gumbel copula with a specified θ.
            </summary>
            <param name="theta">The dependency parameter, θ.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.#ctor(System.Double,Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.IUnivariateDistribution)">
             <summary>
             Constructs a Gumbel copula with a specified θ and marginal distributions.
             </summary>
             <param name="theta">The dependency parameter, θ.</param>
            <param name="marginalDistributionX">The X marginal distribution for the copula.</param>
            <param name="marginalDistributionY">The Y marginal distribution for the copula.</param>
        </member>
        <member name="P:Numerics.Distributions.Copulas.GumbelCopula.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.GumbelCopula.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.GumbelCopula.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.GumbelCopula.ThetaMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Copulas.GumbelCopula.ThetaMaximum">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.Generator(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.GeneratorInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.GeneratorPrime(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.GeneratorPrime2(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.GeneratorPrimeInverse(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.InverseCDF(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.SetThetaFromTau(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the dependency parameter using the method of moments.
            </summary>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.GumbelCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Copulas.IBivariateCopula">
            <summary>
            Interface for Copula Joint Distributions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.Type">
            <summary>
            Returns the Copula type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.Theta">
            <summary>
            The dependency parameter, theta θ
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.ThetaMinimum">
            <summary>
            Returns the minimum value allowable for the dependency parameter.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.ThetaMaximum">
            <summary>
            Returns the maximum values allowable for the dependency parameter.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.ParametersValid">
            <summary>
            Returns a boolean value describing if the current parameters are valid or not.
            If not, an ArgumentOutOfRange exception will be thrown when trying to use statistical functions (e.g. CDF())
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.MarginalDistributionX">
            <summary>
            The X marginal distribution for the copula. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Copulas.IBivariateCopula.MarginalDistributionY">
            <summary>
            The Y marginal distribution for the copula. 
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.ValidateParameter(System.Double,System.Boolean)">
            <summary>
            Test to see if distribution parameters are valid.
            </summary>
            <param name="parameter">Dependency parameter.</param>
            <param name="throwException">Boolean indicating whether to throw the exception or not.</param>
            <returns>Nothing if the parameters are valid and the exception if invalid parameters were found.</returns>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.ParameterConstraints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the parameter constraints for the dependency parameter given the data samples. 
            </summary>
            <param name="sampleDataX">The sample data for the X variable.</param>
            <param name="sampleDataY">The sample data for the Y variable.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.PDF(System.Double,System.Double)">
            <summary>
            The probability density function (PDF) of the copula evaluated at reduced variates u and v.
            </summary>
            <param name="u">The reduced variate between 0 and 1.</param>
            <param name="v">The reduced variate between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.LogPDF(System.Double,System.Double)">
            <summary>
            Returns the natural log of the PDF.
            </summary>
            <param name="u">The reduced variate between 0 and 1.</param>
            <param name="v">The reduced variate between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.CDF(System.Double,System.Double)">
            <summary>
            The cumulative distribution function (CDF) of the copula evaluated at reduced variates u and v.
            </summary>
            <param name="u">The reduced variate between 0 and 1.</param>
            <param name="v">The reduced variate between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.InverseCDF(System.Double,System.Double)">
            <summary>
            The inverse cumulative distribution function (InvCDF) of the copula evaluated at probabilities u and v.
            </summary>
            <param name="u">Probability between 0 and 1.</param>
            <param name="v">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Copulas.IBivariateCopula.GenerateRandomValues(System.Int32,System.Int32)">
            <summary>
            Generate random values of a distribution given a sample size.
            </summary>
            <param name="sampleSize"> Size of random sample to generate. </param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="T:Numerics.Distributions.CompetingRisks">
            <summary>
            A competing risks distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://reliability.readthedocs.io/en/latest/Competing%20risk%20models.html" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.#ctor(Numerics.Distributions.UnivariateDistributionBase[])">
            <summary>
            Construct new competing risks distribution.
            </summary>
            <param name="distributions">The competing distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.#ctor(Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Construct new competing risks distribution.
            </summary>
            <param name="distributions">The competing distributions.</param>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Distributions">
            <summary>
            Returns the array of univariate probability distributions.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.XTransform">
            <summary>
            Determines the interpolation transform for the X-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.ProbabilityTransform">
            <summary>
            Determines the interpolation transform for the Probability-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.MinimumOfRandomVariables">
            <summary>
            If true, the competing risks model computes the minimum of the random variables. If false, it computes the maximum of random variables. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Dependency">
            <summary>
            The dependency between random variables. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.CorrelationMatrix">
            <summary>
            The correlation matrix used for modeling dependency between the marginal distributions.
            This is only used when the Dependency Type = CorrelationMatrix.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.ParameterNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.ComputeMoments">
            <summary>
            Compute central moments of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.CompetingRisks.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.SetParameters(Numerics.Distributions.UnivariateDistributionBase[])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="distributions">The competing distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.SetParameters(Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="distributions">The competing distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.CumulativeIncidenceFunctions(System.Collections.Generic.List{Numerics.Sampling.StratificationBin})">
            <summary>
            Returns a list of cumulative incidence functions. 
            </summary>
            <param name="bins">Optional. The stratification bins to integrate over. Default is 200 bins.</param>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.CreateMultivariateNormal">
            <summary>
            Create a Multivariate Normal distribution used for modeling dependency between the marginal distributions.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.CreateEmpiricalCDF">
            <summary>
            Create empirical distribution for the CDF.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.GenerateRandomValues(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.CompetingRisks.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.GeneralizedNormal">
            <summary>
            The generalized normal distribution (LogNormal-3).
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.#ctor">
            <summary>
            Constructs a Generalized Normal distribution with a location of 100, scale of 10, and shape of 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Generalized Normal distribution with the given parameters ξ, α, and κ.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedNormal.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedNormal.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Mixture">
            <summary>
            A Mixture distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Mixture_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Mixture.#ctor(System.Double[],Numerics.Distributions.UnivariateDistributionBase[])">
            <summary>
            Construct new mixture distribution.
            </summary>
            <param name="weights">The mixture weights.</param>
            <param name="distributions">The mixture distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.Mixture.#ctor(System.Double[],Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Construct new mixture distribution.
            </summary>
            <param name="weights">The mixture weights.</param>
            <param name="distributions">The mixture distributions.</param>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Weights">
            <summary>
            Returns the array of distribution weights.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Distributions">
            <summary>
            Returns the array of univariate probability distributions.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.IsZeroInflated">
            <summary>
            Determines whether to use assign a weight to all data points less than or equal to zero.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.ZeroWeight">
            <summary>
            The zero-value weight used if the mixture is zero-inflated.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.XTransform">
            <summary>
            Determines the interpolation transform for the X-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.ProbabilityTransform">
            <summary>
            Determines the interpolation transform for the Probability-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.MaxIterations">
            <summary>
            The maximum iterations in the Expectation Maximization algorithm. Default = 1,000. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Tolerance">
            <summary>
            The relative tolerance for convergence. Default = 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Iterations">
            <summary>
            The total number of iterations required to find the MLE.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.ParameterNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.ComputeMoments">
            <summary>
            Compute central moments of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Mixture.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.SetParameters(System.Double[],Numerics.Distributions.UnivariateDistributionBase[])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="weights">The mixture weights.</param>
            <param name="distributions">The mixture distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.Mixture.SetParameters(System.Double[],Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="weights">The mixture weights.</param>
            <param name="distributions">The mixture distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.Mixture.SetParameters(System.Double[],System.Double[])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="weights">The mixture weights.</param>
            <param name="parameters">The mixture distribution parameters.</param>
        </member>
        <member name="M:Numerics.Distributions.Mixture.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.SetParameters(System.Double[]@)">
            <summary>
            Set the distribution parameters from a referenced array. Weights are normalized to sum to 1.
            </summary>
            <param name="parameters">The array of parameters.</param>
        </member>
        <member name="M:Numerics.Distributions.Mixture.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.LogPDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.LogCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.LogCCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.CreateEmpiricalCDF">
            <summary>
            Create empirical distribution for the CDF.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Mixture.GenerateRandomValues(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.ToXElement">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Mixture.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Create a mixture distribution from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
            <returns>A new mixture distribution.</returns>
        </member>
        <member name="T:Numerics.Distributions.IMomentEstimation">
            <summary>
            An interface for estimation by the method of moments.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IMomentEstimation.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of distribution parameters given the central moments of the sample.
            </summary>
            <param name="moments">The array of sample linear moments.</param>
        </member>
        <member name="M:Numerics.Distributions.IMomentEstimation.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of central moments given the distribution parameters.
            </summary>
            <param name="parameters">The list of distribution parameters.</param>
        </member>
        <member name="T:Numerics.Distributions.PertPercentile">
            <summary>
            The Pert percentile distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
                In probability and statistics, the PERT distribution is a family of continuous probability distributions
                defined by the minimum (a), most likely (b) and maximum (c) values that a variable can take.
                It is a transformation of the four-parameter Beta distribution.
            </para>
            <para>
                This version of the PERT is parameterized using the 5th, 50th, and 95th percentiles.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/PERT_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.#ctor">
            <summary>
            Constructs a PERT distribution with 5th = 0.05, 50th = 0.5, and 95th = 0.95.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a PERT distribution with specified 5th, 50th, and 95th percentiles.
            </summary>
            <param name="fifth">The 5th percentile value of the distribution.</param>
            <param name="fiftieth">The 50th percentile value of the distribution.</param>
            <param name="ninetyFifth">The 95th percentile value of the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Percentile5th">
            <summary>
            Gets and sets the 5th percentile.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Percentile50th">
            <summary>
            Gets and sets the 50th percentile.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Percentile95th">
            <summary>
            Gets and sets the 95th percentile.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.MinAllowableValue">
            <summary>
            The minimum allowable value that can be sampled.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.MaxAllowableValue">
            <summary>
            The maximum allowable value that can be sampled.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentile.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="fifth">The 5th percentile value of the distribution.</param>
            <param name="fiftieth">The 50th percentile value of the distribution.</param>
            <param name="ninetyFifth">The 95th percentile value of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="fifth">The 5th percentile value of the distribution.</param>
            <param name="fiftieth">The 50th percentile value of the distribution.</param>
            <param name="ninetyFifth">The 95th percentile value of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.SolveParameters">
            <summary>
            Solve the PERT parameters (min, mode, max) given the percentiles.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.ToPert">
            <summary>
            Return the Pert-Percentile as a Pert distribution.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.ToXElement">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentile.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Create a Pert-Percentile distribution from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
            <returns>A new mixture distribution.</returns>
        </member>
        <member name="T:Numerics.Distributions.IBootstrappable">
            <summary>
            An interface for performing the parametric bootstrap with a univariate distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IBootstrappable.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <summary>
            Bootstrap the distribution based on a sample size and parameter estimation method.
            </summary>
            <param name="estimationMethod">The parameter estimation method.</param>
            <param name="sampleSize">Size of the random sample to generate.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <returns>
            Returns a bootstrapped distribution.
            </returns>
        </member>
        <member name="T:Numerics.Distributions.UncertaintyAnalysisResults">
            <summary>
            A class for storing distribution uncertainty analysis results.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.ParentDistribution">
            <summary>
            The parent probability distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.ParameterSets">
            <summary>
            The array of parameter sets.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.ConfidenceIntervals">
            <summary>
            The confidence intervals. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.ModeCurve">
            <summary>
            The mode (or computed) curve from the parent distribution. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.MeanCurve">
            <summary>
            The mean (or predictive) curve. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.AIC">
            <summary>
            Gets or sets the Akaike information criteria (AIC) of the fit.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.BIC">
            <summary>
            Gets or sets the Bayesian information criteria (BIC) of the fit.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.RMSE">
            <summary>
            Gets or sets the Root Mean Square Error (RMSE) of the fit. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UncertaintyAnalysisResults.ERL">
            <summary>
            Gets or sets the Effective Record Length (ERL).
            </summary>
        </member>
        <member name="M:Numerics.Distributions.UncertaintyAnalysisResults.ToByteArray(Numerics.Distributions.UncertaintyAnalysisResults)">
            <summary>
            Returns the class as a byte array. 
            </summary>
            <param name="results">The uncertainty analysis results.</param>
        </member>
        <member name="M:Numerics.Distributions.UncertaintyAnalysisResults.FromByteArray(System.Byte[])">
            <summary>
            Returns the class from a byte array. 
            </summary>
            <param name="bytes">Byte array.</param>
        </member>
        <member name="M:Numerics.Distributions.UncertaintyAnalysisResults.ToXElement">
            <summary>
            Returns the class as XElement. The parameter sets are not included. 
            </summary>
        </member>
        <member name="M:Numerics.Distributions.UncertaintyAnalysisResults.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Returns the class from an XElement. 
            </summary>
            <param name="xElement">XElement to deserialize.</param>
        </member>
        <member name="M:Numerics.Distributions.UncertaintyAnalysisResults.FromMCMCResults(Numerics.Sampling.MCMC.MCMCResults,Numerics.Distributions.UnivariateDistributionBase,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Returns uncertainty analysis results for the distribution estimated from MCMC.
            </summary>
            <param name="results">The MCMC results.</param>
            <param name="distribution">The parent distribution.</param>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="T:Numerics.Distributions.MultivariateDistribution">
            <summary>
            Declares common functionality for Multivariate Probability Distributions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.MultivariateDistribution.Dimension">
            <summary>
            Gets the number of variables for the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateDistribution.Type">
            <summary>
            Returns the multivariate distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateDistribution.DisplayName">
            <summary>
            Returns the display name of the distribution type as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateDistribution.ShortDisplayName">
            <summary>
            Returns the short display name of the distribution as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateDistribution.ParametersValid">
            <summary>
            Returns a boolean value describing if the current parameters are valid or not.
            If not, an ArgumentOutOfRange exception will be thrown when trying to use statistical functions (e.g. CDF())
            </summary>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.PDF(System.Double[])">
            <summary>
            The Probability Density Function (PDF) of the distribution evaluated at a point X.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.LogPDF(System.Double[])">
            <summary>
            Returns the natural log of the PDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.CDF(System.Double[])">
            <summary>
            The Cumulative Distribution Function (CDF) for the distribution evaluated at a point X.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.LogCDF(System.Double[])">
            <summary>
            Returns the natural log of the CDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.CCDF(System.Double[])">
            <summary>
            The complement of the CDF. This function is also known as the survival function.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.LogCCDF(System.Double[])">
            <summary>
            Returns the natural log of the CCDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateDistribution.Clone">
            <summary>
            Creates a copy of the distribution.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.MultivariateDistributionType">
            <summary>
            Multivariate Distribution Types.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.MultivariateDistributionType.BivariateEmpiricalDistribution">
            <summary>
            Bivariate empirical distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.MultivariateDistributionType.MultivariateNormal">
            <summary>
            Multivariate Normal (MVN) distribution.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.MultivariateNormal">
            <summary>
            The Multivariate Normal distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Multivariate_normal_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.#ctor(System.Int32)">
            <summary>
            Constructs a multivariate Gaussian distribution with zero mean vector and identity covariance matrix.
            </summary>
            <param name="dimension">The number of dimensions in the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.#ctor(System.Double[])">
            <summary>
            Constructs a new Multivariate Normal distribution with an identity covariance matrix.
            </summary>
            <param name="mean">The mean vector μ (mu) for the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.#ctor(System.Double[],System.Double[0:,0:])">
            <summary>
            Constructs a new Multivariate Normal distribution.
            </summary>
            <param name="mean">The mean vector μ (mu) for the distribution.</param>
            <param name="covariance">The covariance matrix Σ (sigma) for the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.MVNUNI">
            <summary>
            The uniform(0,1) random number generator required to compute the multivariate CDF for dimensions greater than 2.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.MaxEvaluations">
            <summary>
            The maximum number of function evaluations allowed when computing the multivariate CDF. Default = 1,000 x D.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.AbsoluteError">
            <summary>
            The absolute error tolerance when computing the multivariate CDF. Default = 1E-3.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.RelativeError">
            <summary>
            The relative error tolerance when computing the multivariate CDF. Default = 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Dimension">
            <summary>
            Gets the number of variables for the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Type">
            <summary>
            Returns the multivariate distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.DisplayName">
            <summary>
            Returns the display name of the distribution type as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.ShortDisplayName">
            <summary>
            Returns the short display name of the distribution as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.ParametersValid">
            <summary>
            Determines whether the parameters are valid or not.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Mean">
            <summary>
            Gets the mean vector of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Median">
            <summary>
            Gets the median vector of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Mode">
            <summary>
            Gets the mode vector of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Variance">
            <summary>
            Gets the variance vector of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.StandardDeviation">
            <summary>
            Gets the standard deviation vector of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.Covariance">
            <summary>
            Gets the Variance-Covariance matrix for the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.MultivariateNormal.IsPositiveDefinite">
            <summary>
            Determines if the covariance matrix is positive definite.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.SetParameters(System.Double[],System.Double[0:,0:])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="mean">The mean vector μ (mu) for the distribution.</param>
            <param name="covariance">The covariance matrix Σ (sigma) for the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.CreateCorrelationMatrix">
            <summary>
            Create the correlation arrays required for computing the CDF.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.ValidateParameters(System.Double[],System.Double[0:,0:],System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="mean">The mean vector μ (mu) for the distribution.</param>
            <param name="covariance">The covariance matrix Σ (sigma) for the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.PDF(System.Double[])">
            <summary>
            The Probability Density Function (PDF) of the distribution evaluated at a point X.
            </summary>
            <param name="x">A point in the distribution space.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.LogPDF(System.Double[])">
            <summary>
            Returns the natural log of the PDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.Mahalanobis(System.Double[])">
            <summary>
            Gets the Mahalanobis distance between a sample and this distribution.
            </summary>
            <param name="x">A point in the distribution space.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.CDF(System.Double[])">
            <summary>
            The Cumulative Distribution Function (CDF) for the distribution evaluated at a point X.
            </summary>
            <param name="x">A point in the distribution space.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.InverseCDF(System.Double[])">
            <summary>
            The inverse cumulative distribution function (InverseCDF).
            </summary>
            <param name="probabilities">Array of probabilities.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.IndependentNormal(System.Int32)">
            <summary>
            Returns an independent univariate Normal distribution for the given index.
            </summary>
            <param name="index">The zero-based index of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.Univariate(System.Double,System.Double)">
            <summary>
            Returns a new univariate Normal distribution.
            </summary>
            <param name="mu">Mean of the distribution.</param>
            <param name="sigma">Standard deviation of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.Bivariate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new bivariate Normal distribution.
            </summary>
            <param name="mu1">Mean of the first variate of the distribution.</param>
            <param name="mu2">Mean of the second variate of the distribution.</param>
            <param name="sigma1">Standard deviation of the first variate of the distribution.</param>
            <param name="sigma2">Standard deviation of the second variate of the distribution.</param>
            <param name="rho">The correlation coefficient between the two distributions.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.GenerateRandomValues(System.Int32,System.Int32)">
            <summary>
            Generate random values of a distribution given a sample size.
            </summary>
            <param name="sampleSize"> Size of random sample to generate. </param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <returns>
            Array of random values. The number of rows are equal to the sample size.
            The number of columns are equal to the dimensions of this distribution.
            </returns>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.LatinHypercubeRandomValues(System.Int32,System.Int32)">
            <summary>
            Use Latin hypercube method to generate random values of a distribution given a sample size and a user-defined seed.
            </summary>
            <param name="sampleSize"> Size of random sample to generate. </param>
            <param name="seed"> Seed for random number generator. </param>
            <returns>
            Array of random values.
            </returns>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.StratifiedRandomValues(System.Collections.Generic.List{Numerics.Sampling.StratificationBin},System.Int32)">
            <summary>
            Returns a 2D array of stratified z-variates. The first dimension is stratified, and the remaining are sampled randomly. 
            </summary>
            <param name="stratificationBins">A list of stratification bins.</param>
            <param name="seed"> Seed for random number generator. </param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.BivariateCDF(System.Double,System.Double,System.Double)">
            <summary>
            A function for computing the bivariate normal CDF.
            </summary>
            <remarks>
            <para>
            This code was copied from Accord Math Library, http://accord-framework.net
            </para>
            <para>
            This method is based on the work done by Alan Genz, Department of
            Mathematics, Washington State University. Pullman, WA 99164-3113
            Email: alangenz@wsu.edu. This work was shared under a 3-clause BSD
            license. Please see source file for more details and the actual
            license text.</para>
            <para>
            This function is based on the method described by Drezner, Z and G.O.
            Wesolowsky, (1989), On the computation of the bivariate normal integral,
            Journal of Statist. Comput. Simul. 35, pp. 101-107, with major modifications
            for double precision, and for |R| close to 1.</para>
            </remarks>
            <param name="z1">The z variate for the first Normal.</param>
            <param name="z2">The z variate for the second Normal.</param>
            <param name="r">The correlation coefficient.</param>
        </member>
        <member name="F:Numerics.Distributions.MultivariateNormal.X">
            <summary>
            Gauss Legendre Points and Weights, N = 6, 12, and 20
            </summary>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.MVNDST(System.Int32,System.Double[],System.Double[],System.Int32[],System.Double[],System.Int32,System.Double,System.Double,System.Double@,System.Double@,System.Int32@)">
            <summary>
            A subroutine for computing multivariate normal probabilities.
                This subroutine uses an algorithm given in the paper
                "Numerical Computation of Multivariate Normal Probabilities", in
                J.of Computational and Graphical Stat., 1(1992), pp. 141-149, by
            Alan Genz
            Department of Mathematics
                     Washington State University
            Pullman, WA 99164-3113
                     Email : AlanGenz @wsu.edu
            </summary>
            <param name="N">the number of variables.</param>
            <param name="LOWER">array of lower integration limits.</param>
            <param name="UPPER">array of upper integration limits.</param>
            <param name="INFIN">array of integration limits flags:
                       if INFIN(I) &gt; 0, Ith limits are (-infinity, infinity);
                       if INFIN(I) = 0, Ith limits are(-infinity, UPPER(I)];
                       if INFIN(I) = 1, Ith limits are[LOWER(I), infinity);
                       if INFIN(I) = 2, Ith limits are[LOWER(I), UPPER(I)].</param>
            <param name="CORREL">array of correlation coefficients; the correlation coefficient in row I column J of the correlation matrix
             should be stored in CORREL(J + ((I-2)*(I-1))/2 ), for J less than I. The correlation matrix must be positive semidefinite.</param>
            <param name="MAXPTS">maximum number of function values allowed. This parameter can be used to limit the time.A sensible strategy is to start with MAXPTS = 1000 * N, and then increase MAXPTS if ERROR is too large.</param>
            <param name="ABSEPS">absolute error tolerance.</param>
            <param name="RELEPS">relative error tolerance.</param>
            <param name="ERROR">estimated absolute error, with 99% confidence level.</param>
            <param name="VALUE">estimated value for the integral.</param>
            <param name="INFORM">termination status parameter: if INFORM = 0, normal completion with ERROR &lt; EPS; if INFORM = 1, completion with ERROR > EPS and MAXPTS function values used; increase MAXPTS to decrease ERROR; if INFORM = 2, N > 500 or N less than 1.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.MVNDFN(System.Int32,System.Double[])">
            <summary>
            Integrand subroutine.
            </summary>
            <param name="N"></param>
            <param name="W"></param>
            <returns></returns>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.COVSRT(System.Int32,System.Double[],System.Double[],System.Double[],System.Int32[],System.Double[],System.Int32@,System.Double[],System.Double[],System.Double[],System.Int32[])">
            <summary>
            Subroutine to sort integration limits and determine Cholesky factor.
            </summary>
            <param name="N"></param>
            <param name="LOWER"></param>
            <param name="UPPER"></param>
            <param name="CORREL"></param>
            <param name="INFIN"></param>
            <param name="Y"></param>
            <param name="INFIS"></param>
            <param name="A"></param>
            <param name="B"></param>
            <param name="COV"></param>
            <param name="INFI"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Numerics.Distributions.MultivariateNormal.RCSWP(System.Int32,System.Int32,System.Double[],System.Double[],System.Int32[],System.Int32,System.Double[])" -->
        <member name="M:Numerics.Distributions.MultivariateNormal.DKBVRC(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Double[],System.Double},System.Double,System.Double,System.Double@,System.Double@,System.Int32@)">
             <summary>
             Automatic Multidimensional Integration Subroutine
                      AUTHOR: Alan Genz
                             Department of Mathematics
             Washington State University
                             Pulman, WA 99164-3113
                             Email: AlanGenz @wsu.edu
            
                     Last Change: 7/3/7
            
              DKBVRC computes an approximation to the integral
            
                  1  1     1
                 I I ... I F(X) dx(NDIM)...dx(2)dx(1)
                  0  0     0
            
              DKBVRC uses randomized Korobov rules for the first 100 variables.
             The primary references are
               "Randomization of Number Theoretic Methods for Multiple Integration"
                R.Cranley and T.N.L.Patterson, SIAM J Numer Anal, 13, pp. 904-14,
              and
               "Optimal Parameters for Multidimensional Integration", 
                P.Keast, SIAM J Numer Anal, 10, pp.831-838.
              If there are more than 100 variables, the remaining variables are
              integrated using the rules described in the reference
               "On a Number-Theoretical Integration Method"
             H.Niederreiter, Aequationes Mathematicae, 8(1972), pp. 304-11.
             </summary>
             <param name="NDIM">Number of variables, must exceed 1, but not exceed 40.</param>
             <param name="MINVLS">minimum number of function evaluations allowed. MINVLS must not exceed MAXVLS.If MINVLS &lt; 0 then the routine assumes a previous call has been made with the same integrand and continues that calculation.</param>
             <param name="MAXVLS">maximum number of function evaluations allowed.</param>
             <param name="FUNCTN">EXTERNALly declared user defined function to be integrated. It must have parameters (NDIM, Z), where Z is a real array of dimension NDIM.</param>
             <param name="ABSEPS">Required absolute accuracy.</param>
             <param name="RELEPS">Required relative accuracy.</param>
             <param name="ABSERR">Estimated absolute accuracy of FINEST.</param>
             <param name="FINEST">Estimated value of integral.</param>
             <param name="INFORM">INFORM = 0 for normal exit, when ABSERR &lt;= MAX(ABSEPS, RELEPS* ABS(FINEST)) and INTVLS &lt;= MAXCLS. 
                                  INFORM = 1 If MAXVLS was too small to obtain the required accuracy.In this case a value FINEST is returned with estimated absolute accuracy ABSERR.</param>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.BVNMVN(System.Double[],System.Double[],System.Int32[],System.Double)">
            <summary>
            A function for computing bivariate normal probabilities.
            
            </summary>
            <param name="LOWER">array of lower integration limits.</param>
            <param name="UPPER">array of upper integration limits.</param>
            <param name="INFIN">array of integration limits flags: if INFIN(I) = 0, Ith limits are(-infinity, UPPER(I)]; if INFIN(I) = 1, Ith limits are[LOWER(I), infinity); if INFIN(I) = 2, Ith limits are[LOWER(I), UPPER(I)].</param>
            <param name="CORREL">correlation coefficient.</param>
            <returns></returns>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.PHINVS(System.Double)">
            <summary>
            ALGORITHM AS241  APPL.STATIST. (1988) VOL. 37, NO. 3
            
            Produces the normal deviate Z corresponding to a given lower tail area of p.
            </summary>
            <param name="P">Lower tail area.</param>
            <returns></returns>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.BVU(System.Double,System.Double,System.Double)">
             <summary>
             Adapted From:
             A function for computing bivariate normal probabilities.
            
                   Yihong Ge
                   Department of Computer Science and Electrical Engineering
             Washington State University
                   Pullman, WA 99164-2752
                 and
             Alan Genz
             Department of Mathematics
                   Washington State University
             Pullman, WA 99164-3113
                   Email : alangenz @wsu.edu
            
             BVN - calculate the probability that X is larger than SH and Y is
                   larger than SK.
             </summary>
             <param name="SH">integration limit</param>
             <param name="SK">integration limit</param>
             <param name="R">correlation coefficient</param>
             <returns></returns>
        </member>
        <member name="M:Numerics.Distributions.MultivariateNormal.Clone">
            <summary>
            Creates a copy of the distribution.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.Bernoulli">
            <summary>
            The Bernoulli distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Bernoulli_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.#ctor">
            <summary>
            Constructs a Bernoulli distribution with p=0.5.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.#ctor(System.Double)">
            <summary>
            Constructs a Bernoulli distribution with a given probability.
            </summary>
            <param name="probability">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Probability">
            <summary>
            Gets and sets the probability of generating a 1. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Complement">
            <summary>
            Gets the complement of the probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.ShortDisplayName">
            <summary>
            Returns the short display name of the distribution as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Bernoulli.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Bernoulli.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.BetaDistribution">
            <summary>
            The Beta distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Beta_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.#ctor">
            <summary>
            Constructs a Beta distribution with α and β = 2, defined in the interval (0,1).
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Beta distribution with the given parameters α and β, defined in the interval (0,1).
            </summary>
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Alpha">
            <summary>
            Gets and sets the shape parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Beta">
            <summary>
            Gets and sets the shape parameter β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.BetaDistribution.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.BetaDistribution.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Binomial">
            <summary>
            The Binomial distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Binomial_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Binomial.#ctor">
            <summary>
            Constructs a Binomial distribution with p=0.5 and n=10.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs a Binomial distribution with a given probability and sample size.
            </summary>
            <param name="probability">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="numberOfTrials">The number of trials (n). Range: n ≥ 0.</param>
        </member>
        <member name="P:Numerics.Distributions.Binomial.ProbabilityOfSuccess">
            <summary>
            Gets and sets the success probability in each trial. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Complement">
            <summary>
            Gets the complement of the probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Binomial.NumberOfTrials">
            <summary>
            Gets and sets the number of trials. Range: n ≥ 0.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Binomial.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Binomial.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Binomial.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Binomial.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Binomial.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Binomial.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Binomial.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Binomial.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Cauchy">
            <summary>
            The Cauchy distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Cauchy_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.#ctor">
            <summary>
            Constructs a Cauchy distribution with location of 0 and scale of 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Cauchy distribution with a given X0 and γ.
            </summary>
            <param name="location">The location parameter (X0).</param>
            <param name="scale">The scale parameter γ (gamma).</param>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.X0">
            <summary>
            Gets and sets the location parameter (X0).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Gamma">
            <summary>
            Gets and sets the scale parameter γ (gamma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Cauchy.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Cauchy.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Geometric">
            <summary>
            The Geometric distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Geometric_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Geometric.#ctor">
            <summary>
            Constructs a Geometric distribution with p=0.5.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Geometric.#ctor(System.Double)">
            <summary>
            Constructs a Geometric distribution with a given probability.
            </summary>
            <param name="probability">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="P:Numerics.Distributions.Geometric.ProbabilityOfSuccess">
            <summary>
            Gets and sets the success probability in each trial. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Geometric.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Geometric.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Geometric.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Geometric.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Geometric.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Geometric.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Geometric.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Geometric.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.InverseChiSquared">
            <summary>
            The Inverse Chi-Squared (Inv-χ²) probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution" />
            <see href = "https://en.wikipedia.org/wiki/Scaled_inverse_chi-squared_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.#ctor">
            <summary>
            Constructs an Inverse Chi-Squared distribution with 10 degrees of freedom.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs an Inverse Chi-Squared distribution with given degrees of freedom.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom for the distribution.</param>
            <param name="scale">The scale parameter σ (sigma).</param>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.DegreesOfFreedom">
            <summary>
            Gets and sets the degrees of freedom ν (nu) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Precision">
            <summary>
            Gets the precision, or inverse variance 1/σ^2 = τ^2
            </summary>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseChiSquared.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseChiSquared.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.InverseGamma">
            <summary>
            The Inverse Gamma distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Inverse-gamma_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.#ctor">
            <summary>
            Constructs an Inverse-Gamma distribution with scale β = 0.5 and shape α = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new Inverse-Gamma distribution with a given scale and shape.
            </summary>
            <param name="scale">The scale parameter β (beta).</param>
            <param name="shape">The shape parameter α (alpha).</param>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Beta">
            <summary>
            Gets and sets the scale parameter β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Alpha">
            <summary>
            Gets and sets the shape parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.InverseGamma.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.InverseGamma.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.KappaFour">
            <summary>
            The Kappa-4 distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            <list type="bullet">
            <item><description>
            If h = -1 , then the Kappa-4 is the Generalized Logistic distribution.
            </description></item>
            <item><description>
            If h = 0 , then the Kappa-4 is the Generalized Extreme Value distribution.
            </description></item>
            <item><description>
            If h = 1 , then the Kappa-4 is the Generalized Pareto distribution.
            </description></item>
            </list>
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> <see href = "https://ieeexplore.ieee.org/document/5389569" /> </item>
            <item> <see href = "https://rdrr.io/cran/nsRFA/src/R/KAPPA.R" /> </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.#ctor">
            <summary>
            Constructs a Kappa-4 distribution.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Kappa-4 distribution with the given parameters ξ, α, κ, and h.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
            <param name="shape2">The shape parameter h (hondo).</param>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Hondo">
            <summary>
            Gets and sets the shape parameter h (hondo).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KappaFour.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.Clone">
            <summary>
            Creates a copy of the distribution.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KappaFour.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.ParameterEstimationMethod">
            <summary>
            Probability Distribution Estimation Methods.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.ParameterEstimationMethod.MaximumLikelihood">
            <summary>
            Method of maximum likelihood
            </summary>
        </member>
        <member name="F:Numerics.Distributions.ParameterEstimationMethod.MethodOfMoments">
            <summary>
            Method of moments (or product moments)
            </summary>
        </member>
        <member name="F:Numerics.Distributions.ParameterEstimationMethod.MethodOfLinearMoments">
            <summary>
            Method of linear moments (or L-moments)
            </summary>
        </member>
        <member name="F:Numerics.Distributions.ParameterEstimationMethod.MethodOfPercentiles">
            <summary>
            Method of percentiles (or least squares)
            </summary>
        </member>
        <member name="T:Numerics.Distributions.ILinearMomentEstimation">
            <summary>
            An interface for estimation by the method of linear moments.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.ILinearMomentEstimation.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of distribution parameters given the linear moments of the sample.
            </summary>
            <param name="moments">The array of sample linear moments.</param>
        </member>
        <member name="M:Numerics.Distributions.ILinearMomentEstimation.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns an array of linear moments given the distribution parameters.
            </summary>
            <param name="parameters">The list of distribution parameters.</param>
        </member>
        <member name="T:Numerics.Distributions.Pareto">
            <summary>
            The Pareto distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Pareto_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Pareto.#ctor">
            <summary>
            Constructs a Pareto distribution with scale = 1 and shape = 10.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Pareto.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Pareto distribution with the given parameters Xm and α.
            </summary>
            <param name="scale">The scale parameter Xm.</param>
            <param name="shape">The shape parameter α (alpha).</param>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Xm">
            <summary>
            Gets and sets the scale parameter Xm.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Alpha">
            <summary>
            Gets and sets the shape parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Pareto.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pareto.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pareto.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pareto.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pareto.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pareto.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pareto.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pareto.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.PertPercentileZ">
            <summary>
            The Pert percentile z distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
                In probability and statistics, the PERT distribution is a family of continuous probability distributions
                defined by the minimum (a), most likely (b) and maximum (c) values that a variable can take.
                It is a transformation of the four-parameter Beta distribution.
            </para>
            <para>
                This version of the PERT is parameterized using the 5th, 50th, and 95th percentiles in Normal Z space.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/PERT_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.#ctor">
            <summary>
            Constructs a PERT distribution with 5th = 0.05 (z = -1.64), 50th = 0.5 (z = 0.0), and 95th = 0.95 (z = 1.64).
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a PERT distribution with specified 5th, 50th, and 95th percentiles.
            </summary>
            <param name="fifth">The 5th percentile value of the distribution, in Z-space.</param>
            <param name="fiftieth">The 50th percentile value of the distribution, in Z-space..</param>
            <param name="ninetyFifth">The 95th percentile value of the distribution, in Z-space..</param>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Percentile5th">
            <summary>
            Gets and sets the 5th percentile.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Percentile50th">
            <summary>
            Gets and sets the 50th percentile.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Percentile95th">
            <summary>
            Gets and sets the 95th percentile.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PertPercentileZ.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="fifth">The 5th percentile value of the distribution.</param>
            <param name="fiftieth">The 50th percentile value of the distribution.</param>
            <param name="ninetyFifth">The 95th percentile value of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="fifth">The 5th percentile value of the distribution.</param>
            <param name="fiftieth">The 50th percentile value of the distribution.</param>
            <param name="ninetyFifth">The 95th percentile value of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.SolveParameters">
            <summary>
            Solve the PERT parameters (min, mode, max) given the percentiles.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.ToPert">
            <summary>
            Return the Pert-PercentileZ as a Pert distribution.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.ToXElement">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PertPercentileZ.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Create a Pert-Percentile distribution from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize.</param>
            <returns>A new mixture distribution.</returns>
        </member>
        <member name="T:Numerics.Distributions.Poisson">
            <summary>
            The Poisson distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Poisson_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Poisson.#ctor">
            <summary>
            Constructs a Poisson distribution with λ = 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Poisson.#ctor(System.Double)">
            <summary>
            Constructs a Poisson distribution with a given rate λ (lambda).
            </summary>
            <param name="rate">The rate parameter λ (lambda). Range: λ > 0.</param>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Lambda">
            <summary>
            Gets and sets the Poisson's rate parameter λ (lambda). Range: λ > 0.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Poisson.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Poisson.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Poisson.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Poisson.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Poisson.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Poisson.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Poisson.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Poisson.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.IDistribution">
            <summary>
            Simple Distribution Interface.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.IDistribution.DisplayName">
            <summary>
            Returns the display name of the distribution type as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IDistribution.ShortDisplayName">
            <summary>
            Returns the short display name of the distribution as a string.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.IEstimation">
            <summary>
            Distribution Parameter Estimation Interface.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IEstimation.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <summary>
            Estimates and sets the parameters of the underlying distribution given a sample of observations.
            </summary>
            <param name="sample">The array of sample data.</param>
            <param name="estimationMethod">The parameter estimation method.</param>
        </member>
        <member name="T:Numerics.Distributions.IMaximumLikelihoodEstimation">
            <summary>
            An interface for Maximum Likelihood Estimation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IMaximumLikelihoodEstimation.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the initial, lower, and upper values for the distribution parameters for constrained optimization.
            </summary>
            <param name="sample">The array of sample data.</param>
            <returns>Returns a Tuple of initial, lower, and upper values.</returns>
        </member>
        <member name="M:Numerics.Distributions.IMaximumLikelihoodEstimation.MLE(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the distribution parameters using the method of Maximum Likelihood Estimation (MLE).
            </summary>
            <param name="sample">The array of sample data.</param>
            <returns>Returns the MLE parameter set.</returns>
        </member>
        <member name="T:Numerics.Distributions.IMultivariateDistribution">
            <summary>
            Interface for Multivariate Probability Distributions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.IMultivariateDistribution.Dimension">
            <summary>
            Gets the number of variables for the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IMultivariateDistribution.Type">
            <summary>
            Returns the multivariate distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IMultivariateDistribution.ParametersValid">
            <summary>
            Returns a boolean value describing if the current parameters are valid or not.
            If not, an ArgumentOutOfRange exception will be thrown when trying to use statistical functions (e.g. CDF())
            </summary>
        </member>
        <member name="M:Numerics.Distributions.IMultivariateDistribution.PDF(System.Double[])">
            <summary>
            The Probability Density Function (PDF) of the distribution evaluated at a point X.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.IMultivariateDistribution.LogPDF(System.Double[])">
            <summary>
            Returns the natural log of the PDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.IMultivariateDistribution.CDF(System.Double[])">
            <summary>
            The Cumulative Distribution Function (CDF) for the distribution evaluated at a point X.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.IMultivariateDistribution.LogCDF(System.Double[])">
            <summary>
            Returns the natural log of the CDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.IMultivariateDistribution.CCDF(System.Double[])">
            <summary>
            The complement of the CDF. This function is also known as the survival function.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.IMultivariateDistribution.LogCCDF(System.Double[])">
            <summary>
            Returns the natural log of the CCDF.
            </summary>
            <param name="x">The vector of x values.</param>
        </member>
        <member name="T:Numerics.Distributions.IStandardError">
            <summary>
            An interface for calculating the standard error for a probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IStandardError.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <summary>
            Returns a matrix containing the covariances of the parameters given the sample size.
            </summary>
            <param name="sampleSize">The sample size.</param>
            <param name="estimationMethod">The distribution parameter estimation method.</param>
        </member>
        <member name="M:Numerics.Distributions.IStandardError.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <summary>
            Returns the quantile variance given probability and sample size.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <param name="sampleSize">The sample size.</param>
            <param name="estimationMethod">The distribution parameter estimation method.</param>
        </member>
        <member name="M:Numerics.Distributions.IStandardError.QuantileGradient(System.Double)">
            <summary>
            Returns a list of partial derivatives of X given probability with respect to each parameter.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.IStandardError.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <summary>
            Returns the Jacobian matrix of the quantile function with respect to each parameter.
            </summary>
            <param name="probabilities">List of probabilities, must be the same length as the number of distribution parameters.</param>
            <param name="determinant">Output. The determinant of the Jacobian matrix.</param>
        </member>
        <member name="T:Numerics.Distributions.IUnivariateDistribution">
            <summary>
            Interface for Univariate Probability Distributions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Type">
            <summary>
            Returns the univariate distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.NumberOfParameters">
            <summary>
            Returns the number of distribution parameters.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.ParametersToString">
            <summary>
            Returns the distribution parameters in 2-column array of string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.ParameterNamesShortForm">
            <summary>
            Returns the distribution parameter names in short form (e.g. µ, σ) in an array of string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.DisplayLabel">
            <summary>
            Returns a short label of the distribution and parameters as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.GetParameters">
            <summary>
            Returns the distribution parameters in an array of double.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.GetParameterPropertyNames">
            <summary>
            Returns the distribution parameter property names in an array of string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.ParametersValid">
            <summary>
            Returns a boolean value describing if the current parameters are valid or not.
            If not, an ArgumentOutOfRange exception will be thrown when trying to use statistical functions (e.g. CDF())
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.StandardDeviation">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.CoefficientOfVariation">
            <summary>
            Gets the coefficient of variation of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Kurtosis">
            <summary>
            Gets the kurtosis of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.MinimumOfParameters">
            <summary>
            Gets the minimum values allowable for each parameter.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.IUnivariateDistribution.MaximumOfParameters">
            <summary>
            Gets the maximum values allowable for each parameter.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.SetParameters(System.Collections.Generic.IList{System.Double})">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="parameters">Array of parameters.</param>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Validate the distribution parameters.
            </summary>
            <param name="parameters">Array of parameters.</param>
            <param name="throwException">Boolean indicating whether to throw the exception or not.</param>
            <returns>Nothing if the parameters are valid and the exception if invalid parameters were found.</returns>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.PDF(System.Double)">
            <summary>
            The Probability Density Function (PDF) of the distribution evaluated at a point X.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>The probability of X occurring.</returns>
            <remarks>
            The PDF describes the probability that X will occur. Returns the Probability Mass Function (PMF) for discrete distributions.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.LogPDF(System.Double)">
            <summary>
            Returns the natural log of the PDF.
            </summary>
            <param name="x">A single point in the distribution range.</param>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.HF(System.Double)">
            <summary>
            Returns the hazard function (HF) of the distribution evaluated at a point x.
            </summary>
            <param name="x">A single point in the distribution range.</param>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.CDF(System.Double)">
            <summary>
            The Cumulative Distribution Function (CDF) for the distribution evaluated at a point X.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>The non-exceedance probability given a point X.</returns>
            <remarks>
            The CDF describes the cumulative probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.LogCDF(System.Double)">
            <summary>
            Returns the natural log of the CDF.
            </summary>
            <param name="x">A single point in the distribution range.</param>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.CCDF(System.Double)">
            <summary>
            The complement of the CDF. This function is also known as the survival function.
            </summary>
            <param name="x">A single point in the distribution range.</param>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.LogCCDF(System.Double)">
            <summary>
            Returns the natural log of the CCDF.
            </summary>
            <param name="x">A single point in the distribution range.</param>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.InverseCDF(System.Double)">
            <summary>
            The Inverse Cumulative Distribution Function (InvCFD) of the distribution evaluated at a probability.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <returns>
            Returns for a given probability in the probability distribution of a random variable,
            the value at which the probability of the random variable is less than or equal to the
            given probability.
            </returns>
            <remarks>
            This function is also know as the Quantile Function.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.IUnivariateDistribution.GenerateRandomValues(System.Int32,System.Int32)">
            <summary>
            Generate random values of a distribution given a sample size.
            </summary>
            <param name="sampleSize"> Size of random sample to generate. </param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="T:Numerics.Distributions.UnivariateDistributionType">
            <summary>
            Univariate Distribution Types.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.ChiSquared">
            <summary>
            Chi-Squared distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Bernoulli">
            <summary>
            Bernoulli distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Beta">
            <summary>
            Beta distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Binomial">
            <summary>
            Binomial distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Cauchy">
            <summary>
            Cauchy distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.CompetingRisks">
            <summary>
            Competing risks distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Deterministic">
            <summary>
            Deterministic distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Empirical">
            <summary>
            Empirical distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Exponential">
            <summary>
            Exponential distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.GammaDistribution">
            <summary>
            Gamma distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.GeneralizedBeta">
            <summary>
            Generalized Beta distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.GeneralizedExtremeValue">
            <summary>
            Generalized Extreme Value (GEV) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.GeneralizedLogistic">
            <summary>
            Generalized Logistic (GLO) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.GeneralizedNormal">
            <summary>
            Generalized Normal (GNO) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.GeneralizedPareto">
            <summary>
            Generalized Pareto (GPA) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Geometric">
            <summary>
            Geometric distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Gumbel">
            <summary>
            Gumbel (EV1) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.InverseChiSquared">
            <summary>
            Inverse Chi-Squared distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.InverseGamma">
            <summary>
            Inverse Gamma distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.KappaFour">
            <summary>
            Kappa-4 distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.KernelDensity">
            <summary>
            Kernel Density distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.LnNormal">
            <summary>
            Log-Normal (base e) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Logistic">
            <summary>
            Logistic distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.LogNormal">
            <summary>
            Log-Normal distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.LogPearsonTypeIII">
            <summary>
            Log-Pearson Type III (LPIII) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Mixture">
            <summary>
            Mixture distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.NoncentralT">
            <summary>
            Non-central t distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Normal">
            <summary>
            Normal distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Pareto">
            <summary>
            Pareto distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.PearsonTypeIII">
            <summary>
            Pearson Type III (PIII) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Pert">
            <summary>
            PERT distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.PertPercentile">
            <summary>
            PERT-Percentile distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.PertPercentileZ">
            <summary>
            PERT-Percentile Z distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Poisson">
            <summary>
            Poisson distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Rayleigh">
            <summary>
            Rayleigh distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.StudentT">
            <summary>
            Student t distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Triangular">
            <summary>
            Triangular distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.TruncatedNormal">
            <summary>
            Truncated Normal distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Uniform">
            <summary>
            Uniform distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.UniformDiscrete">
            <summary>
            Uniform-Discrete distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.UserDefined">
            <summary>
            User-defined distribution.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionType.Weibull">
            <summary>
            Weibull distribution.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.Exponential">
            <summary>
            The exponential distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Exponential_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Exponential.#ctor">
            <summary>
            Constructs an Exponential distribution with a location of 100 and scale of 10.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Exponential.#ctor(System.Double,System.Double)">
            <summary>
            Constructs an Exponential distribution with a given ξ and α.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Exponential.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Exponential.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
        </member>
        <member name="M:Numerics.Distributions.Exponential.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="parameters">A list of parameters.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Exponential.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Exponential.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.GeneralizedLogistic">
            <summary>
            The generalized logistic distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Generalized_logistic_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.#ctor">
            <summary>
            Constructs a Generalized Logistic distribution with a location of 100, scale of 10, and shape of 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Generalized Logistic distribution with the given parameters ξ, α, and κ.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedLogistic.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.DirectMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Gets the parameters using the direct method of moments. Moments are derived from the real-space data.
            </summary>
            <param name="moments">The array of sample moments.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.SolveForKappa(System.Double)">
            <summary>
            Solve for the shape parameter κ (kappa) given the skewness coefficient.
            </summary>
            <param name="skew">The skewness coefficient</param>
            <returns>
            Kappa
            </returns>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedLogistic.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.GeneralizedPareto">
            <summary>
            The generalized Pareto distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Generalized_Pareto_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.#ctor">
            <summary>
            Constructs an Generalized Pareto distribution with a location of 100, scale of 10, and shape of 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Generalized Pareto (GPA) distribution with the given parameters ξ, α, and κ.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Lambda">
            <summary>
            Gets and sets the average number of peaks per block.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedPareto.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.DirectMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Gets the parameters using the direct method of moments. Moments are derived from the real-space data.
            </summary>
            <param name="moments">The array of sample moments.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.ModifiedMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimate parameters using the modified method of moments.
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.SolveForKappa(System.Double)">
            <summary>
            Solve for the shape parameter κ (kappa) given the skewness coefficient.
            </summary>
            <param name="skew">The skewness coefficient</param>
            <returns>
            Kappa
            </returns>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedPareto.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity">
            <summary>
            The kernel density distribution function.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Kernel_density_estimation" />
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.#ctor">
            <summary>
            Constructs a Gaussian Kernel Density distribution from 30 random samples of a standard Normal distribution using the default bandwidth.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs a Gaussian Kernel Density distribution from a sample of data using the default bandwidth.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.#ctor(System.Collections.Generic.IList{System.Double},Numerics.Distributions.KernelDensity.KernelType)">
            <summary>
            Constructs a Kernel Density distribution from a sample of data with a specified Kernel type using the default bandwidth.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <param name="kernel">The kernel distribution type.</param>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.#ctor(System.Collections.Generic.IList{System.Double},Numerics.Distributions.KernelDensity.KernelType,System.Double)">
            <summary>
            Constructs a Kernel Density distribution from a sample of data with a specified Kernel type and bandwidth.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <param name="kernel">The kernel distribution type.</param>
            <param name="bandwidthParameter">The bandwidth parameter.</param>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity.KernelType">
            <summary>
            Kernel distribution type.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.KernelDensity.KernelType.Epanechnikov">
            <summary>
            Epanechnikov kernel.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.KernelDensity.KernelType.Gaussian">
            <summary>
            Gaussian kernel.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.KernelDensity.KernelType.Triangular">
            <summary>
            Triangular kernel.
            </summary>
        </member>
        <member name="F:Numerics.Distributions.KernelDensity.KernelType.Uniform">
            <summary>
            Uniform kernel.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.SampleData">
            <summary>
            Returns the array of X values. Points On the cumulative curve are specified
            with increasing value and increasing probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.ProbabilityValues">
            <summary>
            Returns the array of probability plotting position values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.KernelDistribution">
            <summary>
            Gets and sets the kernel distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Bandwidth">
            <summary>
            Gets and sets the bandwidth parameter used in the kernel density estimation.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.SampleSize">
            <summary>
            Gets the sample size of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.XTransform">
            <summary>
            Determines the interpolation transform for the sample data X-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.ProbabilityTransform">
            <summary>
            Determines the interpolation transform for the Probability-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.BoundedByData">
            <summary>
            Determines whether to use the data to set the minimum or maximum limits. If false, the limits are the data min and max +- 3 * Bandwidth, respectively. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.GetParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.ComputeMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Set Product (Central) Moments
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.KernelDensity.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity.IKernel">
            <summary>
            Simple interface for kernel functions.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity.EpanechnikovKernel">
            <summary>
            Epanechnikov kernel with a min of -1 and max of 1.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity.GuassianKernel">
            <summary>
            Gaussian kernel with a mean of 0 and standard deviation of 1.
            This is the default kernel.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity.TriangularKernel">
            <summary>
            Triangular kernel with a min of -1, mode of 0, and max of 1.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.KernelDensity.UniformKernel">
            <summary>
            Uniform kernel with a min of -1 and max of 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.BandwidthRule(System.Collections.Generic.IList{System.Double})">
            <summary>
            Gets the default estimate of the bandwidth parameter.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
            <returns>An estimate of the bandwidth parameter.</returns>
            <remarks>
            This method is based on the practical estimation of the bandwidth as
            described here: http://en.wikipedia.org/wiki/Kernel_density_estimation
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.ValidateParameters(System.Double,System.Boolean)">
            <summary>
            Validate the bandwidth parameter.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.SetSampleData(System.Collections.Generic.IList{System.Double})">
            <summary>
            Set the sample data for the distribution.
            </summary>
            <param name="sampleData">Sample of data, no sorting is assumed.</param>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.KernelDensity.CreateCDF">
            <summary>
            Create the empirical CDF.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.BivariateEmpirical">
            <summary>
            The Bivariate Empirical distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.#ctor(Numerics.Data.Transform,Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Constructs an empty Bivariate Empirical CDF.
            </summary>
            <param name="x1Transform">Optional. Linear, logarithmic, or normal z. Default = None. </param>
            <param name="x2Transform">Optional. Linear, logarithmic, or normal z. Default = None. </param>
            <param name="probabilityTransform">Optional. Linear, logarithmic, or normal z. Default = None. </param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double[0:,0:],Numerics.Data.Transform,Numerics.Data.Transform,Numerics.Data.Transform)">
            <summary>
            Constructs a Bivariate Empirical CDF with specified parameters.
            </summary>
            <param name="x1Values">Array of X1 values. The X1-values represent the primary values. There are rows in the table of probability values.</param>
            <param name="x2Values">Array of X2 values. The X2-values represent the secondary values. There are columns in the table of probability values.</param>
            <param name="pValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
            <param name="x1Transform">Optional. Linear, logarithmic, or normal z. Default = None. </param>
            <param name="x2Transform">Optional. Linear, logarithmic, or normal z. Default = None. </param>
            <param name="probabilityTransform">Optional. Linear, logarithmic, or normal z. Default = None. </param>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.X1Values">
            <summary>
            Return the array of X1 values (distribution 1). Points On the cumulative curve are specified
            with increasing value and increasing probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.X2Values">
            <summary>
            Return the array of X2 values (distribution 2). Points on the cumulative curve are specified
            with increasing value and increasing probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.ProbabilityValues">
            <summary>
            Return the array of probability values. Points on the cumulative curve are specified
            with increasing value and increasing probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.X1Transform">
            <summary>
            Determines the interpolation transform for the X1-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.X2Transform">
            <summary>
            Determines the interpolation transform for the X2-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.ProbabilityTransform">
            <summary>
            Determines the interpolation transform for the Probability-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.Dimension">
            <summary>
            Gets the number of variables for the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.Type">
            <summary>
            Returns the multivariate distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.DisplayName">
            <summary>
            Returns the name of the distribution type as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.ShortDisplayName">
            <summary>
            Returns the short display name of the distribution as a string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BivariateEmpirical.ParametersValid">
            <summary>
            Determines whether the parameters are valid or not.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.SetParameters(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double[0:,0:])">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="x1Values">Array of X1 values. The X1-values represent the primary values. There are rows in the table of probability values.</param>
            <param name="x2Values">Array of X2 values. The X2-values represent the secondary values. There are columns in the table of probability values.</param>
            <param name="pValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double[0:,0:],System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="x1Values">Array of X1 values. The X1-values represent the primary values. There are rows in the table of probability values.</param>
            <param name="x2Values">Array of X2 values. The X2-values represent the secondary values. There are columns in the table of probability values.</param>
            <param name="pValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.PDF(System.Double[])">
            <summary>
            The Probability Density Function (PDF) of the distribution evaluated at a point X.
            </summary>
            <param name="x">A point in the distribution space.</param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.PDF(System.Double,System.Double)">
            <summary>
            The Probability Density Function (PDF) of the distribution evaluated at a point X.
            </summary>
            <param name="x1">The x1-value.</param>
            <param name="x2">The x2-value.</param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.CDF(System.Double[])">
            <summary>
            The Cumulative Distribution Function (CDF) for the distribution evaluated at a point X.
            </summary>
            <param name="x">A point in the distribution space.</param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.CDF(System.Double,System.Double)">
            <summary>
            The Cumulative Distribution Function (CDF) for the distribution evaluated at a point X.
            </summary>
            <param name="x1">The x1-value.</param>
            <param name="x2">The x2-value.</param>
        </member>
        <member name="M:Numerics.Distributions.BivariateEmpirical.Clone">
            <summary>
            Creates a copy of the distribution.
            </summary>
        </member>
        <member name="T:Numerics.Distributions.ChiSquared">
            <summary>
            The Chi-Squared (χ²) probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para> 
            <b> Description:</b>
            </para>
            <para>
            In probability theory and statistics, the chi-square distribution (also chi-squared
            or χ²-distribution) with k degrees of freedom Is the distribution of a sum of the
            squares of k independent standard normal random variables. It Is one of the most
            widely used probability distributions in inferential statistics, e.g. in hypothesis
            testing, or in construction of confidence intervals.
            </para>
            <para>
            <b>References: </b>
            <list type="bullet">
            <item><description>
            Wikipedia contributors, "Chi-squared distribution,". Wikipedia, The Free
            Encyclopedia. Available at: <see href="https://en.wikipedia.org/wiki/Chi-squared_distribution"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.#ctor">
            <summary>
            Constructs a Chi-Squared distribution with 10 degrees of freedom.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.#ctor(System.Int32)">
            <summary>
            Constructs a Chi-Squared distribution with given degrees of freedom.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom for the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.DegreesOfFreedom">
            <summary>
            Gets and sets the degrees of freedom ν (nu) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.ChiSquared.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.SetParameters(System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="v">The degrees of freedom ν (nu). Range: ν > 0.</param>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.ValidateParameters(System.Int32,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom for the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.ChiSquared.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.UnivariateDistributionFactory">
            <summary>
            A univariate distribution factory class.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionFactory.CreateDistribution(Numerics.Distributions.UnivariateDistributionType)">
            <summary>
            Create a distribution based on the distribution type.
            </summary>
            <param name="distributionType">Distribution type.</param>
            <returns>
            A univariate distribution.
            </returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionFactory.CreateDistribution(System.Xml.Linq.XElement)">
            <summary>
            Create a distribution from XElement.
            </summary>
            <param name="xElement">The XElement to deserialize into a univariate distribution.</param>
            <returns>
            A univariate distribution.
            </returns>
        </member>
        <member name="T:Numerics.Distributions.Deterministic">
            <summary>
            Deterministic point value estimate.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            This is used in cases, such as event tree analysis, to represent a value or event with a single probability estimate.
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.#ctor">
            <summary>
            Constructs a deterministic distribution with default value of 0.5.
            </summary>
            <remarks>
            This is used in cases, such as event tree analysis, to represent a value or event with a single probability estimate.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.#ctor(System.Double)">
            <summary>
            Constructs a deterministic distribution.
            </summary>
            <param name="deterministicValue">The constant value.</param>
            <remarks>
            This is used in cases, such as event tree analysis, to represent a value or event with a single probability estimate.
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Value">
            <summary>
            Gets and sets the point value estimate.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Median">
            <summary>
            Gets the median of the distribution. Not supported.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Minimum">
            <summary>
            Gets the minimum of the distribution. Not supported.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Deterministic.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.SetParameters(System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="value">The point value estimate.</param>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.CreatePDFGraph">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Deterministic.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Logistic">
            <summary>
            The logistic distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Logistic_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Logistic.#ctor">
            <summary>
            Constructs a Logistic distribution with a location of 0 and scale of 0.1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Logistic.#ctor(System.Double,System.Double)">
            <summary>
            Constructs an Logistic distribution with a given ξ and α.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Logistic.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Logistic.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
        </member>
        <member name="M:Numerics.Distributions.Logistic.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Logistic.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.LogPearsonTypeIII">
            <summary>
            The log-Pearson Type III distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "http://mathworld.wolfram.com/PearsonTypeIIIDistribution.html" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.#ctor">
            <summary>
            Constructs a log-Pearson Type III distribution with a mean (of log) of 3, std dev (of log) of 0.5, and skew (of log) of 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a log-Pearson Type III distribution with the given moments (of log) µ, σ, and γ.
            </summary>
            <param name="meanOfLog">The mean of the log transformed data.</param>
            <param name="standardDeviationOfLog">The standard deviation of the log transformed data.</param>
            <param name="skewOfLog">The skew of the log transformed data.</param>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Mu">
            <summary>
            Gets and sets the Mean (of log) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Sigma">
            <summary>
            Gets and sets the Standard Deviation (of log) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Gamma">
            <summary>
            Gets and sets the Skew (of log) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Xi">
            <summary>
            Gets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Beta">
            <summary>
            Gets and sets the scale parameter β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Alpha">
            <summary>
            Gets and sets the shape parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Base">
            <summary>
            Gets and sets the base of the logarithm
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.K">
            <summary>
            Gets the log correction factor.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogPearsonTypeIII.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters based on the moments of the log transformed data.
            </summary>
            <param name="meanOfLog">The mean of the log transformed data.</param>
            <param name="standardDeviationOfLog">The standard deviation of the log transformed data.</param>
            <param name="skewOfLog">The skew of the log transformed data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="mu">The mean of the log transformed data.</param>
            <param name="sigma">The standard deviation of the log transformed data.</param>
            <param name="gamma">The skew of the log transformed data.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.IndirectMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            The indirect method of moments derives the moments from the log transformed data.
            This method was proposed by the U.S. Water Resources Council (WRC, 1967).
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.IndirectMethodOfLinearMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            The indirect method of moments derives the moments from the log transformed data.
            This method was proposed by the U.S. Water Resources Council (WRC, 1967).
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.WilsonHilfertyInverseCDF(System.Double)">
            <summary>
            Returns the inverse CDF using the modified Wilson-Hilferty transformation.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <remarks>
            Cornish-Fisher transformation (Fisher and Cornish, 1960) for abs(skew) less than or equal to 2. If abs(skew) > 2 then use Modified Wilson-Hilferty transformation (Kirby,1972).
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.QuantileGradientForMoments(System.Double)">
            <summary>
            Returns a list of partial derivatives of X given probability with respect to each moment.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.LogPearsonTypeIII.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Pert">
            <summary>
            The PERT probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
                In probability and statistics, the PERT distribution is a family of continuous probability distributions
                defined by the minimum (a), most likely (b) and maximum (c) values that a variable can take.
                It is a transformation of the four-parameter Beta distribution.
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            Wikipedia contributors, "PERT distribution,". Wikipedia, The Free
            Encyclopedia. Available at: <see href="https://en.wikipedia.org/wiki/PERT_distribution"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Pert.#ctor">
            <summary>
            Constructs a PERT distribution with min = 0.0, max = 1.0, and mode = 0.5.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Pert.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a PERT distribution with specified min, max, and mode.
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.Pert.Beta">
            <summary>
            Gets the underlying Generalized Beta distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Pert.Min">
            <summary>
            Get and set the min of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Pert.MostLikely">
            <summary>
            Get and set the mode of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Pert.Max">
            <summary>
            Get and set the max of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Pert.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Pert.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.Pert.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Pert.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Pert.Clone">
            <inheritdoc/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Numerics.Distributions.EmpiricalDistribution" -->
        <member name="M:Numerics.Distributions.EmpiricalDistribution.#ctor">
            <summary>
            Constructs a Univariate Empirical CDF with default X {-0.5, 0, 0.5} and P values {0.1, 0.5, 0.9} and min = -1 and max = 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs a Univariate Empirical CDF with specified parameters.
            </summary>
            <param name="XValues">Array of X values.</param>
            <param name="PValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Data.SortOrder,Numerics.Data.SortOrder)">
            <summary>
            Constructs a Univariate Empirical CDF with specified parameters.
            </summary>
            <param name="XValues">Array of X values.</param>
            <param name="PValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
            <param name="XOrder">Sort order of X values.</param>
            <param name="probabilityOrder">Sort order of probability values.</param>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.#ctor(Numerics.Data.OrderedPairedData)">
            <summary>
            Constructs a Univariate Empirical CDF from ordered paired data.
            </summary>
            <param name="orderedPairedData">The ordered paired data.</param>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.#ctor(System.Collections.Generic.IList{System.Double},Numerics.Data.Statistics.PlottingPositions.PlottingPostionType)">
            <summary>
            Constructs a Univariate Empirical CDF from sample data.
            </summary>
            <param name="sample"></param>
            <param name="plottingPostionType">The plotting position formula type. Default = Weibull.</param>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.XValues">
            <summary>
            Returns the array of X values. Points On the cumulative curve are specified
            with increasing value and increasing probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.ProbabilityValues">
            <summary>
            Returns the array of probability values. Points on the cumulative curve are specified
            with increasing value and increasing probability.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.XValueOrder">
            <summary>
            Returns the sort order of the X-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.ProbabilityOrder">
            <summary>
            Returns the sort order of the Probability-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.XTransform">
            <summary>
            Determines the interpolation transform for the X-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.ProbabilityTransform">
            <summary>
            Determines the interpolation transform for the Probability-values.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.GetParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.ComputeMoments">
            <summary>
            Compute central moments of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.EmpiricalDistribution.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.SetParameters(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="xValues">Array of X values.</param>
            <param name="pValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.SetParameters(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Data.SortOrder,Numerics.Data.SortOrder)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="xValues">Array of X values.</param>
            <param name="pValues">Array of probability values. Range 0 ≤ p ≤ 1.</param>
            <param name="XOrder">Sort order of X values.</param>
            <param name="probabilityOrder">Sort order of probability values.</param>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.PDF(System.Double,System.Double)">
            <summary>
            Returns the Probability Density Function (PDF) of the distribution.
            </summary>
            <param name="xl">Lower x value.</param>
            <param name="xu">Upper x value</param>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.EmpiricalDistribution.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.GeneralizedBeta">
            <summary>
            The four-parameter Beta distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Beta_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.#ctor">
            <summary>
            Constructs a Beta distribution with α and β = 2, defined in the interval (0,1).
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Beta distribution with the given parameters α and β, defined in the interval (0,1).
            </summary>
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Beta distribution with the given parameters α, β, a and b, defined in the interval (a,b).
            </summary>
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.PERT(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Beta distribution using the PERT estimation method with the parameters a, b, and mode, defined in the interval (a,b).
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
            <returns>
            A Beta distribution parameterized using the PERT method.
            </returns>
            <remarks>
            <see href = "https://en.wikipedia.org/wiki/PERT_distribution" />
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.PERT(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Beta distribution using the PERT estimation method with the parameters a, b, mode and λ, defined in the interval (a,b).
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
            <param name="scale">The scale parameter λ (lambda). Default is 4.</param>
            <returns>
            A Beta distribution parameterized using the PERT method.
            </returns>
            <remarks>
            <see href = "https://en.wikipedia.org/wiki/PERT_distribution" />
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Alpha">
            <summary>
            Gets and sets the shape parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Beta">
            <summary>
            Gets and sets the shape parameter β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Min">
            <summary>
            Get and set the min of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Max">
            <summary>
            Get and set the max of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedBeta.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.SetParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name ="alpha"> The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.SetParametersFromMoments(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="mu"></param>
            <param name="sigma"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.ValidateParameters(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name ="alpha"> The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedBeta.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.LogNormal">
            <summary>
            The Log-Normal probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.#ctor">
            <summary>
            Constructs a Log-Normal distribution with a mean (of log) of 3 and standard deviation (of log) of 0.5
            </summary>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Log-Normal distribution with given mean (of log) and standard deviation (of log).
            </summary>
            <param name="meanOfLog">The mean of the log transformed data.</param>
            <param name="standardDeviationOfLog">The standard deviation of the log transformed data.</param>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Mu">
            <summary>
            Gets and sets the location parameter µ (Mu).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Base">
            <summary>
            Gets and sets the base of the logarithm
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.K">
            <summary>
            Gets the log correction factor.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LogNormal.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters based on the moments of the log transformed data.
            </summary>
            <param name="meanOfLog">The mean of the log transformed data.</param>
            <param name="standardDeviationOfLog">The standard deviation of the log transformed data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="mu">The mean (of log).</param>
            <param name="sigma">The standard deviation (of log).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.IndirectMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            The indirect method of moments derives the moments from the log transformed data.
            This method was proposed by the U.S. Water Resources Council (WRC, 1967).
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.IndirectMethodOfLinearMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            The indirect method of moments derives the moments from the log transformed data.
            This method was proposed by the U.S. Water Resources Council (WRC, 1967).
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.DirectMethodOfMoments(System.Double,System.Double)">
            <summary>
            Sets the parameters using the direct method of moments. Moments are derived from the real-space data.
            </summary>
            <param name="mean">The real-space mean of the data.</param>
            <param name="standardDeviation">The real-space standard deviation of the data.</param>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.MonteCarloConfidenceIntervals(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Get confidence intervals using Monte Carlo simulation.
            </summary>
            <param name="sampleSize">The data sample size N used for computing the standard error.</param>
            <param name="realizations">The number of Monte Carlo realizations.</param>
            <param name="quantiles">List of exceedance probabilities for output frequency curves.</param>
            <param name="percentiles">List of confidence percentiles for confidence interval output.</param>
            <remarks>
            This is the same sampling approach as used in HEC-FDA.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LogNormal.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.StudentT">
            <summary>
            The Student's t probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Student%27s_t-distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.StudentT.#ctor">
            <summary>
            Constructs a standard Student's t distribution with 10 degrees of freedom.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.StudentT.#ctor(System.Double)">
            <summary>
            Constructs a standard Student's t distribution with a given degrees of freedom.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom.</param>
        </member>
        <member name="M:Numerics.Distributions.StudentT.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Student's t distribution with a given location, scale, and degrees of freedom.
            </summary>
            <param name="location">The location parameter.</param>
            <param name="scale">The scale parameter.</param>
            <param name="degreesOfFreedom">The degrees of freedom.</param>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Mu">
            <summary>
            Gets and sets the location parameter µ (Mu).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.StudentT.DegreesOfFreedom">
            <summary>
            Gets and sets the degrees of freedom ν (nu) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.StudentT.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.StudentT.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.StudentT.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="mu">The location µ (Mu).</param>
            <param name="sigma">The scale σ (sigma). Range: σ > 0.</param>
            <param name="v">The degrees of freedom ν (nu). Range: ν > 0.</param>
        </member>
        <member name="M:Numerics.Distributions.StudentT.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.StudentT.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter µ (Mu).</param>
            <param name="scale">The scale parameter σ (sigma).</param>
            <param name="v">The degrees of freedom ν (nu).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.StudentT.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.StudentT.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.StudentT.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.StudentT.InverseCDF(System.Double)">
            <inheritdoc/>
            <remarks>
            This function is also know as the Quantile Function.
            <para>
            References:
            This code was copied from the Accord Math Library.
            <list type="bullet">
            <item><description>
            Accord Math Library, http://accord-framework.net
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.StudentT.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.TruncatedNormal">
            <summary>
            The Truncated Normal (Gaussian) probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            Wikipedia contributors, "Truncated Normal distribution,". Wikipedia, The Free
            Encyclopedia. Available at: <see href="https://en.wikipedia.org/wiki/Truncated_normal_distribution"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.#ctor">
            <summary>
            Constructs a Truncated Normal (Gaussian) distribution with a mean of 0.5 and standard deviation of 0.1.
            Min is set to 0.0 and max is set to 1.0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Normal (Gaussian) distribution with given mean, standard deviation, min and max.
            </summary>
            <param name="mean">Mean of the distribution.</param>
            <param name="standardDeviation">Standard deviation of the distribution.</param>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Mu">
            <summary>
            Gets and sets the location parameter µ (Mu).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Min">
            <summary>
            Get and set the min of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Max">
            <summary>
            Get and set the max of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Skewness">
            <inheritdoc/>
            <remarks>
            Reference: Pearson diagrams for truncated normal and truncated Weibull distributions. Sugiura, Gomi. 1985.
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.TruncatedNormal.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.SetParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="mean">Mean of the distribution.</param>
            <param name="standardDeviation">Standard deviation of the distribution.</param>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.ValidateParameters(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="mean">Mean of the distribution.</param>
            <param name="standardDeviation">Standard deviation of the distribution.</param>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.TruncatedNormal.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.LnNormal">
            <summary>
            The Ln-Normal (Galton) probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            Wikipedia contributors, "Log-normal distribution,". Wikipedia, The Free
            Encyclopedia. Available at: <see href="https://en.wikipedia.org/wiki/Log-normal_distribution"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.#ctor">
            <summary>
            Constructs a Ln-Normal distribution with a mean of 10 and standard deviation of 10.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Ln-Normal (Galton) distribution with given mean and standard deviation.
            </summary>
            <param name="mean">The mean of the distribution.</param>
            <param name="standardDeviation">The standard deviation of the distribution.</param>
            <remarks>
            Enter the real-space mean and standard deviation of the distribution. The two parameters μ and σ are not
            location and scale parameters for a log-normally distributed random variable X, but they are respectively
            location and scale parameters for the normally distributed logarithm ln(X).
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Mu">
            <summary>
            Gets and sets the location parameter µ (Mu).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.LnNormal.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters using the "direct method."
            </summary>
            <param name="mean">The mean of the distribution.</param>
            <param name="standardDeviation">The standard deviation of the distribution.</param>
            <remarks>
            The direct method for setting parameters is used so that users can set the parameters directly
            from real-space data, which is more intuitive.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="mean">Mean.</param>
            <param name="standardDeviation">Standard deviation.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.IndirectMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            The indirect method of moments derives the moments from the log transformed data.
            This method was proposed by the U.S. Water Resources Council (WRC, 1967).
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.IndirectMethodOfLinearMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            The indirect method of moments derives the moments from the log transformed data.
            This method was proposed by the U.S. Water Resources Council (WRC, 1967).
            </summary>
            <param name="sample">The array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.DirectMethodOfMoments(System.Double,System.Double)">
            <summary>
            Sets the parameters using the direct method of moments. Moments are derived from the real-space data.
            </summary>
            <param name="mean">The real-space mean of the data.</param>
            <param name="standardDeviation">The real-space standard deviation of the data.</param>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.LnNormal.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.UniformDiscrete">
            <summary>
            The uniform (discrete) distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Discrete_uniform_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.#ctor">
            <summary>
            Constructs a Uniform (discrete) distribution with min = 0 and max = 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Uniform (discrete) distribution with specified min and max.
            </summary>
            <param name="min">The min of the distribution.</param>
            <param name="max">The max of the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Min">
            <summary>
            Get and set the min of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Max">
            <summary>
            Get and set the max of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.N">
            <summary>
            Returns the sample size.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UniformDiscrete.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="min">The min of the distribution.</param>
            <param name="max">The max of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="min">The min of the distribution.</param>
            <param name="max">The max of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UniformDiscrete.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.NoncentralT">
            <summary>
            The Noncentral t probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Noncentral_t-distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.#ctor">
            <summary>
            Constructs a Noncentral t distribution with 10 degrees of freedom and noncentrality = 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Noncentral t distribution with given degrees of freedom and noncentrality.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom.</param>
            <param name="noncentrality">The noncentrality parameter.</param>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.DegreesOfFreedom">
            <summary>
            Gets and sets the degrees of freedom ν (nu) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Noncentrality">
            <summary>
            Gets and sets the noncentrality parameter μ (mu) of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.NoncentralT.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="v">The degrees of freedom ν (nu). Range: ν > 0.</param>
            <param name="mu">The noncentrality parameter μ (mu).</param>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="v">The degrees of freedom ν (nu). Range: ν > 0.</param>
            <param name="mu">The noncentrality parameter μ (mu).</param>
            <param name="throwException"></param>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.NCT_CDF(System.Double,System.Double,System.Double)">
            <summary>
            Cumulative probability at T of the non-central t-distribution
            with DF degrees of freedom (may be fractional) and non-centrality
            parameter DELTA.
            </summary>
            <param name="t">A single point in the distribution range.</param>
            <param name="df">The degrees of freedom.</param>
            <param name="delta">The noncentrality parameter.</param>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.NCTDist(System.Double,System.Double,System.Double)">
            <summary>
            Cumulative probability at T of the non-central t-distribution
            with DF degrees of freedom (may be fractional) and non-centrality
            parameter DELTA.
            </summary>
            <param name="t">A single point in the distribution range.</param>
            <param name="df">The degrees of freedom.</param>
            <param name="delta">The noncentrality parameter.</param>
            <remarks>
            The function is based on ALGORITHM AS 243  APPL. STATIST. (1989), VOL.38, NO. 1.
            Original FORTRAN code can be found at:
            http://people.sc.fsu.edu/~jburkardt/f77_src/asa243/asa243.html
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.NCT_INV(System.Double,System.Double,System.Double)">
            <summary>
            The inverse of the non-central t distribution
            </summary>
            <param name="p">Probability between 0 and 1.</param>
            <param name="df">The degrees of freedom.</param>
            <param name="delta">The noncentrality parameter.</param>
        </member>
        <member name="M:Numerics.Distributions.NoncentralT.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.BootstrapAnalysis">
            <summary>
            A class for performing the bootstrap uncertainty analysis.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Bootstrapping_(statistics)" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.#ctor(Numerics.Distributions.IUnivariateDistribution,Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a new Bootstrap Analysis.
            </summary>
            <param name="distribution">The univariate distribution to bootstrap.</param>
            <param name="estimationMethod">The parameter estimation method.</param>
            <param name="sampleSize">Size of the bootstrap sample to generate.</param>
            <param name="replications">The number of bootstrap replications to be sampled.</param>
            <param name="seed">Optional. Seed for random number generator. Default = 12345.</param>
        </member>
        <member name="P:Numerics.Distributions.BootstrapAnalysis.EstimationMethod">
            <summary>
            The distribution parameter estimation method.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BootstrapAnalysis.Distribution">
            <summary>
            The univariate distribution to bootstrap.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BootstrapAnalysis.SampleSize">
            <summary>
            Size of the bootstrap sample to generate.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BootstrapAnalysis.Replications">
            <summary>
            The number of bootstrap replications to be sampled.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.BootstrapAnalysis.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.Distributions">
            <summary>
            Bootstrap a list of fitted distributions.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.Distributions(Numerics.Mathematics.Optimization.ParameterSet[])">
            <summary>
            Return a list of distributions given an array of parameter sets.
            </summary>
            <param name="parameterSets">An array of parameter sets.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.Parameters(Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap an array of distribution parameters.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.ParameterSets(Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap an array of distribution parameter sets.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.ProductMoments">
            <summary>
            Bootstrap a list of product moments for each bootstrapped sample.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.LinearMoments">
            <summary>
            Bootstrap a list of linear moments for each bootstrapped sample.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.Quantiles(System.Collections.Generic.IList{System.Double})">
            <summary>
            Bootstrap a list of quantiles given the input non-exceedance probabilities.
            </summary>
            <param name="probabilities">List of non-exceedance probabilities.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.Probabilities(System.Collections.Generic.IList{System.Double})">
            <summary>
            Bootstrap a list of non-exceedance probabilities given the input quantile values.
            </summary>
            <param name="quantiles">List quantile values.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.Estimate(System.Collections.Generic.IList{System.Double},System.Double,Numerics.Distributions.IUnivariateDistribution[],System.Boolean)">
            <summary>
            Bootstrap full uncertainty analysis results using the percentile method.
            </summary>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
            <param name="recordParameterSets">Optional. Determines whether to record parameter sets. Default = true.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.ExpectedProbabilities(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap the expected non-exceedance probabilities given the input quantile values. Returns the x-values interpolated from the list of desired non-exceedance probabilities.
            </summary>
            <param name="quantiles">List quantile values.</param>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.ExpectedProbabilities(System.Collections.Generic.IList{System.Double},Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap the expected non-exceedance probabilities given the input quantile values.
            </summary>
            <param name="quantiles">List quantile values.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.ComputeMinMaxQuantiles(System.Double,System.Double,Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Returns the min and max quantiles from a bootstrap analysis.
            </summary>
            <param name="minProbability">The minimum probability to compute quantiles.</param>
            <param name="maxProbability">The maximum probability to compute quantiles.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.PercentileQuantileCI(System.Collections.Generic.IList{System.Double},System.Double,Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap confidence intervals for a list of quantiles using the percentile method.
            </summary>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.BiasCorrectedQuantileCI(System.Collections.Generic.IList{System.Double},System.Double,Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap confidence intervals for a list of quantiles using the bias-corrected percentile method.
            </summary>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.NormalQuantileCI(System.Collections.Generic.IList{System.Double},System.Double,Numerics.Distributions.IUnivariateDistribution[])">
            <summary>
            Bootstrap confidence intervals for a list of quantiles using the Normal, or standard method.
            </summary>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
            <param name="distributions">Optional. Pass in an array of bootstrapped distributions. Default = null.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.BCaQuantileCI(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Bootstrap confidence intervals for a list of quantiles using the bias-corrected and accelerated (BCa) percentile method.
            </summary>
            <param name="sampleData">Sample of data.</param>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.AccelerationConstants(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the acceleration constants for each probability.
            </summary>
            <param name="sampleData">Sample of data.</param>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="thetaHats">The list of best-estimate quantiles.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.BootstrapTQuantileCI(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Bootstrap confidence intervals for a list of quantiles using the Bootstrap-t method.
            </summary>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.Distributions.BootstrapAnalysis.StandardError(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the standard error for each probability.
            </summary>
            <param name="sampleData">Sample of data.</param>
            <param name="probabilities">List of non-exceedance probabilities.</param>
            <param name="thetaHats">The list of best-estimate quantiles.</param>
        </member>
        <member name="T:Numerics.Distributions.GammaDistribution">
            <summary>
            Gamma distribution.
            </summary>
            <remarks>
            <para>
                <b>Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description:</b>
            </para>
            <para>
            The gamma distribution is a two-parameter family of continuous probability
            distributions. There are three different parameterizations in common use:</para>
            <list type="bullet">
            <item><description>
            With a shape parameter k and a
            scale parameter θ.</description></item>
            <item><description>
            With a shape parameter α = k and an inverse scale parameter
            β = 1/θ, called a rate parameter.</description></item>
            <item><description>
            With a shape parameter k and a mean
            parameter μ = k/β.</description></item>
            </list>
            <para>
            In each of these three forms, both parameters are positive real numbers. The
            parameterization with k and θ appears to be more common in econometrics and
            certain other applied fields, where e.g. the gamma distribution is frequently
            used to model waiting times. For instance, in life testing, the waiting time
            until death is a random variable that is frequently modeled with a gamma
            distribution. This is the default construction method for this class.
            </para>
            <para>
            This class only uses the parameterization described in the first bullet.
            </para>
            <para>
            If k is an integer, then the distribution represents an Erlang distribution; i.e.,
            the sum of k independent exponentially distributed random variables, each of which
            has a mean of θ (which is equivalent to a rate parameter of 1/θ).
            </para>
            <para>
            The gamma distribution is the maximum entropy probability distribution for a random
            variable X for which E[X] = kθ = α/β is fixed and greater than zero, and <c>E[ln(X)] =
            ψ(k) + ln(θ) = ψ(α) − ln(β)</c> is fixed (ψ is the digamma function).
            </para>
            <para>
            <b> References: </b>
            This code was developed using two primary sources: 1) Wikipedia; and 2) the Accord Math Library.
            <list type="bullet">
            <item><description>
            Wikipedia, The Free Encyclopedia. Gamma distribution. Available on:
            <see href="http://en.wikipedia.org/wiki/Gamma_distribution"/>
            </description></item>
            <item><description>
            Accord Math Library, <see href="http://accord-framework.net"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.#ctor">
            <summary>
            Constructs a Gamma distribution with scale θ = 10 and shape κ = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Gamma distribution with given parameters θ and shape κ.
            </summary>
            <param name="scale">The scale parameter θ (theta).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Theta">
            <summary>
            Gets and sets the scale parameter θ (theta).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Rate">
            <summary>
            Gets the inverse scale parameter of the distribution, β = 1/θ.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GammaDistribution.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="scale">The scale parameter θ (theta).</param>
            <param name="shape">The shape parameter k.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="scale">The scale parameter θ (theta).</param>
            <param name="shape">The shape parameter k.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.MLE_NR(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates parameters using a Newton-Raphson method.
            </summary>
            <param name="sample">Array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.MLE_Bobee(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates parameters using an approximation proposed by Bobee.
            </summary>
            <param name="sample">Array of sample data.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.WilsonHilfertyInverseCDF(System.Double)">
            <summary>
            Returns the inverse CDF using the modified Wilson-Hilferty transformation.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <remarks>
            Cornish-Fisher transformation (Fisher and Cornish, 1960) for abs(skew) less than or equal to 2. If abs(skew) > 2 then use Modified Wilson-Hilferty transformation (Kirby,1972).
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.FrequencyFactorKp(System.Double,System.Double)">
            <summary>
            Gets the K frequency factor given the skewness coefficient through Cornish-Fisher transformation (Fisher and Cornish, 1960) for abs(skew) less than or equal to 2.
            If abs(skew) > 2 then use Modified Wilson-Hilferty transformation (Kirby,1972).
            </summary>
            <param name="skewness">Coefficient of skewness.</param>
            <param name="probability">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.PartialKp(System.Double,System.Double)">
            <summary>
            Gets the partial derivative of the frequency factor Kp with respect to skew.
            </summary>
            <param name="skewness">Coefficient of skewness.</param>
            <param name="probability">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.Clone">
            <summary>
            Creates a copy of the distribution.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <summary>
            The quantile variance given probability and sample size.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <param name="sampleSize">The sample size.</param>
            <param name="estimationMethod">The distribution parameter estimation method.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.PartialforTheta(System.Double)">
            <summary>
            Partial derivative with respect to theta.
            </summary>
            <param name="probability">The probability to evaluate.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.PartialforKappa(System.Double)">
            <summary>
            Partial derivative with respect to kappa.
            </summary>
            <param name="probability">The probability to evaluate.</param>
        </member>
        <member name="M:Numerics.Distributions.GammaDistribution.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Triangular">
            <summary>
            The Triangular probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References:</b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Triangular_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Triangular.#ctor">
            <summary>
            Constructs a Triangular distribution with min = 0.0, max = 1.0, and mode = 0.5.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Triangular.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Triangular distribution with specified min, max, and mode.
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
            <remarks>
            In probability theory and statistics, the triangular distribution is a continuous probability distribution
            with lower limit a, upper limit b and mode c.
            </remarks>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Min">
            <summary>
            Get and set the min of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Triangular.MostLikely">
            <summary>
            Get and set the mode of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Max">
            <summary>
            Get and set the max of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Triangular.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Triangular.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.Triangular.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="min">The minimum possible value of the distribution.</param>
            <param name="mode">The mode, or most likely, value of the distribution.</param>
            <param name="max">The maximum possible value of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Triangular.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Triangular.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Uniform">
            <summary>
            The Uniform probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)#Probability_density_function" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Uniform.#ctor">
            <summary>
            Constructs a Uniform distribution with min = 0 and max = 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Uniform.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Uniform distribution with specified min and max.
            </summary>
            <param name="min">The min of the distribution.</param>
            <param name="max">The max of the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Min">
            <summary>
            Get and set the min of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Max">
            <summary>
            Get and set the max of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Uniform.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Uniform.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Uniform.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="min">The min of the distribution.</param>
            <param name="max">The max of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.Uniform.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Uniform.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="min">The min of the distribution.</param>
            <param name="max">The max of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Uniform.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Uniform.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Uniform.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Uniform.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Uniform.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Rayleigh">
            <summary>
            The Rayleigh probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References:</b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Rayleigh_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.#ctor">
            <summary>
            Constructs a Rayleigh distribution with a scale (σ) = 10.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.#ctor(System.Double)">
            <summary>
            Constructs a Rayleigh distribution with a specified scale (σ).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Rayleigh.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.SetParameters(System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="scale">The scale parameter σ (sigma).</param>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.ValidateParameters(System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="scale">The scale parameter σ (sigma).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Rayleigh.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Weibull">
            <summary>
            The Weibull probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Weibull_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Weibull.#ctor">
            <summary>
            Constructs a Weibull distribution with scale = 10 and shape = 2.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Weibull distribution with the given parameters λ and k.
            </summary>
            <param name="scale">The scale parameter λ (lambda). Range: λ > 0.</param>
            <param name="shape">The shape parameter κ (kappa). Range: k > 0.</param>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Lambda">
            <summary>
            Gets and sets the scale parameter λ (lambda).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Weibull.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Weibull.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="scale">The scale parameter λ (lambda). Range: λ > 0.</param>
            <param name="shape">The shape parameter κ (kappa). Range: k > 0.</param>
        </member>
        <member name="M:Numerics.Distributions.Weibull.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="scale">The scale parameter λ (lambda). Range: λ > 0.</param>
            <param name="shape">The shape parameter κ (kappa). Range: k > 0.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Weibull.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.SolveMLE(System.Collections.Generic.IList{System.Double})">
            <summary>
            The Maximum Likelihood Estimation method for the Weibull distribution.
            </summary>
            <param name="samples">The array of sample data.</param>
            <remarks>
            Implemented according to: Parameter estimation of the Weibull probability distribution, 1994, Hongzhu Qiao, Chris P. Tsokos
            <para>
            References:
            This code was copied and modified from the Math.NET Library.
            <list type="bullet">
            <item><description>
            Math.NET Numerics Library, http://numerics.mathdotnet.com
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Weibull.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Weibull.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.PearsonTypeIII">
            <summary>
            The Pearson Type III distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "http://mathworld.wolfram.com/PearsonTypeIIIDistribution.html" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.#ctor">
            <summary>
            Constructs a Pearson Type III distribution with a mean of 100, standard deviation of 10, and skew = 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Pearson Type III distribution with the given moments (of log) µ, σ, and γ.
            </summary>
            <param name="mean">The mean of the data.</param>
            <param name="standardDeviation">The standard deviation of the data.</param>
            <param name="skew">The skew of the data.</param>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Mu">
            <summary>
            Gets and sets the Mean of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Sigma">
            <summary>
            Gets and sets the Standard Deviation of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Gamma">
            <summary>
            Gets and sets the Skew of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Xi">
            <summary>
            Gets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Beta">
            <summary>
            Gets and sets the scale parameter β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Alpha">
            <summary>
            Gets and sets the shape parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.PearsonTypeIII.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters based on the moments of the data.
            </summary>
            <param name="mean">The mean of the data.</param>
            <param name="standardDeviation">The standard deviation of the data.</param>
            <param name="skew">The skew of the data.</param>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="mu">The mean of the distribution.</param>
            <param name="sigma">The standard deviation of the distribution.</param>
            <param name="gamma">The skew of the distribution.</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.WilsonHilfertyInverseCDF(System.Double)">
            <summary>
            Returns the inverse CDF using the modified Wilson-Hilferty transformation.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
            <remarks>
            Cornish-Fisher transformation (Fisher and Cornish, 1960) for abs(skew) less than or equal to 2. If abs(skew) > 2 then use Modified Wilson-Hilferty transformation (Kirby,1972).
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.QuantileGradientForMoments(System.Double)">
            <summary>
            Returns a list of partial derivatives of X given probability with respect to each moment.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.PearsonTypeIII.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Normal">
            <summary>
            The Normal (Gaussian) probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            Wikipedia contributors, "Normal distribution,". Wikipedia, The Free
            Encyclopedia. Available at: <see href="https://en.wikipedia.org/wiki/Normal_distribution"/>
            </description></item>
            <item><description>
            Accord Math Library, <see href="http://accord-framework.net"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Normal.#ctor">
            <summary>
            Constructs a Normal (Gaussian) distribution with a mean of 0 and standard deviation of 1.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Normal.#ctor(System.Double)">
            <summary>
            Constructs a Normal (Gaussian) distribution with a given mean and a standard deviation of 1.
            </summary>
            <param name="mean">Mean of the distribution.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Normal (Gaussian) distribution with given mean and standard deviation.
            </summary>
            <param name="mean">Mean of the distribution.</param>
            <param name="standardDeviation">Standard deviation of the distribution.</param>
        </member>
        <member name="P:Numerics.Distributions.Normal.Mu">
            <summary>
            Gets and sets the location parameter µ (Mu).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Normal.Sigma">
            <summary>
            Gets and sets the scale parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Normal.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Normal.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter µ (Mu).</param>
            <param name="scale">The scale parameter σ (sigma).</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter µ (Mu).</param>
            <param name="scale">The scale parameter σ (sigma).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.r8_normal_01_cdf_inverse(System.Double)">
            <summary>
            R8_NORMAL_01_CDF_INVERSE inverts the standard normal CDF.
            </summary>
            <param name="p">The probability value.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.r8poly_value(System.Int32,System.Double[],System.Double)">
            <summary>
            R8POLY_VALUE evaluates a double precision polynomial.
            </summary>
            <param name="n">The number of coefficients.</param>
            <param name="a">The coefficients.</param>
            <param name="x">The point to evaluate.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardPDF(System.Double)">
            <summary>
            Returns the PDF for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="Z">The Z variate of a standard Normal.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardLogPDF(System.Double)">
            <summary>
            Returns the log PDF for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="Z">The Z variate of a standard Normal.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardPDF(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the PDF for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="zValues">A list of Z variates.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardCDF(System.Double)">
            <summary>
            Returns the CDF for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="Z">The Z variate of a standard Normal.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardCDF(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the CDF for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="zValues">A list of Z variates.</param>
            <returns>An array of probabilities.</returns>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardZ(System.Double)">
            <summary>
            Returns the Z variate for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="probability">Probability between 0 and 1.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.StandardZ(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the Z variate for a standard Normal distribution, where mean of 0 and standard deviation of 1.
            </summary>
            <param name="probabilities">A list of probabilities.</param>
            <returns>An array of Z variates.</returns>
        </member>
        <member name="M:Numerics.Distributions.Normal.NormalConfidenceIntervals(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Get confidence intervals based on the Normal approximation.
            </summary>
            <param name="sampleSize">The data sample size N used for computing the standard error.</param>
            <param name="quantiles">List of nonexceedance probabilities for output frequency curves.</param>
            <param name="percentiles">List of confidence percentiles for confidence interval output.</param>
            <remarks>
            References: Stedinger, J. Confidence Intervals for Design Events. Journal of Hydraulic Engineering. 1983.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Normal.NoncentralTConfidenceIntervals(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Get exact confidence intervals based on the Noncentral-T distribution.
            </summary>
            <param name="sampleSize">The data sample size N used for computing the standard error.</param>
            <param name="quantiles">List of nonexceedance probabilities for output frequency curves.</param>
            <param name="percentiles">List of confidence percentiles for confidence interval output.</param>
            <remarks>
            References: Stedinger, J. Confidence Intervals for Design Events. Journal of Hydraulic Engineering. 1983.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Normal.MonteCarloConfidenceIntervals(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Get confidence intervals using Monte Carlo simulation.
            </summary>
            <param name="sampleSize">The data sample size N used for computing the standard error.</param>
            <param name="realizations">The number of Monte Carlo realizations.</param>
            <param name="quantiles">List of nonexceedance probabilities for output frequency curves.</param>
            <param name="percentiles">List of confidence percentiles for confidence interval output.</param>
            <remarks>
            This is the same sampling approach as used in HEC-FDA.
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Normal.ExpectedProbability(System.Int32,System.Double)">
            <summary>
            Gets the expected probability given an exceedance probability.
            </summary>
            <param name="sampleSize">The data sample size N used for computing the standard error.</param>
            <param name="probability">Exceedance probability.</param>
        </member>
        <member name="M:Numerics.Distributions.Normal.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Normal.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.GeneralizedExtremeValue">
            <summary>
            The Generalized Extreme Value distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.#ctor">
            <summary>
            Constructs a Generalized Extreme Value with a location of 100, scale of 10, and shape of 0.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Generalized Extreme Value (GEV) distribution with the given parameters ξ, α, and κ.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Kappa">
            <summary>
            Gets and sets the shape parameter κ (kappa).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.GeneralizedExtremeValue.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.ValidateParameters(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="shape">The shape parameter κ (kappa).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.DirectMethodOfMoments(System.Collections.Generic.IList{System.Double})">
            <summary>
            Gets the parameters using the direct method of moments. Moments are derived from the real-space data.
            </summary>
            <param name="moments">The array of sample moments.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.SolveForKappa(System.Double)">
            <summary>
            Solve for the shape parameter κ (kappa) given the skewness coefficient.
            </summary>
            <param name="skew">The skewness coefficient</param>
            <returns>
            Kappa
            </returns>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.ExpectedInformationMatrix(System.Int32)">
            <summary>
            Gets the expected Fisher information matrix.
            </summary>
            <param name="sampleSize">The sample size.</param>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.GeneralizedExtremeValue.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.Gumbel">
            <summary>
            The Gumbel (Extreme Value Type I) probability distribution.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <see href="https://en.wikipedia.org/wiki/Gumbel_distribution"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.#ctor">
            <summary>
            Constructs a Gumbel (Extreme Value Type I) distribution with a location of 100 and scale of 10.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Gumbel (Extreme Value Type I) distribution with a given ξ and α.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Xi">
            <summary>
            Gets and sets the location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Alpha">
            <summary>
            Gets and sets the scale parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Type">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.Gumbel.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.Estimate(System.Collections.Generic.IList{System.Double},Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.Bootstrap(Numerics.Distributions.ParameterEstimationMethod,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.SetParameters(System.Double,System.Double)">
            <summary>
            Set the distribution parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.ValidateParameters(System.Double,System.Double,System.Boolean)">
            <summary>
            Validate the parameters.
            </summary>
            <param name="location">The location parameter ξ (Xi).</param>
            <param name="scale">The scale parameter α (alpha).</param>
            <param name="throwException">Determines whether to throw an exception or not.</param>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.ParametersFromMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.MomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.ParametersFromLinearMoments(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.LinearMomentsFromParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.GetParameterConstraints(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.MLE(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.SetParametersFromMLE(System.Collections.Generic.IList{System.Double})">
            <summary>
            This function is used to calculate the maximum likelihood estimates of location and scale parameters.
            </summary>
            <param name="sample"></param>
            <references>
            Handbook of Statistical Distributions with Application
            </references>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.ParameterCovariance(System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.QuantileVariance(System.Double,System.Int32,Numerics.Distributions.ParameterEstimationMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.QuantileGradient(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.Gumbel.QuantileJacobian(System.Collections.Generic.IList{System.Double},System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Distributions.UnivariateDistributionBase">
            <summary>
            Declares common functionality for all univariate distributions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionBase.NearZero">
            <summary>
            Approximation for assessing if a parameter is near zero. 
            </summary>
        </member>
        <member name="F:Numerics.Distributions.UnivariateDistributionBase._parametersValid">
            <summary>
            Protected parameter is valid property. 
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Type">
            <summary>
            Returns the continuous distribution type.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.ShortDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.DisplayLabel">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.ParameterNames">
            <summary>
            Returns the distribution parameter names as an array of string.
            </summary>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.ParameterNamesShortForm">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.GetParameterPropertyNames">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.ParametersValid">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Median">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Variance">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.StandardDeviation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.CoefficientOfVariation">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Distributions.UnivariateDistributionBase.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogLikelihood(System.Collections.Generic.IList{System.Double})">
            <summary>
            The log likelihood function.
            </summary>
            <param name="sample">Sample of observed data.</param>
            <returns>
            Log likelihood.
            </returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogLikelihood(System.Double)">
            <summary>
            The Log-Likelihood function for a single data point.
            </summary>
            <param name="value">A single observed data point.</param>
            <returns>
            Log likelihood.
            </returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogLikelihood_LeftCensored(System.Double,System.Int64)">
            <summary>
            The log likelihood function for left censored data.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="numberBelow">The number of data points below the threshold.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogLikelihood_RightCensored(System.Double,System.Int64)">
            <summary>
            The log likelihood function for right censored data.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="numberAbove">The number of data points above the threshold.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogLikelihood_Intervals(System.Double,System.Double)">
            <summary>
            The log likelihood function for interval data.
            </summary>
            <param name="lowerLimit">The lower limit of the interval.</param>
            <param name="upperLimit">The upper limit of the interval.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.PDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogPDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.HF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.LogCCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.InverseCDF(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.PDF(System.Collections.Generic.IList{System.Double})">
            <summary>
            The PDF evaluated over a list of x values.
            </summary>
            <param name="xValues">List of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CDF(System.Collections.Generic.IList{System.Double})">
            <summary>
            The CDF evaluated over a list of x values.
            </summary>
            <param name="xValues">List of x values.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.InverseCDF(System.Collections.Generic.IList{System.Double})">
            <summary>
            The Inverse CDF evaluated over a list of probabilities.
            </summary>
            <param name="probabilities">List of probability values.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CentralMoments(System.Double)">
            <summary>
            Returns the central moments {Mean, Standard Deviation, Skew, and Kurtosis} of the distribution using numerical integration with Adaptive Simpson's rule. 
            </summary>
            <param name="tolerance">The desired tolerance for the solution. Default = ~Sqrt(Machine Epsilon), or 1E-8.</param>
            <returns>Mean, Standard Deviation, Skew, and Kurtosis.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CentralMoments(System.Int32)">
             <summary>
             Returns the central moments {Mean, Standard Deviation, Skew, and Kurtosis} of the distribution using numerical integration with Trapezoidal rule. 
             </summary>
            <param name="steps">Number of integration steps.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ConditionalMean(System.Double,System.Double,System.Double)">
            <summary>
            Returns the conditional mean of the distribution.
            </summary>
            <param name="a">The lower integration limit, a.</param>
            <param name="b">The upper integration limit, b.</param>
            <param name="tolerance">The desired tolerance for the solution. Default = 1E-8.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ConditionalVariance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the conditional variance of the distribution.
            </summary>
            <param name="a">The lower integration limit, a.</param>
            <param name="b">The upper integration limit, b.</param>
            <param name="mean">The mean for computing the central moment. Default = 0.</param>
            <param name="tolerance">The desired tolerance for the solution. Default = 1E-8.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ConditionalSkewness(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the conditional skewness of the distribution.
            </summary>
            <param name="a">The lower integration limit, a.</param>
            <param name="b">The upper integration limit, b.</param>
            <param name="mean">The mean for computing the central moment. Default = 0.</param>
            <param name="tolerance">The desired tolerance for the solution. Default = 1E-8.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ConditionalKurtosis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the conditional kurtosis of the distribution.
            </summary>
            <param name="a">The lower integration limit, a.</param>
            <param name="b">The upper integration limit, b.</param>
            <param name="mean">The mean for computing the central moment. Default = 0.</param>
            <param name="tolerance">The desired tolerance for the solution. Default = 1E-8.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ConditionalExpectedValue(System.Double,System.Double)">
            <summary>
            Returns the conditional expected value at the given confidence level. 
            </summary>
            <param name="alpha">The threshold confidence level, α.</param>
            <param name="tolerance">The desired tolerance for the solution. Default = ~Sqrt(Machine Epsilon), or 1E-8.</param>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreatePDFGraph">
            <summary>
            Create a PDF table for graphing purposes.
            The bounds of the table are automatically determined.
            </summary>
            <returns>A 2-column array of X and probability density.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreatePDFGraph(System.Collections.Generic.List{Numerics.Sampling.StratificationBin})">
            <summary>
            Create a PDF table for graphing purposes.
            </summary>
            <param name="XValues">Stratified X values.</param>
            <returns>A 2-column array of X and probability density.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreatePDFGraph(System.Collections.Generic.List{Numerics.Sampling.StratificationBin}[])">
            <summary>
            Create a PDF table for graphing purposes.
            </summary>
            <param name="XValues">Array of stratified X values.</param>
            <returns>A 2-column array of X and probability density.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreateCDFGraph">
            <summary>
            Create a CDF table for graphing purposes.
            The bounds of the table are automatically determined.
            </summary>
            <returns>A 2-column array of X and non-exceedance probability.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreateCDFGraph(System.Collections.Generic.List{Numerics.Sampling.StratificationBin})">
            <summary>
            Create a CDF table for graphing purposes.
            </summary>
            <param name="XValues">Stratified X values.</param>
            <returns>A 2-column array of X and non-exceedance probability.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreateCDFGraph(System.Collections.Generic.List{Numerics.Sampling.StratificationBin}[])">
            <summary>
            Create a CDF table for graphing purposes.
            </summary>
            <param name="XValues">Array of stratified X values.</param>
            <returns>A 2-column array of X and non-exceedance probability.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreateInverseCDFGraph">
            <summary>
            Create an Inverse CDF table for graphing purposes.
            The bounds of the table are automatically determined.
            </summary>
            <returns>A 2-column array of X and non-exceedance probability.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreateInverseCDFGraph(System.Collections.Generic.List{Numerics.Sampling.StratificationBin})">
            <summary>
            Create an Inverse CDF table for graphing purposes.
            </summary>
            <param name="PValues">Stratified probabilities.</param>
            <returns>A 2-column array of X and non-exceedance probability.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.CreateInverseCDFGraph(System.Collections.Generic.List{Numerics.Sampling.StratificationBin}[])">
            <summary>
            Create an Inverse CDF table for graphing purposes.
            </summary>
            <param name="PValues">Array of stratified probabilities.</param>
            <returns>A 2-column array of X and non-exceedance probability.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.GenerateRandomValues(System.Int32,System.Int32)">
            <summary>
            Generate random values of a distribution given a sample size.
            </summary>
            <param name="sampleSize">Size of random sample to generate.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <returns>
            Array of random values.
            </returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.Clone">
            <summary>
            Creates a copy of the distribution.
            </summary>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.ToXElement">
            <summary>
            Returns the distribution as XElement (XML). 
            </summary>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.op_Equality(Numerics.Distributions.UnivariateDistributionBase,Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            The equality operator to allow comparison of continuous distribution parameters. If distributions are equal the operator will return true, otherwise false.
            </summary>
            <param name="left">Continuous distribution on the left side of the operator.</param>
            <param name="right">Continuous distribution on the right side of the operator.</param>
            <returns>Boolean indicating if the equality operator results in a true statement.</returns>
        </member>
        <member name="M:Numerics.Distributions.UnivariateDistributionBase.op_Inequality(Numerics.Distributions.UnivariateDistributionBase,Numerics.Distributions.UnivariateDistributionBase)">
            <summary>
            The non-equality operator to allow comparison of continuous distribution parameters. If distributions are not equal the operator will return true, otherwise false.
            </summary>
            <param name="left">Continuous distribution on the left side of the operator.</param>
            <param name="right">Continuous distribution on the right side of the operator.</param>
            <returns>Boolean indicating if the non-equality operator results in a true statement.</returns>
        </member>
        <member name="T:Numerics.Functions.IUnivariateFunction">
            <summary>
            Interface for Univariate Functions.
            </summary>
            <remarks>
            <para>
                <b> Authors:  </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.NumberOfParameters">
            <summary>
            Returns the number of function parameters.
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.ParametersValid">
            <summary>
            Returns a boolean value describing if the current parameters are valid or not.
            If not, an ArgumentOutOfRange exception will be thrown when trying to use function.
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.Minimum">
            <summary>
            Gets and sets the minimum X value supported by the function. Default = double.MinValue.
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.Maximum">
            <summary>
            Gets and sets the maximum X value supported by the function. Default = double.MaxValue.
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.MinimumOfParameters">
            <summary>
            Gets the minimum values allowable for each parameter.
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.MaximumOfParameters">
            <summary>
            Gets the maximum values allowable for each parameter.
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.IsDeterministic">
            <summary>
            Determines if the function is deterministic or if it has uncertainty. 
            </summary>
        </member>
        <member name="P:Numerics.Functions.IUnivariateFunction.ConfidenceLevel">
            <summary>
            The confidence level to estimate when the function has uncertainty. 
            </summary>
        </member>
        <member name="M:Numerics.Functions.IUnivariateFunction.SetParameters(System.Collections.Generic.IList{System.Double})">
            <summary>
            Set the function parameters.
            </summary>
            <param name="parameters">Array of parameters.</param>
        </member>
        <member name="M:Numerics.Functions.IUnivariateFunction.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Test to see if function parameters are valid.
            </summary>
            <param name="parameters">Array of parameters.</param>
            <param name="throwException">Boolean indicating whether to throw the exception or not.</param>
            <returns>Nothing if the parameters are valid and the exception if invalid parameters were found.</returns>
        </member>
        <member name="M:Numerics.Functions.IUnivariateFunction.Function(System.Double)">
            <summary>
            Returns the function evaluated at a point x. If function is uncertain, the function is computed at the set confidence level. 
            </summary>
            <param name="x">The x-value in the function to evaluate.</param>
        </member>
        <member name="M:Numerics.Functions.IUnivariateFunction.InverseFunction(System.Double)">
            <summary>
            Returns the inverse function evaluated at a point y. If function is uncertain, the function is computed at the set confidence level. 
            </summary>
            <param name="y">The y-value in the inverse function to evaluate.</param>
        </member>
        <member name="T:Numerics.Functions.TabularFunction">
            <summary>
            A class for a tabular, or nonparametric, function.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Functions.TabularFunction.#ctor(Numerics.Data.UncertainOrderedPairedData)">
            <summary>
            Constructs a tabular function from uncertain ordered paired data.
            </summary>
            <param name="pairedData">The uncertain ordered paired data.</param>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.PairedData">
            <summary>
            The uncertain ordered paired data. 
            </summary>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.XTransform">
            <summary>
            The transform for the x-values. Default = None.
            </summary>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.YTransform">
            <summary>
            The transform for the y-values. Default = None.
            </summary>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.ParametersValid">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.IsDeterministic">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.ConfidenceLevel">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.TabularFunction.AllowNegativeYValues">
            <summary>
            Determines if the tabular function can return negative Y values.
            </summary>
        </member>
        <member name="M:Numerics.Functions.TabularFunction.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.TabularFunction.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.TabularFunction.Function(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.TabularFunction.InverseFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Functions.LinearFunction">
            <summary>
            A class for a simple linear function, with a single predictor and a slope and intercept coefficient, and normally distributed noise.
            Y = α + βX + ϵ, where ϵ ~ N(0,σ) 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.#ctor">
            <summary>
            Construct a new linear function with an intercept of 0 and slope of 1. 
            </summary>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new linear function with a given intercept and slope. 
            </summary>
            <param name="alpha">The intercept parameter.</param>
            <param name="beta">The slope parameter.</param>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a new linear function with a given intercept, slope and standard error.
            </summary>
            <param name="alpha">The intercept parameter.</param>
            <param name="beta">The slope parameter.</param>
            <param name="sigma">The standard error.</param>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.Alpha">
            <summary>
            The intercept parameter α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.Beta">
            <summary>
            The slope parameter β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.Sigma">
            <summary>
            The standard error parameter σ (sigma).
            </summary>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.ParametersValid">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.IsDeterministic">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.LinearFunction.ConfidenceLevel">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.Function(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.LinearFunction.InverseFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Functions.PowerFunction">
            <summary>
            A class for a power function with normally distributed noise.
            Y = [α * (X - ξ)^β] * ϵ, where ϵ ~ N(0,σ) 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.#ctor">
            <summary>
            Construct a new deterministic power function with α=1 and β=1.5 and ξ=0. 
            </summary>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a new power function with a given α, β, and ξ. 
            </summary>
            <param name="alpha">The coefficient parameter α.</param>
            <param name="beta">The exponent parameter β.</param>
            <param name="xi">The location parameter ξ.</param>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new power function with a given α, β, ξ and standard error σ.
            </summary>
            <param name="alpha">The coefficient parameter α.</param>
            <param name="beta">The exponent parameter β.</param>
            <param name="xi">The location parameter ξ.</param>
            <param name="sigma">The log-space standard error σ.</param>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.Alpha">
            <summary>
            The coefficient α (alpha).
            </summary>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.Beta">
            <summary>
            The exponent β (beta).
            </summary>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.Xi">
            <summary>
            The location parameter ξ (Xi).
            </summary>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.Sigma">
            <summary>
            The standard error parameter σ (sigma) in log-space.
            </summary>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.NumberOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.ParametersValid">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.MinimumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.MaximumOfParameters">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.IsDeterministic">
            <inheritdoc/>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.IsInverse">
            <summary>
            Determines if the power function should be inverted.
            </summary>
        </member>
        <member name="P:Numerics.Functions.PowerFunction.ConfidenceLevel">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.SetParameters(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.ValidateParameters(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.Function(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Functions.PowerFunction.InverseFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.MachineLearning.DecisionTree">
            <summary>
            The Decision Tree learning algorithm.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b> 
            </para>
            <para> <b> References: </b> </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Decision_tree_learning" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Create new Decision Tree.
            </summary>
            <param name="x">The training 1D array of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.#ctor(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Create new Decision Tree.
            </summary>
            <param name="x">The training 2D array of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Create new Decision Tree.
            </summary>
            <param name="x">The training matrix of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.MinimumSplitSize">
            <summary>
            The minimum split size of the samples. Default = 2.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.MaxDepth">
            <summary>
            The maximum recursion depth. Default = 100.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.Dimensions">
            <summary>
            The dimensionality (or total number of features) of the data space.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.Features">
            <summary>
            The number of random sub features to evaluate in the tree recursion.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.Random">
            <summary>
            The random number generator to be used within the decision tree estimation.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.Root">
            <summary>
            The root node of the decision tree.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.Y">
            <summary>
            The training vector of response values.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.X">
            <summary>
            The training matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.IsRegression">
            <summary>
            Determines whether this is for regression or classification. Default = regression.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionTree.IsTrained">
            <summary>
            Determines if the decision tree has been trained.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.Train">
            <summary>
            Train the decision tree. 
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.GrowTree(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Grow the decision tree recursively. 
            </summary>
            <param name="xTrain">The training matrix of predictor values.</param>
            <param name="yTrain">The training vector of response values.</param>
            <param name="depth">The depth of the recursion.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.BestSplit(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double[],System.Int32[],System.Int32@,System.Double@)">
            <summary>
            Returns the best split feature index and threshold.
            </summary>
            <param name="xTrain">The matrix of predictor values.</param>
            <param name="yTrain">The array of y-values.</param>
            <param name="indices">The feature indexes to evaluate.</param>
            <param name="bestFeatureIndex">Output. The best feature index.</param>
            <param name="bestThreshold">Output. The best threshold for splitting the tree.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.VarianceReduction(System.Double[],System.Double[],System.Double)">
            <summary>
            Computes the variance reduction for the threshold.
            </summary>
            <param name="x">The column of x-values.</param>
            <param name="y">The column of y-values.</param>
            <param name="threshold">The split threshold.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.InformationGain(System.Double[],System.Double[],System.Double)">
            <summary>
            Returns the information gain of the split threshold.
            </summary>
            <param name="x">The column of x-values.</param>
            <param name="y">The column of y-values.</param>
            <param name="threshold">The split threshold.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.Entropy(System.Double[])">
            <summary>
            Computes the entropy for vector of y-values.
            </summary>
            <param name="y">The column of y-values.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.Split(System.Double[],System.Double,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Splits the x-column based on the threshold.
            </summary>
            <param name="x">The column of x-values.</param>
            <param name="threshold">The split threshold.</param>
            <param name="leftIndices">Output. A list of left indexes.</param>
            <param name="rightIndices">Output. A list of right indexes.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.TraverseTree(System.Double[],Numerics.MachineLearning.DecisionNode)">
            <summary>
            Traverses the tree and return the leaf node value.
            </summary>
            <param name="x">The row of x-value predictors.</param>
            <param name="node">The decision node to traverse.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.Predict(System.Double[])">
            <summary>
            Returns the prediction from the Decision Tree.
            </summary>
            <param name="X">The 1D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.Predict(System.Double[0:,0:])">
            <summary>
            Returns the prediction from the Decision Tree.
            </summary>
            <param name="X">The 2D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.DecisionTree.Predict(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the prediction from the Decision Tree.
            </summary>
            <param name="X">The matrix of predictors.</param>
        </member>
        <member name="T:Numerics.MachineLearning.KNearestNeighbors">
            <summary>
            The k-Nearest Neighbors (k-NN) algorithm.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            k-NN is a simple method for applying supervised learning. When training a k-NN model,
            the model practically memorizes all locations of all the points and their values.
            When it is time to use the model for predictions, the model takes the input data and 
            calculates the k-nearest points to that input. 
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Create new k-NN method.
            </summary>
            <param name="x">The training 1D array of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="k">The number of nearest neighbors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.#ctor(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Create new k-NN method.
            </summary>
            <param name="x">The training 2D array of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="k">The number of nearest neighbors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Create new k-NN method.
            </summary>
            <param name="x">The training matrix of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="k">The number of nearest neighbors.</param>
        </member>
        <member name="P:Numerics.MachineLearning.KNearestNeighbors.K">
            <summary>
            The number of clusters.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KNearestNeighbors.Y">
            <summary>
            The training vector of response values.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KNearestNeighbors.X">
            <summary>
            The training matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KNearestNeighbors.NumberOfFeatures">
            <summary>
            Gets the number of features in the training matrix of predictor values.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KNearestNeighbors.IsRegression">
            <summary>
            Determines whether this is for regression or classification. Default = regression.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.GetNeighbors(System.Double[])">
            <summary>
            Returns the indexes of the k-Nearest Neighbors. 
            </summary>
            <param name="X">The 1D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.GetNeighbors(System.Double[0:,0:])">
            <summary>
            Returns the indexes of the k-Nearest Neighbors. 
            </summary>
            <param name="X">The 2D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.GetNeighbors(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the indexes of the k-Nearest Neighbors. 
            </summary>
            <param name="X">The matrix of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.Predict(System.Double[])">
            <summary>
            Returns the prediction from k-Nearest neighbors.
            </summary>
            <param name="X">The 1D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.Predict(System.Double[0:,0:])">
            <summary>
            Returns the prediction from k-Nearest neighbors.
            </summary>
            <param name="X">The 2D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.Predict(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the prediction from k-Nearest neighbors.
            </summary>
            <param name="X">The matrix of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.BootstrapPredict(System.Double[],System.Int32)">
            <summary>
            Returns the bootstrapped prediction from k-Nearest neighbors.
            </summary>
            <param name="X">The 1D array of predictors.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.BootstrapPredict(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the bootstrapped prediction from k-Nearest neighbors.
            </summary>
            <param name="X">The 2D array of predictors.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.BootstrapPredict(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Returns the bootstrapped prediction from k-Nearest neighbors.
            </summary>
            <param name="X">The matrix of predictors.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.PredictionIntervals(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the bootstrapped prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="X">The 1D array of predictors.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="realizations">The number of bootstrap realizations. Default = 1,000.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.PredictionIntervals(System.Double[0:,0:],System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the bootstrapped prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="X">The 2D array of predictors.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="realizations">The number of bootstrap realizations. Default = 1,000.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.PredictionIntervals(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the bootstrapped prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="X">The matrix of predictors.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="realizations">The number of bootstrap realizations. Default = 1,000.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.kNN(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the indexes of the k-Nearest neighbors.
            </summary>
            <param name="xTrain">The training matrix of predictors.</param>
            <param name="yTrain">The training response vector.</param>
            <param name="xTest">The test matrix of predictors</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.kNNPredict(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the prediction from k-Nearest neighbors.
            </summary>
            <param name="xTrain">The training matrix of predictors.</param>
            <param name="yTrain">The training response vector.</param>
            <param name="xTest">The test matrix of predictors</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.kNNBootstrapPredict(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Returns the bootstrapped prediction from k-Nearest neighbors.
            </summary>
            <param name="xTrain">The training matrix of predictors.</param>
            <param name="yTrain">The training response vector.</param>
            <param name="xTest">The test matrix of predictors</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KNearestNeighbors.kNNPredictionIntervals(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the bootstrapped prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="xTrain">The training matrix of predictors.</param>
            <param name="yTrain">The training response vector.</param>
            <param name="xTest">The test matrix of predictors</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="realizations">The number of bootstrap realizations. Default = 1,000.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="T:Numerics.MachineLearning.KNearestNeighbors.kNNItem">
            <summary>
            A structure for storing a k-NN item.
            </summary>
        </member>
        <member name="F:Numerics.MachineLearning.KNearestNeighbors.kNNItem.Index">
            <summary>
            The index of the item.
            </summary>
        </member>
        <member name="F:Numerics.MachineLearning.KNearestNeighbors.kNNItem.Distance">
            <summary>
            The distance of the item.
            </summary>
        </member>
        <member name="T:Numerics.MachineLearning.NaiveBayes">
            <summary>
            A class for Gaussian Naive Bayes Classification.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                <list type="bullet">
                <item>Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil</item>
                <item>Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil</item>
                </list> 
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            The Naive Bayes classifier is a "probabilistic classifier" based on 
            applying Bayes' theorem with strong (naive) independence assumption between features.
            </para>
            <para>
            The class implements Gaussian Naive Bayes, which assumes the features associated with each class
            are continuous and distributed according to a Normal (Gaussian) distribution. 
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> <see href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.#ctor(System.Double[],System.Double[])">
            <summary>
            Create new Naive Bayes classifier.
            </summary>
            <param name="x">The training 1D array of predictor values.</param>
            <param name="y">The training response vector.</param>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.#ctor(System.Double[0:,0:],System.Double[])">
            <summary>
            Create new Naive Bayes classifier.
            </summary>
            <param name="x">The training 2D array of predictor values.</param>
            <param name="y">The training response vector.</param>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Create new Naive Bayes classifier.
            </summary>
            <param name="x">The training matrix of predictor values.</param>
            <param name="y">The training response vector.</param>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.Y">
            <summary>
            The training vector of response values.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.X">
            <summary>
            The training matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.Classes">
            <summary>
            Returns the list of distinct classes from the training set. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.Means">
            <summary>
            The means of each feature given each class. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.StandardDeviations">
            <summary>
            The standard deviations of each feature given each class.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.Priors">
            <summary>
            The prior probability for each class.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.NaiveBayes.IsTrained">
            <summary>
            Determines if the classifier has been trained.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.Train">
            <summary>
            Train the Naive Bayes classifier. 
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.Predict(System.Double[])">
            <summary>
            Returns the prediction of the Naive Bayes classifier
            </summary>
            <param name="X">The 1D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.Predict(System.Double[0:,0:])">
            <summary>
            Returns the prediction of the Naive Bayes classifier
            </summary>
            <param name="X">The 2D array of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.Predict(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the prediction of the Naive Bayes classifier.
            </summary>
            <param name="X">The matrix of predictors.</param>
        </member>
        <member name="M:Numerics.MachineLearning.NaiveBayes.MAP(System.Double[])">
            <summary>
            Returns the class with the maximum posterior probability.
            </summary>
            <param name="x">A single vector of features for a prediction point.</param>
        </member>
        <member name="T:Numerics.MachineLearning.RandomForest">
            <summary>
            The Random Forest method for regression and classification.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            <b> References:</b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Random_forest" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Create new Random Forest.
            </summary>
            <param name="x">The training 1D array of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.#ctor(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Create new Random Forest.
            </summary>
            <param name="x">The training 2D array of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Create new Random Forest.
            </summary>
            <param name="x">The training matrix of predictor values.</param>
            <param name="y">The training response vector.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.NumberOfTrees">
            <summary>
            The number of trees to use in the Random Forest. Default = 1000.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.MinimumSplitSize">
            <summary>
            The minimum split size of the samples. Default = 2.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.MaxDepth">
            <summary>
            The maximum recursion depth. Default = 100.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.Dimensions">
            <summary>
            The dimensionality (or total number of features) of the data space.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.Features">
            <summary>
            The number of random sub features to evaluate in the tree recursion.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.Random">
            <summary>
            The random number generator to be used within the decision tree estimation.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.Y">
            <summary>
            The training vector of response values.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.X">
            <summary>
            The training matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.DecisionTrees">
            <summary>
            The array of decision trees.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.IsRegression">
            <summary>
            Determines whether this is for regression or classification. Default = regression.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.RandomForest.IsTrained">
            <summary>
            Determines if the Random Forest has been trained.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.Train">
            <summary>
            Train the Random Forest.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.BootstrapDecisionTree(System.Int32)">
            <summary>
            Returns a bootstrapped decision tree.
            </summary>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.Predict(System.Double[],System.Double)">
            <summary>
            Returns the prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="X">The 1D array of predictors.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.Predict(System.Double[0:,0:],System.Double)">
            <summary>
            Returns the prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="X">The 2D array of predictors.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="M:Numerics.MachineLearning.RandomForest.Predict(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Returns the prediction intervals in a 2D array with columns: lower, median, upper, mean. 
            </summary>
            <param name="X">The matrix of predictors.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="T:Numerics.MachineLearning.JenksCluster">
            <summary>
            Supporting class for a Jenks natural breaks cluster.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            The Jenks optimization method, also called the Jenks natural breaks classification method, 
            is a data clustering method designed to determine the best arrangement of values into different classes.
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.JenksCluster.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates a new Jenks cluster. 
            </summary>
            <param name="data">The sorted input data array.</param>
            <param name="startIndex">The starting index of the cluster.</param>
            <param name="endIndex">The ending index of the cluster.</param>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.StartIndex">
            <summary>
            The starting index of the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.EndIndex">
            <summary>
            The ending index of the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.Count">
            <summary>
            The number of data points in the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.MinValue">
            <summary>
            The minimum value of the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.MaxValue">
            <summary>
            The maximum value of the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.Sum">
            <summary>
            The sum of the values in the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.Average">
            <summary>
            The average value of the cluster. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.Variance">
            <summary>
            The variance of the cluster.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksCluster.SumOfSquaredDeviations">
            <summary>
            The sum of squared deviations.
            </summary>
        </member>
        <member name="T:Numerics.MachineLearning.DecisionNode">
            <summary>
            A decision node class.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionNode.FeatureIndex">
            <summary>
            The feature index. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionNode.Threshold">
            <summary>
            The threshold used to split the node.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionNode.Left">
            <summary>
            Nodes to the left of the threshold.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionNode.Right">
            <summary>
            Nodes to the right of the threshold.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionNode.Value">
            <summary>
            The leaf node value.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.DecisionNode.IsLeafNode">
            <summary>
            Determines if this is a leaf node.
            </summary>
        </member>
        <member name="T:Numerics.MachineLearning.GaussianMixtureModel">
            <summary>
            Gaussian Mixture Model (GMM) for classification.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            A Gaussian mixture model is a probabilistic model that assumes all the data points are 
            generated from a mixture of a finite number of Gaussian distributions with unknown parameters. 
            One can think of mixture models as generalizing k-means clustering to incorporate information 
            about the covariance structure of the data as well as the centers of the latent Gaussian distributions.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/EM_algorithm_and_GMM_model" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.#ctor(System.Single[],System.Int32)">
            <summary>
            Creates a new Gaussian Mixture Model.
            </summary>
            <param name="X">The 1D array of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.#ctor(System.Double[],System.Int32)">
            <summary>
            Creates a new Gaussian Mixture Model.
            </summary>
            <param name="X">The 1D array of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Creates a new Gaussian Mixture Model.
            </summary>
            <param name="X">The 2D array of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Creates a new Gaussian Mixture Model.
            </summary>
            <param name="X">The matrix of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.K">
            <summary>
            The number of clusters.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.X">
            <summary>
            The matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Dimension">
            <summary>
            The dimensionality (or number of features) of the data space.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Means">
            <summary>
            The cluster means.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Sigmas">
            <summary>
            The cluster covariance matrices.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Labels">
            <summary>
            The array of cluster labels assigned to each of the data points.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Weights">
            <summary>
            The mixing weights 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Likelihood">
            <summary>
            The likelihood of each data point (row) and for each cluster (column).
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.MaxIterations">
            <summary>
            The maximum iterations in the clustering algorithm. Default = 1,000. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Tolerance">
            <summary>
            The relative tolerance for convergence. Default = 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.GaussianMixtureModel.Iterations">
            <summary>
            The total number of iterations required to find the clusters.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.Train(System.Int32,System.Boolean)">
            <summary>
            Estimate the Gaussian Mixture Model.
            </summary>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="kMeansPlusPlus">Determines whether to use random initialization or to use the k-Means++ method. Default is to use k-Means++.</param>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.EStep">
            <summary>
            The expectation step. 
            </summary>
            <returns>Returns the log-likelihood.</returns>
        </member>
        <member name="M:Numerics.MachineLearning.GaussianMixtureModel.MStep">
            <summary>
            c
            </summary>
        </member>
        <member name="T:Numerics.MachineLearning.JenksNaturalBreaks">
            <summary>
            Jenks natural breaks optimization.
            </summary>
            <remarks>
            <para>
                <b> Authors:</b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            The Jenks optimization method, also called the Jenks natural breaks classification method, 
            is a data clustering method designed to determine the best arrangement of values into different classes.
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> <see href = "http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization" /> </item>
            <item> <see href = "https://github.com/simple-statistics/simple-statistics/blob/main/src/jenks.js" /> </item>
            <item> <see href="https://medium.com/analytics-vidhya/jenks-natural-breaks-best-range-finder-algorithm-8d1907192051"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.JenksNaturalBreaks.#ctor(System.Collections.Generic.IList{System.Double},System.Int32,System.Boolean)">
            <summary>
            Creates a new Jenks natural breaks optimization.
            </summary>
            <param name="data">The input data array to be classified.</param>
            <param name="numberOfClusters">The number of desired clusters (or classes).</param>
            <param name="isDataSorted">Determines if the data array is sorted. Default = false.</param>
        </member>
        <member name="M:Numerics.MachineLearning.JenksNaturalBreaks.#ctor(System.Collections.Generic.IList{System.Single},System.Int32,System.Boolean)">
            <summary>
            Creates a new Jenks natural breaks optimization.
            </summary>
            <param name="data">The input data array to be classified.</param>
            <param name="numberOfClusters">The number of desired clusters (or classes).</param>
            <param name="isDataSorted">Determines if the data array is sorted. Default = false.</param>
        </member>
        <member name="P:Numerics.MachineLearning.JenksNaturalBreaks.SortedData">
            <summary>
            The array of sorted input data.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksNaturalBreaks.NumberOfClusters">
            <summary>
            The number of clusters.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksNaturalBreaks.Clusters">
            <summary>
            Gets the array of estimated clusters.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksNaturalBreaks.Breaks">
            <summary>
            The array of break points.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.JenksNaturalBreaks.GoodnessOfVarianceFit">
            <summary>
            The goodness of fit measure. The closer to 1, the better the fit.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.JenksNaturalBreaks.Estimate">
            <summary>
            Estimate the Jenks natural breaks. 
            </summary>
        </member>
        <member name="T:Numerics.MachineLearning.KMeans">
            <summary>
            k-Means clustering.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            k-Means clustering is a method of vector quantization, originally from signal processing, 
            that aims to partition n observations into k clusters in which each observation belongs to 
            the cluster with the nearest mean (cluster centers or cluster centroid), serving as a prototype of the cluster.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/K-means_clustering" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.#ctor(System.Single[],System.Int32)">
            <summary>
            Creates a new k-Means clustering analysis.
            </summary>
            <param name="X">The 1D array of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.#ctor(System.Double[],System.Int32)">
            <summary>
            Creates a new k-Means clustering analysis.
            </summary>
            <param name="X">The 1D array of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Creates a new k-Means clustering analysis.
            </summary>
            <param name="X">The 2D array of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Creates a new k-Means clustering analysis.
            </summary>
            <param name="X">The matrix of predictor values.</param>
            <param name="k">The number of clusters.</param>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.K">
            <summary>
            The number of clusters.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.X">
            <summary>
            The matrix of predictor values. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.Dimension">
            <summary>
            The dimensionality (or number of features) of the data space.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.Means">
            <summary>
            The cluster means.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.Labels">
            <summary>
            The array of cluster labels assigned to each of the data points.
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.MaxIterations">
            <summary>
            The maximum iterations in the clustering algorithm. Default = 1,000. 
            </summary>
        </member>
        <member name="P:Numerics.MachineLearning.KMeans.Iterations">
            <summary>
            The total number of iterations required to find the clusters.
            </summary>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.Train(System.Int32,System.Boolean)">
            <summary>
            Estimate the k-Means clusters.
            </summary>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="kMeansPlusPlus">Determines whether to use random initialization or to use the k-Means++ method. Default is to use k-Means++.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.Initialize(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes the centroids of the k-Means clusters.
            </summary>
            <param name="X">The matrix of predictor values.</param>
            <param name="k">The number of clusters.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="kMeansPlusPlus">Determines whether to use random initialization or to use the k-Means++ method. Default is to use k-Means++.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.GetLabels(System.Double[0:,0:])">
            <summary>
            Gets the array of cluster labels given the list of centroids.
            </summary>
            <param name="centroids">The list of centroids.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.GetCentroids(System.Int32[])">
            <summary>
            Gets the centroids given the specified cluster labels.
            </summary>
            <param name="labels">The array of cluster labels assigned to each of the data points.</param>
        </member>
        <member name="M:Numerics.MachineLearning.KMeans.GetClosestCentroid(System.Double[],System.Double[0:,0:])">
            <summary>
            Returns the index of the centroid closest to the sample vector.
            </summary>
            <param name="sample">The sample vector.</param>
            <param name="centroids">The list of centroids.</param>
        </member>
        <member name="T:Numerics.Mathematics.Integration.AdaptiveGaussLobatto">
            <summary>
            A class that performs adaptive integration by the Gauss-Lobatto method with a Kronrod extension. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description>
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveGaussLobatto.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Constructs a new adaptive Gauss-Lobatto method.
            </summary>
            <param name="function">The function to integrate.</param>
            <param name="min">The minimum value under which the integral must be computed.</param>
            <param name="max">The maximum value under which the integral must be computed.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveGaussLobatto.Function">
            <summary>
            The unidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveGaussLobatto.Min">
            <summary>
            The minimum value under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveGaussLobatto.Max">
            <summary>
            The maximum value under which the integral must be computed. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveGaussLobatto.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveGaussLobatto.adaptlob(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Helper function for recursion.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Integration.Miser">
            <summary>
            A class for Miser, the recursive stratified sampling algorithm for multidimensional integration.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            The Miser method aims to reduce overall error by concentrating integration points in the regions of highest variance. The smallest error estimate is
            obtained by allocating sample points in proportion to the standard deviation of the function in each sub-region. This algorithm bisects the integration
            region along one coordinate axis at each step. The direction is chose by examining all possible bisections and selecting whichever will minimize the combined variance.
            This procedure is repeated recursively for each of the two half spaces down to a user-specified depth where each sub-region is integrated using a plain Monte
            Carlo estimate.
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description>
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Monte_Carlo_integration"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Miser.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creates a new Miser class, the recursive stratified sampling algorithm for multidimensional integration.
            </summary>
            <param name="function">The multidimensional function to integrate.</param>
            <param name="dimensions">The number of dimensions in the function to evaluate.</param>
            <param name="min">The minimum values under which the integral must be computed.</param>
            <param name="max">The maximum values under which the integral must be computed.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Function">
            <summary>
            The multidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Dimensions">
            <summary>
            The number of dimensions in the function to evaluate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Min">
            <summary>
            The minimum values under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Max">
            <summary>
            The maximum values under which the integral must be computed. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Random">
            <summary>
            The random number generator to be used within the Monte Carlo integration.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.StandardError">
            <summary>
            The integration standard error. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Fraction">
            <summary>
            The fraction of remaining function evaluations used at each stage to explore the variance of the function. Default = 0.1.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.MinimumNumberOfSubregionPoints">
            <summary>
            The minimum number of points and function evaluations performed in each subregion. Default = 15. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.MinimumNumberOfBisections">
            <summary>
            A subregion is further bisected only if this number of function evaluations are available. Default = 4 * 15 = 60. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.Dither">
            <summary>
            Dither should normally be set to 0.0, but can be set to 0.1 if the integrands active region fall on the boundary of a power-of-two subdivision of a region.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Miser.UseSobolSequence">
            <summary>
            Determines whether to use a Sobol sequence or a pseudo-Random number generator. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Miser.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Miser.miser(System.Func{System.Double[],System.Double},System.Double[],System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
            Helper function for Integrate() function that includes the Monte Carlo sampler for the method
            </summary>
            <param name="function">n dimensional function being evaluated</param>
            <param name="regn"> A vector consisting of ndim "lower-left" coordinates of the region followed by ndim "upper - right"
            coordinates. Specifies the rectangular volume by regn[0...2 * ndim -1]</param>
            <param name="npts"> Number of times tbe function is sampled </param>
            <param name="dith"> Should be normally set to 0, but can be est to 0.1 if the function's active region falls on the boundary of
            a power-of-two subdivision region. </param>
            <param name="ave"> The mean value of the function in the region </param>
            <param name="var"> An estimate of the statistical uncertainty of ave (square of standard deviation), i.e. variance</param>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Miser.ranpt(System.Double[],System.Double[])">
            <summary>
            Returns a uniformly random point pt in an n-dimensional rectangular region. Used by miser.
            </summary>
            <param name="pt"> An array the length of ndim </param>
            <param name="regn">  A vector consisting of ndim "lower-left" coordinates of the region followed by ndim "upper - right"
            coordinates. Specifies the rectangular volume by regn[0...2 * ndim -1] </param>
        </member>
        <member name="T:Numerics.Mathematics.Integration.MonteCarloIntegration">
            <summary>
            A class for Monte Carlo integration for multidimensional integration.
            </summary>
            <remarks>
            <para>
               <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method numerically computes a definite integral by randomly choosing points at which the integrand is evaluated (rather than evaluating
            the integral at regular grid like other methods).
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Monte_Carlo_integration"/>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.MonteCarloIntegration.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creates a new Monte Carlo Integration class.
            </summary>
            <param name="function">The multidimensional function to integrate.</param>
            <param name="dimensions">The number of dimensions in the function to evaluate.</param>
            <param name="min">The minimum values under which the integral must be computed.</param>
            <param name="max">The maximum values under which the integral must be computed.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.Function">
            <summary>
            The multidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.Dimensions">
            <summary>
            The number of dimensions in the function to evaluate./>.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.Min">
            <summary>
            The minimum values under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.Max">
            <summary>
            The maximum values under which the integral must be computed. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.Random">
            <summary>
            The random number generator to be used within the Monte Carlo integration.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.StandardError">
            <summary>
            The integration error. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.MonteCarloIntegration.UseSobolSequence">
            <summary>
            Determines whether to use a Sobol sequence or a pseudo-Random number generator. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.MonteCarloIntegration.Integrate">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Integration.SimpsonsRule">
            <summary>
            A class for Simpson's rule integration. Integration steps are refined until convergence.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Simpson's rule approximates the integral by splitting the interval and evaluating the function at those split points. The most basic implementation of this is the
            following equation for the integral of f(x) over [a, b] with 2 subdivisions:
            <code>
                    b
                    ∫ f(x) dx ~ S(a, b) = (b - a) / 6 * [ f(a) + 4*f(m) + f(b) ]
                    a
            </code>
            where m is the midpoint [ (a+b) / 2 ] between a and b. The more subdivisions there are, i.e. the more refined the steps are, the more accurate the approximation becomes.
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Simpson%27s_rule"/>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.SimpsonsRule.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Construct a new Simpson's rule class. 
            </summary>
            <param name="function">The function to integrate.</param>
            <param name="min">Start point for integration.</param>
            <param name="max">End point for integration.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.SimpsonsRule.Function">
            <summary>
            The unidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.SimpsonsRule.Min">
            <summary>
            The minimum value under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.SimpsonsRule.Max">
            <summary>
            The maximum value under which the integral must be computed. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.SimpsonsRule.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Integration.SimpsonsRule.Next">
            <summary>
            Returns the value of the integral at the nth step of refinement.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Integration.Integrator">
            <summary>
            A base class for all integration methods.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.MinIterations">
            <summary>
            The minimum number of integration iterations allowed. Default = 1.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.MaxIterations">
            <summary>
            The maximum number of integration iterations allowed. Default = 1E7.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.MinFunctionEvaluations">
            <summary>
            The minimum number of function evaluations allowed. Default = 1.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.MaxFunctionEvaluations">
            <summary>
            The maximum number of function evaluations allowed. Default = 1E7.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.AbsoluteTolerance">
            <summary>
            The desired absolute tolerance for the solution. Default = ~Sqrt(Machine Epsilon), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.RelativeTolerance">
            <summary>
            The desired relative tolerance for the solution. Default = ~Sqrt(Machine Epsilon), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.ReportFailure">
            <summary>
            Determines if an exception will be thrown if the optimization solver fails to converge.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.Iterations">
            <summary>
            Returns the number of iterations required to find the solution.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.FunctionEvaluations">
            <summary>
            Returns the number of function evaluations required to find the solution.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Integration.Integrator._result">
            <summary>
            Protected result property.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.Result">
            <summary>
            The numerically computed result of the definite integral. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Integrator.Status">
            <summary>
            Determines the integration method status. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integrator.Integrate">
            <summary>
            Evaluates the integral.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integrator.ClearResults">
            <summary>
            Clears the results.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integrator.Validate">
            <summary>
            Validate inputs. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integrator.UpdateStatus(Numerics.Mathematics.IntegrationStatus,System.Exception)">
            <summary>
            Update the optimization status. Exceptions will be throw depending on the status. 
            </summary>
            <param name="status">Optimization status.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integrator.EvaluateConvergence(System.Double,System.Double)">
            <summary>
            Evaluate convergence. 
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            Returns true for convergence
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule">
            <summary>
            A class that performs adaptive Simpson's integration. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Adaptive Simpson's rule uses an estimate of the error that comes from calculating a definite integral with Simpson's rule. If the error between the previous
            evaluation of the rule and the current evaluation of the rule exceeds a certain specified tolerance, the rule calls for subdividing the interval. Adaptive Simpson's
            rule is applied to each subinterval in a recursive manner until the error qualifications are met.
            <code>
                        | S(a, b) - S(a, m) + S(m, b) | &lt; epsilon
            </code>
            where a and b are the bounds of integration and m is the midpoint between them.
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Adaptive_Simpson%27s_method"/>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Constructs a new adaptive Simpson's rule.
            </summary>
            <param name="function">The function to integrate.</param>
            <param name="min">The minimum value under which the integral must be computed.</param>
            <param name="max">The maximum value under which the integral must be computed.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.Function">
            <summary>
            The unidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.Min">
            <summary>
            The minimum value under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.Max">
            <summary>
            The maximum value under which the integral must be computed. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.MinDepth">
            <summary>
            The minimum recursion depth. Default = 0.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.MaxDepth">
            <summary>
            The maximum recursion depth. Default = 100.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.StandardError">
            <summary>
            Returns an approximate measure of the standard error of the integration. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.Integrate(System.Collections.Generic.List{Numerics.Sampling.StratificationBin})">
            <summary>
            Evaluates the integral.
            </summary>
            <param name="bins">The stratification bins to integrate over.</param>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.Simpsons(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            A helper function to the Integrate() function
            </summary>
            <param name="f"> The unidimensional function to integrate </param>
            <param name="a"> The minimum value under which the integral must be computed </param>
            <param name="fa"> The function evaluated at a </param>
            <param name="b"> The maximum value under which the integral must be computed </param>
            <param name="fb"> The function evaluated at b </param>
            <param name="m"> The midpoint between a and b </param>
            <param name="fm"> The function evaluated at m </param>
            <returns>
            A three point Simpson's Rule evaluation on [a,b]
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.Integration.AdaptiveSimpsonsRule.AdaptiveSimpsons(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            A helper function to the Integrate() function
            </summary>
            <param name="f"> The unidimensional function to integrate </param>
            <param name="a"> The minimum value under which the integral must be computed </param>
            <param name="fa"> The function evaluated at a </param>
            <param name="b"> The maximum value under which the integral must be computed </param>
            <param name="fb"> The function evaluated at b </param>
            <param name="epsilon"> Machine epsilon </param>
            <param name="depth"> Less than or equal to 0 (max recursions have been reached) </param>
            <param name="whole"> The original whole three point Simpson's Rule evaluation on [a,b] </param>
            <param name="m"> The midpoint between a and b </param>
            <param name="fm"> The function evaluated at m </param>
            <returns>
            An evaluation of Simpson's Rule with the error less than a certain tolerance. This is accomplished but subdividing the interval the rule is
            evaluated on until the error between the last evaluation and the current evaluation is sufficiently small.
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.Integration.TrapezoidalRule">
            <summary>
            A class for Trapezoidal rule integration. Integration steps are refined until convergence.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            In its most basic form, the Trapezoidal rule approximates the region under the graph of f(x) as a trapezoid and calculating its area as:
            <code>
                    b
                    ∫ f(x) dx ~ T(a, b) = (b - a) * [ f(a) + f(b) ] / 2
                    a
            </code>
            This method can also be seen as averaging the left and right Riemann sums. Moreover, the interval can be subdivided to improve the accuracy of the approximation, with
            the trapezoidal rule applied to every sub-interval. Here the integration steps are refined, i.e. the interval is subdivided, until convergence.
            </para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Trapezoidal_rule"/>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.TrapezoidalRule.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Construct a new trapezoidal rule class. 
            </summary>
            <param name="function">The function to integrate.</param>
            <param name="min">The minimum value under which the integral must be computed.</param>
            <param name="max">The maximum value under which the integral must be computed.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.TrapezoidalRule.Function">
            <summary>
            The unidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.TrapezoidalRule.Min">
            <summary>
            The minimum value under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.TrapezoidalRule.Max">
            <summary>
            The maximum value under which the integral must be computed. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.TrapezoidalRule.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Integration.TrapezoidalRule.Next">
            <summary>
            Returns the value of the integral at the nth step of refinement.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Integration.Vegas">
            <summary>
            A class for adaptive Monte Carlo integration for multidimensional integration.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method aims to reduce error in Monte Carlo simulations by using a probability distribution function to concentrate the search
            in those areas of the integrand that make the greatest contribution. 
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description>
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/VEGAS_algorithm"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Vegas.#ctor(System.Func{System.Double[],System.Double,System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creates a new Vegas class for adaptive Monte Carlo integration for multidimensional integration.
            </summary>
            <param name="function">The multidimensional function to integrate.</param>
            <param name="dimensions">The number of dimensions in the function to evaluate.</param>
            <param name="min">The minimum values under which the integral must be computed.</param>
            <param name="max">The maximum values under which the integral must be computed.</param>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Function">
            <summary>
            The multidimensional function to integrate.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Dimensions">
            <summary>
            The number of dimensions in the function to evaluate./>.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Min">
            <summary>
            The minimum values under which the integral must be computed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Max">
            <summary>
            The maximum values under which the integral must be computed. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Random">
            <summary>
            Gets and sets the random number generator to be used within the Monte Carlo integration.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.UseSobolSequence">
            <summary>
            Determines whether to use a Sobol sequence or a pseudo-Random number generator. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.CheckConvergence">
            <summary>
            Determines whether to check convergence and exit when integrating.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Initialize">
            <summary>
            Determines how to initialize the Vegas routine. 
            </summary>
            <remarks>      
            If 0, then Vegas enters on a cold start. If Initialize 1, then inherit the grid from a previous call, but not its answers. If 2, then inherit the previous grid and its answers.
            </remarks>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.IndependentEvaluations">
            <summary>
            Gets and sets the number of statistically independent evaluations of the integral, per iteration. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.FunctionCalls">
            <summary>
            Gets and sets the number of function evaluations within each independent evaluation. Default = 10,000.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Alpha">
            <summary>
            The damping parameter used to refine the grid. The default = 1.5.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Bins">
            <summary>
            Gets and sets the number of stratification bins for each dimension. The default = 50.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.Grid">
            <summary>
            Gets the stratification grid. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.StandardError">
            <summary>
            Gets integration standard error. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Integration.Vegas.ChiSquared">
            <summary>
            Gets the Chi-Squared statistic
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Vegas.InitializeParameters">
            <summary>
            Initialize the parameter arrays.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Vegas.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Vegas.vegas(System.Func{System.Double[],System.Double,System.Double},System.Double[],System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Helper function for Integrate(), the actual Vegas algorithm
            </summary>
            <param name="fxn"> The function being evaluated </param>
            <param name="regn"> A vector consisting of ndim “lower left”coordinates of the region followed by ndim “upper right”
            coordinates. Specifies the rectangular volume by regn[0..2 * ndim - 1] </param>
            <param name="init"> The input flag that signals whether this call is a new start or a subsequent call for
            additional iterations </param>
            <param name="ncall">The approximate number of integrand evaluations per iteration.</param>
            <param name="itmx">The maximum number of iterations.</param>
            <param name="tgral">Output. The integral result.</param>
            <param name="sd">Output. The standard deviation of the estimate of the integral.</param>
            <param name="chi2a">The chi-squared per degree of freedom for all iterations up to that point.</param>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Vegas.rebin(System.Double,System.Int32,System.Double[],System.Double[],System.Double[0:,0:],System.Int32)">
            <summary>
            Utility routine used by Vegas to rebin a vector of densities contained in row j of xi into new bins defined by a vector r.
            </summary>
            <remarks>
            This method refine the grid. Consult references to understand the subtlety of this procedure. The refinement is damped.
            to avoid rapid, destabilizing changes, and also compressed in range by the exponent ALPH.
            </remarks>
        </member>
        <member name="T:Numerics.Mathematics.Integration.Integration">
            <summary>
            Contains methods for numerical integration.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <b> Description: </b>
            The basic problem of numerical integration is to approximate a solution to f(x) integrated over the interval [a,b].
            <para>
            <b> References: </b>
            <see href = "https://en.wikipedia.org/wiki/Numerical_integration" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integration.GaussLegendre(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Returns the integral of a function between a and b by ten-point Gauss-Legendre integration. 
            </summary>
            <param name="f">The function to integrate.</param>
            <param name="a">Start point for integration.</param>
            <param name="b">End point for integration.</param>
            <returns>The value of a definite integral.</returns>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integration.TrapezoidalRule(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Numerical integration using the Trapezoidal Rule.
            </summary>
            <param name="f">The function to integrate.</param>
            <param name="a">Start point for integration.</param>
            <param name="b">End point for integration.</param>
            <param name="steps">Number of integration steps. Default = 2.</param>
            <returns>The value of a definite integral.</returns>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integration.SimpsonsRule(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Numerical integration using Simpson's Rule.
            </summary>
            <param name="f">The function to integrate.</param>
            <param name="a">Start point for integration.</param>
            <param name="b">End point for integration.</param>
            <param name="steps">Number of integration steps. Default = 2.</param>
            <returns>The value of a definite integral.</returns>
        </member>
        <member name="M:Numerics.Mathematics.Integration.Integration.Midpoint(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Numerical integration using the Midpoint method.
            </summary>
            <param name="f">The function to integrate.</param>
            <param name="a">Start point for integration.</param>
            <param name="b">End point for integration.</param>
            <param name="steps">Number of integration steps. Default = 2.</param>
            <returns>The value of a definite integral.</returns>
        </member>
        <member name="T:Numerics.Mathematics.IntegrationStatus">
            <summary>
            Enumeration of integration statuses.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.IntegrationStatus.None">
            <summary>
            Integration has not been performed yet. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.IntegrationStatus.Success">
            <summary>
            The integration ended successfully.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.IntegrationStatus.MaximumIterationsReached">
            <summary>
            The integration was stopped because the maximum number of iterations was reached. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.IntegrationStatus.MaximumFunctionEvaluationsReached">
            <summary>
            The integration was stopped because the maximum number of objective function evaluations was reached. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.IntegrationStatus.Failure">
            <summary>
            The integration was stopped due to internal failure. 
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.AugmentedLagrange">
            <summary>
            The Augmented Lagrange constrained optimization method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method replaces the constrained optimization problem with a series of unconstrained problems and 
            adds a penalty term to the objective, while also adding a third term designed to mimic a 
            Lagrange multiplier. In other words, the unconstrained objective is the Lagrangian of the constrained 
            problem, with an additional penalty term.
            </para>
            <para>
            <b> References: </b>
            <see href="https://en.wikipedia.org/wiki/Augmented_Lagrangian_method#cite_note-Nocedal_2006-6"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.AugmentedLagrange.#ctor(System.Func{System.Double[],System.Double},Numerics.Mathematics.Optimization.Optimizer,System.Collections.Generic.IList{Numerics.Mathematics.Optimization.IConstraint})">
            <summary>
            Constructs new Augmented Lagrange optimizer.
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="constraints">The list of constraints.</param>
            <param name="optimizer">The internal optimizer to use in the Augmented Lagrange method.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.AugmentedLagrange.Optimizer">
            <summary>
            The internal optimizer to use in the Augmented Lagrange method. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.AugmentedLagrange.Constraints">
            <summary>
            Returns the list of constraints.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.AugmentedLagrange.Lambda">
            <summary>
            Returns the Lagrangian equality multipliers.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.AugmentedLagrange.Mu">
            <summary>
            Returns the "Lesser than" inequality multipliers.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.AugmentedLagrange.Nu">
            <summary>
            Returns the "Greater than" inequality multipliers.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.AugmentedLagrange.augmentedLagrangianFunction(System.Double[])">
            <summary>
            The Augmented Lagrangian objective function. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.AugmentedLagrange.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.Constraint">
            <summary>
            A class for base functionality for constraints.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Constraint.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Double,Numerics.Mathematics.Optimization.ConstraintType,System.Double)">
            <summary>
            Construct a new constraint. 
            </summary>
            <param name="constraintFunction">The constraint function.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="value">The value on the right hand side of the constraint equation. </param>
            <param name="type">The constraint type. </param>
            <param name="tolerance">The violation tolerance for the constraint. Default = 1E-8.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Constraint.Type">
            <summary>
            The constraint type. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Constraint.NumberOfParameters">
            <summary>
            The number of parameters to evaluate in the function.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Constraint.Function">
            <summary>
            Calculates the left hand side of the constraint.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Constraint.Value">
            <summary>
            The value on the right hand side of the constraint equation. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Constraint.Tolerance">
            <summary>
            The violation tolerance for the constraint. Default = 1E-8. 
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ConstraintType">
            <summary>
            Enumeration of constraint types. 
            </summary>
             <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ConstraintType.EqualTo">
            <summary>
            Equality constraint, h(x) = 0
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ConstraintType.GreaterThanOrEqualTo">
            <summary>
            Inequality constraint for greater than or equal to, h(x) &gt;= 0
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ConstraintType.LesserThanOrEqualTo">
            <summary>
            Inequality constraint for lesser than or equal to, h(x) &lt;= 0
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.IConstraint">
            <summary>
            Interface for constraints.
            </summary>
            <remarks>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </remarks>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.IConstraint.Type">
            <summary>
            The constraint type. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.IConstraint.NumberOfParameters">
            <summary>
            The number of parameters to evaluate in the function.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.IConstraint.Function">
            <summary>
            Calculates the left hand side of the constraint.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.IConstraint.Value">
            <summary>
            The value on the right hand side of the constraint equation. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.IConstraint.Tolerance">
            <summary>
            The violation tolerance for the constraint. Default = 1E-8. 
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.MLSL">
            <summary>
            The Multi-Level Single Linkage (MLSL) optimization method. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
            <list type="bullet">
            <item><description>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            <item><description>
            </description></item>
                Brian Skahill, USACE Engineer Research and Development Center Coastal and Hydraulics Laboratory, brian.e.skahill@usace.army.mil
            </description></item>
            </list>
            </para>
            <b> Description: </b>
            
                The key optimization steps are as follows:
            <list type="number">
            <item><description>
                Generate sample points and function values. Add N points, drawn from a uniform distribution over S, to the (initially empty) set of sample points, 
                and evaluate f(x) at each new sample point.
            </description></item>
            <item><description>
                Reduce the sample points. Sort the entire sample of kN points in order of increasing object function values.
                Select the γkN points with the lowest objective function values. This resultant set, Rk, is called the reduced sample.
            </description></item>
            <item><description>
                Select start points for local searches. Determine a (possibly empty) subset of the sample points from which to start local searches.
            </description></item>
            <item><description>
                Decide whether to stop. If stopping rule is satisfied, regard the lowest local minimizer as the global minimizer, otherwise go to step 1.
            </description></item>
            </list>
            <para>
                <b> References: </b>
            </para>
            <para> 
                Implements routine described by 
                Kan A.H.G.R., Boender C.G.E., Timmer G.T. (1985) A Stochastic Approach to Global Optimization. 
                In: Schittkowski K. (eds) Computational Mathematical Programming. NATO ASI Series (Series F: Computer and Systems Sciences), 
                vol 15. Springer, Berlin, Heidelberg. <see href="https://doi.org/10.1007/978-3-642-82450-0_10"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MLSL.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Mathematics.Optimization.LocalMethod)">
            <summary>
            Constructs a new multi-level single linkage (MLSL) optimization method.
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="method">The local search method to use. Default = BFGS.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.Method">
            <summary>
            The local search method to use. Default = BFGS.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.LocalAbsoluteTolerance">
            <summary>
            The desired absolute tolerance for the local solution. Default = ~Sqrt(1E-16), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.LocalRelativeTolerance">
            <summary>
            The desired relative tolerance for the local solution. Default = ~Sqrt(1E-16), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.Polish">
            <summary>
            If true (default), then a final local search is used to polish the best population member at the end, which can improve the optimization slightly. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.SampleSize">
            <summary>
            The number of random samples to evaluate each iteration. Default = 30
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.Gamma">
            <summary>
            Determines the reduced sample size. Must be between 0 and 1. Default = 0.05.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.Sigma">
            <summary>
            The scale parameter for determining the critical distance. Default = 2.0. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.SampledPoints">
            <summary>
            The list of all sampled points.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.LocalMinimums">
            <summary>
            The list of all local optimums.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.MinNoImprovement">
            <summary>
            The minimum number of iterations to carry out with no improvement. Default = 5.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.MaxNoImprovement">
            <summary>
            The maximum number of iterations to carry out with no improvement. Default = 10.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MLSL.Optimize">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MLSL.GetLocalOptimizer(System.Collections.Generic.IList{System.Double},System.Double,System.Double,System.Boolean@)">
            <summary>
            Returns an optimizer for the local search. 
            </summary>
            <param name="initialValues"> An array of initial values to evaluate. </param>
            <param name="relativeTolerance">The desired relative tolerance for the solution.</param>
            <param name="absoluteTolerance">The desired absolute tolerance for the solution.</param>
            <param name="cancel">By ref. Determines if the solver should be canceled.</param>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.MLSL.SamplePoint">
            <summary>
            Class for storing sampled points
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.SamplePoint.ParameterSet">
            <summary>
            The sample point parameter set.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MLSL.SamplePoint.Minimized">
            <summary>
            Determines if the sample point has already been minimized
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MLSL.SamplePoint.#ctor">
            <summary>
            Create new sample point
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.MultiStart">
            <summary>
            The Multi-Start (MS) optimization method. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Brian Skahill, USACE Engineer Research and Development Center Coastal and Hydraulics Laboratory, brian.e.skahill@usace.army.mil
            </para>
            
            <para>
            <b> Description: </b>
                With the Multi-Start (MS) approach, a local search procedure P is applied to each point in the random sample; 
                the best local minimum found in this way is our candidate for the global minimum
            <list type="number">
            <item><description>
                Draw a point from the uniform distribution over S.
                </description></item>
            <item><description>
                Apply P to the new sample point.
                </description></item>
            <item><description>
                The local minimum x* identified with the lowest function value is the
                candidate value for x^,. Return to Step 1, unless a stopping criterion
                is satisfied. 
            </description></item>
            </list>
            </para>
            <para>
                While optimal Bayesian stopping rules can be specified for Multi-Start, the only stopping criterion implemented for this 
                simple ("folklore") global optimization method is the maximum number of local searches to perform.
            </para>
            
            <para>
                <b> References: </b>
            </para>
            <para>
                Implements routine described by 
                Kan A.H.G.R., Boender C.G.E., Timmer G.T. (1985) A Stochastic Approach to Global Optimization. 
                In: Schittkowski K. (eds) Computational Mathematical Programming. NATO ASI Series (Series F: Computer and Systems Sciences), 
                vol 15. Springer, Berlin, Heidelberg. <see href="https://doi.org/10.1007/978-3-642-82450-0_10."/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MultiStart.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Numerics.Mathematics.Optimization.LocalMethod)">
            <summary>
            Construct a new multi-start optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="method">The local optimization method to use. Default = BFGS.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.Method">
            <summary>
            The local search method to use. Default = BFGS.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.LocalAbsoluteTolerance">
            <summary>
            The desired absolute tolerance for the local solution. Default = ~Sqrt(1E-16), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.LocalRelativeTolerance">
            <summary>
            The desired relative tolerance for the local solution. Default = ~Sqrt(1E-16), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.MultiStart.Polish">
            <summary>
            If true (default), then a final local search is used to polish the best population member at the end, which can improve the optimization slightly. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MultiStart.Optimize">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.MultiStart.GetLocalOptimizer(System.Collections.Generic.IList{System.Double},System.Double,System.Double,System.Boolean@)">
            <summary>
            Returns an optimizer for the local search. 
            </summary>
            <param name="initialValues"> An array of initial values to evaluate. </param>
            <param name="relativeTolerance">The desired relative tolerance for the solution.</param>
            <param name="absoluteTolerance">The desired absolute tolerance for the solution.</param>
            <param name="cancel">By ref. Determines if the solver should be canceled.</param>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ParticleSwarm">
            <summary>
            The Particle Swarm optimization algorithm.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method optimizes a problem by iteratively trying to improve a candidate solution with a given measure of quality.
            Using a population of candidate solutions, called particles, these particles move around in the search space. Each 
            particles's movement is influenced by its local best known position. These positions are updated as better positions are 
            found by other particles, and the swarm is expected to move toward the best solutions.
            </para>
            <para>
                <b> References: </b>
            <list type="bullet">
            <item><description>
            Implements routine described by Kockenderfer and Wheeler. "Algorithms for Optimization" (2019).
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Particle_swarm_optimization"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ParticleSwarm.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Construct a new particle swarm optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ParticleSwarm.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ParticleSwarm.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ParticleSwarm.PopulationSize">
            <summary>
            The total population size. Default = 30.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ParticleSwarm.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ParticleSwarm.Optimize">
            <inheritdoc/>
            <remarks>
            <b> References: </b>
            Alam "Particle Swarm Optimization: Algorithm and its Codes in MATLAB" (2016)
            </remarks>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ParticleSwarm.Particle">
            <summary>
            Class for storing particles. 
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.SimulatedAnnealing">
            <summary>
            The adaptive simulated annealing algorithm.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This algorithm is interpreted as a slow decrease in the probability of accepting worse solutions as the solution
            space is explored. Accepting the worse solutions allows for a more extensive search for the global solution.
            At each step, the algorithm randomly selects a solution close to the current one, measures its quality, and 
            probabilistically decides moving between the two states.
            </para>
            <para>
                <b> References: </b>
            <list type="bullet">
            <item><description>
            Implements routine described by Corana et al. "Minimizing Multimodal Functions of Continuous Variables with 'Simulated Annealing' Algorithm" (1987).
            </description></item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Simulated_annealing"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.SimulatedAnnealing.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Construct a new simulated annealing optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.InitialTemperature">
            <summary>
            The initial temperature at the start of the algorithm. Default = 10. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.MinTemperature">
            <summary>
            The minimum temperature allowable. The temperature will be held constant when it reaches this point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.UpdateCycles">
            <summary>
            The number of cycles before updating the step size. Default = 10.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.TemperatureCycles">
            <summary>
            The number of cycles before reducing the temperature. 10. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.SimulatedAnnealing.ToleranceSteps">
            <summary>
            The number of successive temperature reductions to test for termination. Default = 20.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.SimulatedAnnealing.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ADAM">
            <summary>
            The Adaptive Movement (Adam) optimization algorithm. The objective function must be differentiable and convex.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Adaptive Movement Estimation algorithm, or Adam for short, is an extension to the gradient descent optimization algorithm.
            Adam is designed to accelerate the optimization process, e.g. decrease the number of function evaluations required to reach the optima, 
            or to improve the capability of the optimization algorithm, e.g. result in a better final result.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <list type="bullet">
            <item><description>
            Kingma and Ba (2014) Adam: A method for Stochastic Optimization
            <see href="https://arxiv.org/abs/1412.6980"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ADAM.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double,System.Func{System.Double[],System.Double[]})">
            <summary>
            Construct a new Gradient Descent optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="alpha">Optional. The step size or learning rate. Default = 0.001.</param>
            <param name="gradient">Optional. Function to evaluate the gradient. Default uses finite difference.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ADAM.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ADAM.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ADAM.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ADAM.Alpha">
            <summary>
            Gets and sets the step size, or learning rate. Default = 0.001.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ADAM.Beta1">
            <summary>
            Gets and sets the decay factor for the first momentum. Default = 0.9.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ADAM.Beta2">
            <summary>
            Gets and sets the decay factor for infinity norm. Default = 0.999.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ADAM.Gradient">
            <summary>
            The function for evaluating the gradient of the objective function.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ADAM.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.BFGS">
            <summary>
            Contains the Broyden-Fletcher-Goldfarb-Shanno (BFGS) optimization algorithm. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This is an iterative method for solving unconstrained nonlinear optimization problems. It gradually improves
            an approximation to the Hessian matrix of the loss function, obtained from gradient evaluations via a 
            generalized secant method.
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            <item><description>
            </description></item>
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            <item><description>
            </description></item>
            <see href="https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.BFGS.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Func{System.Double[],System.Double[]})">
            <summary>
            Construct a new BFGS optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="gradient">Optional. Function to evaluate the gradient. Default uses finite difference.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.BFGS.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.BFGS.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.BFGS.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.BFGS.Gradient">
            <summary>
            The function for evaluating the gradient of the objective function.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.BFGS.Optimize">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.BFGS.LineSearch(System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[]@,System.Double@,System.Double,System.Boolean@,System.Boolean@)">
            <summary>
            Auxiliary function for searching a line. 
            </summary>
            <param name="xold">n-dimensional point [0..n-1].</param>
            <param name="fold">Value of the function at xold.</param>
            <param name="g">Gradient of function at xold.</param>
            <param name="p">A direction to search.</param>
            <param name="x">A new point x[0..n-1]</param>
            <param name="f">The new function value.</param>
            <param name="stpmax">Limits the length of steps.</param>
            <param name="check">Check is false on a normal exit, true when x is too close to xold.</param>
            <param name="cancel">Determines if the solver should be canceled.</param>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.DifferentialEvolution">
            <summary>
            The Differential Evolution (DE) algorithm, which finds a global minima when no gradient is available.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method optimizes a problem by trying to improve a candidate solution with regard to a given measure
            of quality. DE maintains a population of candidate solutions, creating new ones by combining existing 
            ones, and keeping whichever solution has the best score or fitness on the optimization problem. Because 
            the problem is treated as merely a measure of quality for the candidate solution, the gradient is not 
            needed, and the problem does not need to be differentiable.
            </para>
            <para>
                <b> References: </b>
            <list type="bullet">
            <item><description>
                Implements routine described by Price et al. "Differential Evolution: A Practical Approach to Global Optimization" (1998).
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Differential_evolution"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.DifferentialEvolution.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Construct a new differential evolution optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.PopulationSize">
            <summary>
            The total population size. Default = 30.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.Mutation">
            <summary>
            The mutation constant or differential weight, in the range [0, 2]. Increasing the mutation constant increases the search radius, 
            but will slow down convergence. The default is 0.75. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.DitherRate">
            <summary>
            Determines how often the mutation constant dithers between 0.5 and 1.0; e.g., 0.90 will result in dithering 90% of the time.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.DifferentialEvolution.CrossoverProbability">
            <summary>
            The crossover probability or recombination constant, in the range [0, 1]. Increasing this value allows a larger number of mutants
            to progress into the next generation, but at the risk of population stability. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.DifferentialEvolution.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.GradientDescent">
            <summary>
            The Gradient Descent optimization algorithm. The objective function must be differentiable and convex.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            Gradient descent is a method for unconstrained mathematical optimization. It is a first-order 
            iterative algorithm for finding a local minimum of a differentiable multivariate function.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <list type="bullet">
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Gradient_descent"/>
            </description></item>
            <item><description>
            <see href="https://towardsdatascience.com/gradient-descent-algorithm-a-deep-dive-cf04e8115f21"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.GradientDescent.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double,System.Func{System.Double[],System.Double[]})">
            <summary>
            Construct a new Gradient Descent optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="alpha">Optional. The step size or learning rate. Default = 0.001.</param>
            <param name="gradient">Optional. Function to evaluate the gradient. Default uses finite difference.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.GradientDescent.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.GradientDescent.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.GradientDescent.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.GradientDescent.Alpha">
            <summary>
            Gets and sets the step size, or learning rate. Default = 0.001.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.GradientDescent.Gradient">
            <summary>
            The function for evaluating the gradient of the objective function.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.GradientDescent.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.Powell">
            <summary>
            Contains the Powell optimization algorithm. The function need not be differentiable, and no derivatives are taken.
            </summary>
            <remarks>
            <para>
                <b> Authors:</b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This method minimizes the function by bi-directionally searching along search vectors via Brent's method. The minima of
            these search vectors are recorded and used to create new search vectors, as the current ones are deleted after use. 
            The algorithm iterates until no significant improvement is made.
            </para>
            <b> References: </b>
            <list type="bullet">
            <item><description> 
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description> 
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017
            </description></item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Powell%27s_method"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Powell.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Construct a new Powell optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Powell.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Powell.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Powell.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Powell.Optimize">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Powell.LineMinimization(System.Double[],System.Double[],System.Boolean@)">
            <summary>
            Auxiliary line minimization routine. 
            </summary>
            <param name="startPoint">The initial point.</param>
            <param name="direction">The initial direction.</param>
            <param name="cancel">Determines if the solver should be canceled.</param>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.LocalMethod">
            <summary>
            The enumeration of local optimization methods for use in global optimizers.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.LocalMethod.ADAM">
            <summary>
            The Adaptive Movement (Adam) optimization algorithm.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.LocalMethod.BFGS">
            <summary>
            The Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.LocalMethod.GradientDescent">
            <summary>
            The Gradient Descent algorithm.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.LocalMethod.NelderMead">
            <summary>
            The Nelder-Mead downhill simplex algorithm
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.LocalMethod.Powell">
            <summary>
            The Powell optimization algorithm.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.OptimizationStatus">
            <summary>
            Enumeration of optimization statuses. 
            </summary>
             <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.OptimizationStatus.None">
            <summary>
            Optimization has not been performed yet. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.OptimizationStatus.Success">
            <summary>
            The optimization method ended successfully.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.OptimizationStatus.MaximumIterationsReached">
            <summary>
            The optimization method was stopped because the maximum number of iterations was reached. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.OptimizationStatus.MaximumFunctionEvaluationsReached">
            <summary>
            The optimization method was stopped because the maximum number of objective function evaluations was reached. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.OptimizationStatus.Failure">
            <summary>
            The optimization method was stopped due to internal failure. 
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.Optimizer">
            <summary>
            A base class for all optimization methods.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.#ctor(System.Func{System.Double[],System.Double},System.Int32)">
            <summary>
            Construct a new optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.MaxIterations">
            <summary>
            The maximum number of optimization iterations allowed. Default = 10,000.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.MaxFunctionEvaluations">
            <summary>
            The maximum number of function evaluations allowed. Default = int.MaxValue.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.AbsoluteTolerance">
            <summary>
            The desired absolute tolerance for the solution. Default = ~Sqrt(Machine Epsilon), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.RelativeTolerance">
            <summary>
            The desired relative tolerance for the solution. Default = ~Sqrt(Machine Epsilon), or 1E-8.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.ReportFailure">
            <summary>
            Determines if an exception will be thrown if the optimization solver fails to converge.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.RecordTraces">
            <summary>
            Determines whether the parameter set traces are saved or not. Default = true.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.ComputeHessian">
            <summary>
            Determines whether to compute a numerically differentiated Hessian matrix when the optimization was successful. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.ObjectiveFunction">
            <summary>
            The objective function to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.NumberOfParameters">
            <summary>
            The number of parameters to evaluate in the objective function.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.Optimizer.functionScale">
            <summary>
            Objective function scaling factor (set to -1 for a maximization problem). By default it is a minimization problem.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.Iterations">
            <summary>
            Returns the number of iterations required to find the solution.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.FunctionEvaluations">
            <summary>
            Returns the number of function evaluations required to find the solution.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.BestParameterSet">
            <summary>
            The optimal point, or parameter set. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.ParameterSetTrace">
            <summary>
            A trace of the parameter set and fitness evaluated until convergence.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.Status">
            <summary>
            Determines the optimization method status. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.Optimizer.Hessian">
            <summary>
            The numerically differentiated Hessian matrix. This is only computed when the optimization is successful.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.ClearResults">
            <summary>
            Clears the results.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.Validate">
            <summary>
            Validate inputs. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.Optimize">
            <summary>
            Implements the actual optimization algorithm. This method should minimize the objective function. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.Minimize">
            <summary>
            Finds the parameter set that minimizes the objective function.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.Maximize">
            <summary>
            Finds the parameter set that maximizes the objective function.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.Evaluate(System.Double[],System.Boolean@)">
            <summary>
            Evaluates the objective function and returns the fitness.
            </summary>
            <param name="values">The parameter values to evaluate.</param>
            <param name="cancel">By ref. Determines if the solver should be canceled.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.RepairParameter(System.Double,System.Double,System.Double)">
            <summary>
            Repair the trial parameter to keep it within bounds.
            </summary>
            <param name="value">The parameter value to evaluate.</param>
            <param name="lowerBound">The lower bound of the interval containing the minima.</param>
            <param name="upperBound">The upper bound of the interval containing the minima.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.UpdateStatus(Numerics.Mathematics.Optimization.OptimizationStatus,System.Exception)">
            <summary>
            Update the optimization status. Exceptions will be throw depending on the status. 
            </summary>
            <param name="status">Optimization status.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.Optimizer.CheckConvergence(System.Double,System.Double)">
            <summary>
            Checks convergence. 
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ParameterSet">
            <summary>
            A class for storing an optimization trial parameter set.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ParameterSet.#ctor">
            <summary>
            Constructs an empty parameter set.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ParameterSet.#ctor(System.Double[],System.Double)">
            <summary>
            Constructs a parameter set.
            </summary>
            <param name="values">The parameter values.</param>
            <param name="fitness">The objective function result (or fitness) given the parameter set.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ParameterSet.#ctor(System.Double[],System.Double,System.Double)">
            <summary>
            Constructs a parameter set.
            </summary>
            <param name="values">The parameter values.</param>
            <param name="fitness">The objective function result (or fitness) given the parameter set.</param>
            <param name="weight">The weight given to the parameter set.</param>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ParameterSet.Values">
            <summary>
            The trial parameter set values.
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ParameterSet.Fitness">
            <summary>
            The objective function result (or fitness) given the trial parameter set. 
            </summary>
        </member>
        <member name="F:Numerics.Mathematics.Optimization.ParameterSet.Weight">
            <summary>
            An optional weight given to the parameter set values.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ParameterSet.Clone">
            <summary>
            Returns a clone of the point.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.BrentSearch">
            <summary>
            The Brent optimization algorithm. The function need not be differentiable, and no derivatives are taken.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This class contains methods for finding the minimum or maximum of a function using Brent's method.
            Brent's method is a hybrid root-finding algorithm that combines the bisection method, secant method, and inverse
            quadratic interpolation.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Brent%27s_method"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.BrentSearch.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Construct a new Brent optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="lowerBound">The lower bound (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBound">The upper bound (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.BrentSearch.LowerBound">
            <summary>
            The lower bound (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.BrentSearch.UpperBound">
            <summary>
            The upper bound (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.BrentSearch.Optimize">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.BrentSearch.Bracket(System.Double,System.Double)">
            <summary>
            Bracket the objective function minimum.
            </summary>
            <param name="s">Starting step size. Default = 1E-2.</param>
            <param name="k">Expansion factor. Default = 2.</param>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.GoldenSection">
            <summary>
            The Golden-Section optimization algorithm. The function need not be differentiable, and no derivatives are taken.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This class contains methods for finding the minimum or maximum of a function using the Golden-Section method.
            This method operates by successively narrowing the range of values on the specified interval. When searching for a
            minimum, the central point is always less than or equal to the outer points, assuring that a minimum is contained 
            between the outer points.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Golden-section_search"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.GoldenSection.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Construct a new Golden-Section optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="lowerBound">The lower bound (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBound">The upper bound (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.GoldenSection.LowerBound">
            <summary>
            The lower bound (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.GoldenSection.UpperBound">
            <summary>
            The upper bound (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.GoldenSection.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ShuffledComplexEvolution">
            <summary>
            The Shuffled Complex Evolution (SCE-UA) algorithm, which finds a global minima when no gradient is available.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            The main steps of the algorithm are as follows
            <list type="number">
            <item><description>
            Randomly initialize s sample points in the feasible region, and calculate their objective function values.
            </description></item>
            <item><description>
            Rank the sample points in ascending order by objective function values.
            </description></item>
            <item><description>
            Divide the s sorted points into p complexes, and each complex contains m points.
            </description></item>
            <item><description>
            Evolve each complex β times with the competitive complex evolution (CCE) algorithm. In each evolution, 
            q points in a complex are selected to form a subcomplex, and the subcomplex is adjusted α times using reflection, 
            contraction, and mutation steps.
            </description></item>
            <item><description>
            Mix all points in the evolved complexes and sort them in ascending order of objective function value.
            </description></item>
            <item><description>
            Determine whether the termination criteria are met, if not, return to Step 3.
            </description></item>
            </list>
            </para>
            <para>
               <b> References: </b>
            <list type="bullet">
            <item><description>
            Implements Duan et al. (1992) SCE-UA probabilistic search algorithm.
            </description></item>
            <item><description>
            <see href="https://www.frontiersin.org/journals/earth-science/articles/10.3389/feart.2022.1037173/full"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Construct a new shuffled complex evolution (SCE-UA) optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.PRNGSeed">
            <summary>
            The pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.Complexes">
            <summary>
            The number of complexes. Default = 5.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.CCEIterations">
            <summary>
            The number of iterations in the inner loop (CCE algorithm).  Defaults = 2 * NumberOfParameters + 1, as recommended by Duan et al (1994). 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.ToleranceSteps">
            <summary>
            The number of iterations where the improvement is within the relative tolerance required to confirm convergence. Default = 20.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.Optimize">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.EvolveComplex(System.Int32,System.Collections.Generic.List{Numerics.Mathematics.Optimization.ShuffledComplexEvolution.PointFitness}@,System.Double[],System.Random,System.Boolean@)">
            <summary>
            Evolve complex according to the competitive complex evolution (CCE) algorithm.
            </summary>
            <param name="alpha">The worst point in the complex is reflected or contracted to seek an improvement alpha times.</param>
            <param name="Acomplex">The complex to evolve.</param>
            <param name="cdf">The trapezoidal cumulative probability for points in complex.</param>
            <param name="prng">The prng.</param>
            <param name="cancel">By ref. Determines if the solver should be canceled.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.IsFeasible(System.Double[])">
            <summary>
            Determines if the point is within the feasible parameter space.
            </summary>
            <param name="point">The point to evaluate.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.Reflection(System.Collections.Generic.List{Numerics.Mathematics.Optimization.ShuffledComplexEvolution.PointFitness}@,System.Double[]@,System.Double[]@)">
            <summary>
            Compute reflection of worst point about centroid r = 2g - u(worst)
            </summary>
            <param name="U">The sub-complex.</param>
            <param name="g">The centroid.</param>
            <param name="r">The reflection point.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.Contraction(System.Collections.Generic.List{Numerics.Mathematics.Optimization.ShuffledComplexEvolution.PointFitness}@,System.Double[]@,System.Double[]@)">
            <summary>
            Contract to midpoint between centroid and worst point
            </summary>
            <param name="U">The sub-complex.</param>
            <param name="g">The centroid.</param>
            <param name="c">The contraction point.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.SmallestHypercube(System.Collections.Generic.List{Numerics.Mathematics.Optimization.ShuffledComplexEvolution.PointFitness}@,System.Random@,System.Double[]@)">
            <summary>
            Compute the smallest hypercube enclosing A complex and randomly sample a point within it.
            </summary>
            <param name="Acomplex">The complex.</param>
            <param name="prng">The prng.</param>
            <param name="z">The randomly generated point.</param>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.Trapezoidal(System.Int32)">
            <summary>
            The Trapezoidal probability distribution.
            </summary>
            <param name="N">The sample size.</param>
            <returns>An array of plotting positions of size N.</returns>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.ShuffledComplexEvolution.PointFitness">
            <summary>
            Class for keeping track of parameter sets with indexes. 
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.Optimization.NelderMead">
            <summary>
            Contains the Nelder-Mead downhill simplex algorithm, which finds a minima when no gradient is available.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            A simplex is the convex hull of n+1 vertices. In 2D space, a simplex is a triangle, and in 3D space, a simplex is a
            tetragedron. The Nelder-Mead algoirthm starts with a set of n+1 points that are the vertices of a working simplex, S,
            and the corresponding set of function values. Through a sequence of transformations of the working simplex S, the 
            function values at the vertices are decreased. At each step, the transformation is determined by computing one or more 
            test points, and their function values, and by comparison of these function values with those vertices. The process
            is terminated with the S becomes sufficiently small or the function values are close enough.
            </para>
            <para>
            <b>References: </b>
            <list type="bullet">
            <item><description> 
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description> 
            "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017
            </description></item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method"/>
            </description></item>
            <item><description> 
            <see href="http://www.scholarpedia.org/article/Nelder-Mead_algorithm"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.NelderMead.#ctor(System.Func{System.Double[],System.Double},System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Construct a new Nelder-Mead optimization method. 
            </summary>
            <param name="objectiveFunction">The objective function to evaluate.</param>
            <param name="numberOfParameters">The number of parameters in the objective function.</param>
            <param name="initialValues">An array of initial values to evaluate.</param>
            <param name="lowerBounds">An array of lower bounds (inclusive) of the interval containing the optimal point.</param>
            <param name="upperBounds">An array of upper bounds (inclusive) of the interval containing the optimal point.</param>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.NelderMead.InitialValues">
            <summary>
            An array of initial values to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.NelderMead.LowerBounds">
            <summary>
            An array of lower bounds (inclusive) of the interval containing the optimal point. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.Optimization.NelderMead.UpperBounds">
            <summary>
            An array of upper bounds (inclusive) of the interval containing the optimal point.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.Optimization.NelderMead.Optimize">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Mathematics.NumericalDerivative">
            <summary>
            Contains methods for numerical differentiation.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <b> Description: </b>
            These methods estimate the derivative of a function using values and other knowledge about the function.
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Numerical_differentiation" />
            </description></item>
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Jacobian_matrix_and_determinant" />
            </description></item>
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Hessian_matrix" />
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.NumericalDerivative.Derivative(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Computes the derivative of a function.
            </summary>
            <param name="f">Function for which the derivative is to be evaluated.</param>
            <param name="point">The location where the derivative is to be evaluated.</param>
            <param name="stepSize">Optional. The finite difference step size.</param>
            <remarks>The most common three point method is an average of a forward and backward difference derivative.</remarks>
            <returns>
            The derivative of the function f, evaluated at the given point
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.NumericalDerivative.RiddersMethod(System.Func{System.Double,System.Double},System.Double,System.Double@,System.Double)">
            <summary>
            Computes the derivative of a function using Ridders' method of polynomial extrapolation.
            </summary>
            <param name="f">Function for which the derivative is to be evaluated.</param>
            <param name="point">The location where the derivative is to be evaluated.</param>
            <param name="err">Output. An estimate of the error in the derivative.</param>
            <param name="stepSize">Optional. The finite difference step size.</param>
            <remarks>
            References: Taken from "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017.
            </remarks>
            <returns>
            The derivative of the function f, evaluated at the given point
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.NumericalDerivative.Gradient(System.Func{System.Double[],System.Double},System.Double[],System.Double)">
            <summary>
            Computes the gradient of a function using the symmetric difference quotient method.
            </summary>
            <param name="f">Function for which the derivative is to be evaluated.</param>
            <param name="point">The location where the derivative is to be evaluated.</param>
            <param name="stepSize">Optional. The finite difference step size.</param>
            <remarks>The most common three point method is an average of a forward and backward difference derivative.</remarks>
            <returns>
            The gradient of the function f, evaluated at the given points
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.NumericalDerivative.Jacobian(System.Func{System.Double,System.Double[],System.Double},System.Double[],System.Double[],System.Double)">
            <summary>
            Computes the Jacobian matrix at given function locations for each parameter point.
            </summary>
            <param name="f">Function for which the derivative is to be evaluate.</param>
            <param name="x">Functional value locations. Determines the rows of the Jacobian.</param>
            <param name="point">The location where the derivative is to be evaluated. Determines the columns of the Jacobian.</param>
            <param name="stepSize">Optional. The finite difference step size.</param>
            <returns>The Jacobian matrix.</returns>
        </member>
        <member name="M:Numerics.Mathematics.NumericalDerivative.Hessian(System.Func{System.Double[],System.Double},System.Double[],System.Double)">
            <summary>
            Computes the Hessian matrix at a given point.
            </summary>
            <param name="f">Function which the derivative is to be evaluated.</param>
            <param name="point">The location where the derivative is to be evaluated.</param>
            <param name="stepSize">Optional. The finite difference step size..</param>
            <returns>The Hessian matrix.</returns>
        </member>
        <member name="M:Numerics.Mathematics.NumericalDerivative.CalculateStepSize(System.Double,System.Int32)">
            <summary>
            A base step size value, h, will be scaled according to the function input parameter.
            </summary>
            <param name="x">The input parameter.</param>
            <param name="order">The order of the derivative.</param>
            <returns> 
            Scaled h
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.Fourier">
            <summary>
            Contains Fourier transform methods.
            </summary>
            <remarks>
            <para>
                <b> Authors:  </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            This class contains shared functions for Fast Fourier Transform (FFT), an algorithm that computes the Discrete Fourier Transform (DFT) which is obtained by 
            decomposing a sequence of values into components of different frequencies. The DFT converts a finite sequence of equally-spaced samples of the discrete-time Fourier 
            transform (DTFT), a complex valued function of frequency. A FFT rapidly computes these transformations by factorizing the DFT matrix into a product of mostly zero factors.
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Fast_Fourier_transform"/>
            </description></item>
            <item><description>
            <see href="https://en.wikipedia.org/wiki/Discrete_Fourier_transform"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Fourier.FFT(System.Double[],System.Boolean)">
            <summary>
            Performs the fast Fourier transform (FFT) on a complex data array.
            </summary>
            <param name="data">Data is a complex array of length n stored as a real array of length 2*n. n must be an integer power of 2.</param>
            <param name="inverse">Determines whether to perform an inverse transform.</param>
            <remarks>
            Replaces the data array by its discrete Fourier transform. If inverse is true, then
            this routine replaces the data array by n times its inverse discrete Fourier Transform.
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Fourier.RealFFT(System.Double[],System.Boolean)">
            <summary>
            Calculates the Fourier transform of a set of n real-valued data points.
            </summary>
            <param name="data">Data is a real array of length n. n must be an integer power of 2.</param>
            <param name="inverse">Determines whether to perform an inverse transform.</param>
            <remarks>
            Replaces these data by the positive frequency half of their complex Fourier transform.
            The real-valued first and last components of the complex transform are returned as
            elements data(0) and data(1), respectively. This routine also calculates the inverse transform of a complex data array
            if it is the transform of real data. (Result in this case must be multiplied by 2/n.)
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.Fourier.Correlation(System.Double[],System.Double[])">
            <summary>
            Computes the correlation of two real datasets. This is NOT a normalized correlation coefficient.
            </summary>
            <param name="data1">Data 1 is a real array of length n. n must be an integer power of 2.</param>
            <param name="data2">Data 2 is a real array of length n. n must be an integer power of 2.</param>
            <remarks>
            The answer is returned in wraparound order, i.e., correlations at increasing negative lags
            are in [n-1] on down to  [n/2], while correlations at increasingly positive lags are in [0]
            up to [n/2-1].
            </remarks>
            <returns>
            An array of the correlation between the two datasets
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.Fourier.Autocorrelation(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Computes the autocorrelation function (ACF) given a series of data.
            </summary>
            <param name="series">The series of data to assess.</param>
            <param name="lagMax">The maximum lag. The first lag begins at zero.</param>
            <returns>
            A 2-column array with the first column contains the lags, and the second the autocorrelation.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.Fourier.IsPowerOfTwo(System.Int32)">
            <summary>
            Helper function to determine if integer is power of 2.
            </summary>
            <param name="n">Integer to test.</param>
            <returns> 
            True if the integer is a power of 2
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition">
            <summary>
            A class for solving a set of linear equations using Cholesky Decomposition.
            </summary>
            <remarks>
            <para>
            <b> Authors: </b>
            <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            The Cholesky decomposition or Cholesky factorization is a decomposition of a Hermitian, positive-definite matrix into the product of 
            a lower triangular matrix and its conjugate transpose. The basic idea of this method includes decomposing a square positive-definite
            matrix by symmetrically applying column-clearing operations from Gaussian Elimination. This method is very useful for Monte Carlo 
            simulations that is utilized in TotalRisk. This method is also roughly twice as efficient as the LU decomposition for solving 
            systems of linear equations. 
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> "Numerical Recipes: The art of Scientific Computing, Third Edition." Press et al. 2017. </item>
            <item>"Numerical Methods for Engineers, Second Edition.", D.V. Griffiths and I.M. Smith, Taylor and Francis Group, 2006. </item>
            <item><description> 
            <see href = "https://en.wikipedia.org/wiki/Cholesky_decomposition" /> 
            </description></item>
            <item><description> 
             <see href = "https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/"/> 
            </description></item> 
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Constructs new Cholesky Decomposition.
            </summary>
            <param name="A">The positive-definite symmetric input matrix A [0..n-1][0..n-1] that is to be Cholesky decomposed.</param>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.L">
            <summary>
            Stores the decomposition.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.A">
            <summary>
            Stores the input matrix A that was decomposed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.IsPositiveDefinite">
            <summary>
            Determines whether the input matrix A is positive definite.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.Solve(Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Solves the set of n linear equations A*x=b using the stored Cholesky decomposition of A=L*L^T.
            </summary>
            <returns> x vector from A*x=b </returns>
            <param name="b">Right-hand side vector b [0..n-1].</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.Backward(Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Solving the L^T * x = y equation with backward substitution
            </summary>
            <param name="y">The input vector y [0..n-1].</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.Forward(Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Solving the L * y = b equation using Forward substitution
            </summary>
            <param name="b">The right-hand side vector b [0..n-1].</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.InverseA">
            <returns>
            Matrix inverse A^-1 using the stored Cholesky decomposition.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.Determinant">
            <summary>
            Using the stored Cholesky decomposition, returns the determinant of the matrix A.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.CholeskyDecomposition.LogDeterminant">
            <summary>
            Using the stored Cholesky decomposition, returns the logarithm of the determinant of the matrix A.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.LinearAlgebra.GaussJordanElimination">
             <summary>
             A class for solving a set of linear equations Gauss-Jordan elimination.
             </summary>
             <remarks>
             <para>
                 <b> Authors: </b>
                 <list type="bullet"> 
                 <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                 <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
             </list>
             </para>
             <para>
             <b> Description: </b>
             </para>
             <para>
             Gauss-Jordan Elimination is a row reduction algorithm that correctly formats matrices
             so that we can solve linear systems in the form A*x = b. 
             </para>
             <para>
             <b> References: </b>
             <list type="bullet">
             <item> "Numerical Recipes: The art of Scientific Computing, Third Edition." Press et al. 2017. </item>
             <item>"Numerical Methods for Engineers, Second Edition.", D.V. Griffiths and I.M. Smith, Taylor and Francis Group, 2006. </item>
             <item><description> 
             <see href = "https://en.wikipedia.org/wiki/Gaussian_elimination" />
             </description></item>
            </list>
            </para>
             </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.GaussJordanElimination.Solve(Numerics.Mathematics.LinearAlgebra.Matrix@,Numerics.Mathematics.LinearAlgebra.Matrix@)">
            <summary>
            Perform Gauss-Jordan elimination.
            </summary>
            <param name="A">The input matrix A.</param>
            <param name="B">The input matrix B containing the M right-hand side vectors.</param>
            <remarks>
            On output, A is replaced by its matrix inverse, and B is replaced by the corresponding set of solution vectors.
            </remarks>
        </member>
        <member name="T:Numerics.Mathematics.LinearAlgebra.LUDecomposition">
            <summary>
            A class for solving a set of linear equations using LU Decomposition.
            </summary>
            <remarks>
            <para>
            <b> Authors: </b>
               <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            LU decomposition is a useful method utilizing Gaussian Elimination to decompose a matrix into 
            a lower and upper triangular matrix. 
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> "Numerical Recipes: The art of Scientific Computing, Third Edition." Press et al. 2017. </item>
            <item>"Applied Numerical Methods with MATLAB for Engineers and Scientists, Third Edition.", Steven C. Chapra, McGraw-Hill, 2012. </item>
            <item><description> 
            <see href = "https://en.wikipedia.org/wiki/LU_decomposition" />
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.LUDecomposition.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Constructs new LU Decomposition.
            </summary>
            <param name="A">The input matrix A that is to be LU decomposed.</param>
            <remarks>
            The input matrix is not altered; a copy is made, on which outer product
            Gaussian elimination is then done in-place.
            </remarks>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.LUDecomposition.LU">
            <summary>
            Stores the decomposition.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.LUDecomposition.A">
            <summary>
            Stores the input matrix A that was LU decomposed.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.LUDecomposition.Solve(Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Solves the set of n linear equations A*x=b using the stored LU decomposition of A.
            </summary>
            <param name="B">Right-hand side vector b [0..n-1].</param>   
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.LUDecomposition.Solve(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Solves m sets of n linear equations A*X=B using LU decomposition of A.
            </summary>
            <param name="B">The right-hand side matrix B [0..n-1][0..n-1].</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.LUDecomposition.InverseA">
            <summary>
            Returns the matrix inverse A^-1 using the stored LU decomposition.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.LUDecomposition.Determinant">
            <summary>
            Using the stored LU decomposition, returns the determinant of the matrix A.
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.LinearAlgebra.Matrix">
            <summary>
            A simple class for performing Matrix operations.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            This class is contains the basis for all Matrix operations used by Numerics.
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new matrix with specified number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(System.Int32)">
            <summary>
            Constructs a new square matrix.
            </summary>
            <param name="size">The number of rows or columns (rows = columns).</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Construct a new matrix based on an initial array.
            </summary>
            <param name="initialArray">Initializing array.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(System.Double[])">
            <summary>
            Constructs a new matrix based on a single column array.
            </summary>
            <param name="initialArray">Initializing array.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(System.Single[])">
            <summary>
            Constructs a new matrix based on a single column array.
            </summary>
            <param name="initialArray">Initializing array.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Constructs a new matrix based on a vector.
            </summary>
            <param name="initialVector">Initializing vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.#ctor(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Constructs a new matrix based on a list of single column arrays.
            </summary>
            <param name="listOfArrays">List of initializing arrays.</param>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.NumberOfRows">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.NumberOfColumns">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Get and sets the element at the specific row and column index.
            </summary>
            <param name="rowIndex">The zero-based row index of the element to get or set.</param>
            <param name="columnIndex">The zero-based column index of the element to get or set.</param>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.Header">
            <summary>
            The matrix column header text. 
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.IsSquare">
            <summary>
            Determines whether this matrix is square.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Matrix.Array">
            <summary>
            Returns the underlying array as-is.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Clone">
            <summary>
            Returns a copy of this matrix.  
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.ToArray">
            <summary>
            Returns the matrix as an array.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Row(System.Int32)">
            <summary>
            Returns a copy of a specific row.
            </summary>
            <param name="index">The zero-based row index</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Column(System.Int32)">
            <summary>
            Returns a copy of a specific column.
            </summary>
            <param name="index">The zero-based column index</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Diagonal">
            <summary>
            Returns the elements of the diagonal.
            </summary>
            <remarks>
            For non-square matrices, the method returns Min(Rows, Columns) elements where i = j (i is the row index, and j is the column index).
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Determinant">
            <summary>
            Returns the matrix determinant.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Inverse">
            <summary>
            Returns the matrix inverse A^-1.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Transpose">
            <summary>
            Transpose the matrix.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Diagonal(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the diagonal matrix.
            </summary>
            <param name="A">The square matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Identity(System.Int32)">
            <summary>
            Returns the identity matrix of size n.
            </summary>
            <param name="size">The number of rows or columns (rows = columns).</param>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Identity_matrix" />
            </para>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Transpose(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the transposed matrix.
            </summary>
            <param name="A">The matrix to transpose.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Sqrt">
            <summary>
            Computes the square root of the matrix point wise. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Sqr">
            <summary>
            Computes the square of the matrix point wise. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Log">
            <summary>
            Computes the log of the matrix point wise. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Exp">
            <summary>
            Computes the exponential of the matrix point wise. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Sum">
            <summary>
            Returns the sum of every point in the matrix.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Multiply(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Multiply by another matrix.
            </summary>
            <param name="matrix">The right-side matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Multiply(Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Multiply by a vector.
            </summary>
            <param name="vector">The right-side vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Multiply(System.Double)">
            <summary>
            Multiply by a scalar.
            </summary>
            <param name="scalar">The scalar to multiply by.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Divide(System.Double)">
            <summary>
            Divide by a scalar.
            </summary>
            <param name="scalar">The scalar value to divide by.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Add(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Add the matrix.
            </summary>
            <param name="matrix">The right-side matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.Subtract(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Subtract the matrix.
            </summary>
            <param name="matrix">The right-side matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Multiply(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies matrix A and B and returns the results as a matrix.
            </summary>
            <param name="A">Left-side matrix.</param>
            <param name="B">Right-side matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Multiply(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double[])">
            <summary>
            Multiplies matrix A with a vector B and returns the results as an array vector.
            </summary>
            <param name="A">The matrix to multiply.</param>
            <param name="vector">The vector to multiply with.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Multiply(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Multiplies matrix A with a vector B and returns the results as an array vector.
            </summary>
            <param name="A">The matrix to multiply.</param>
            <param name="B">The vector to multiply with.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Multiply(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Multiplies a matrix A with a scalar and returns the results as a matrix.
            </summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="scalar">The scalar to multiply by.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Multiply(System.Double,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies a matrix A with a scalar and returns the results as a matrix.
            </summary>
            <param name="scalar">The scalar to multiply by.</param>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Division(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Divides a matrix A with a scalar and returns the results as a matrix.
            </summary>
            <param name="matrix">The matrix to divide.</param>
            <param name="scalar">The scalar to divide by.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Addition(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Add matrix A and B and returns the results as a matrix.
            </summary>
            <param name="A">Left-side matrix.</param>
            <param name="B">Right-side matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_Subtraction(Numerics.Mathematics.LinearAlgebra.Matrix,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Subtract matrix A and B and returns the results as a matrix.
            </summary>
            <param name="A">Left-side matrix.</param>
            <param name="B">Right-side matrix.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_OnesComplement(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the transposed matrix.
            </summary>
            <param name="matrix">The matrix to transpose.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Matrix.op_LogicalNot(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Returns the inverse of the matrix.
            </summary>
            <param name="matrix">The matrix to inverse.</param>
        </member>
        <member name="T:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition">
             <summary>
             A class for solving a set of linear equations using Singular Value Decomposition.
             </summary>
             <remarks>
             <para>
                 <b> Authors: </b>
            <list type = "bullet" >
                 <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                 <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
             </list>
             </para>
             <para>
             <b> Description: </b>
             </para>
             <para>
             Singular value decomposition (SVD) is one of the most useful matrix decomposition methods. Used in:
             <list type="bullet">
             <item> Reducing dimension of large data sets (PCA) </item>
             <item>Separating "signal" from "noise" in real-world data </item>
             <item>Identifying line / low-dim plane of best-fit  to high dimensional data </item>
             <item>Solving/interpreting linear systems of equations </item>
             </list>
             </para>
             <para>
             <b> References: </b>
             <list type="bullet">
             <item> "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017. </item>
             <item> <description> 
             <see href = "https://en.wikipedia.org/wiki/Singular_value_decomposition" />
             </description></item>
             </list>
             </para>
             </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.#ctor(Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Constructs a Singular Value Decomposition. 
            </summary>
            <param name="A">The input matrix A that is to be SV decomposed.</param>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Threshold">
            <summary>
            The default threshold value.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.A">
            <summary>
            Stores the input matrix A that was SV decomposed.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.U">
            <summary>
            M x N column-orthogonal matrix U.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.V">
            <summary>
            Transpose of an N x N orthogonal matrix V.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.W">
            <summary>
            Diagonal matrix W, stored as a vector.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.InverseCondition">
            <summary>
            Returns the reciprocal of the condition number of A.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Rank(System.Double)">
            <summary>
            Return the rank of A, after zeroing any singular values smaller than the threshold.  
            </summary>
            <param name="threshold">The threshold to evaluate.
            If the threshold is negative, a default value based on estimated roundoff is used.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Nullity(System.Double)">
            <summary>
            Return the nullity of A, after zeroing any singular values smaller than the threshold. 
            </summary>
            <param name="threshold">The threshold to evaluate.
            If the threshold is negative, a default value based on estimated roundoff is used.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Range(System.Double)">
            <summary>
            Gives an orthonormal basis for the range of A as the columns of a return matrix. 
            </summary>
            <param name="threshold">The threshold to evaluate.
            If the threshold is negative, a default value based on estimated roundoff is used.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Nullspace(System.Double)">
            <summary>
            Gives an orthonormal basis for the nullspace of A as the columns of a return matrix. 
            </summary>
            <param name="threshold">The threshold to evaluate.
            If the threshold is negative, a default value based on estimated roundoff is used.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Solve(Numerics.Mathematics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Solves A*x=b for a vector x using the pseudoinverse of A as obtained by SVD.
            </summary>
            <param name="B">Right-hand side vector b [0..n-1].</param>
            <param name="threshold">The threshold to evaluate. 
            If positive, the threshold is the threshold value below which singular values are considered zero. 
            If threshold is negative, a default based on expected roundoff error is used. 
            </param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Solve(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Solve m sets of n equations A*X=B using the pseudoinverse of A. 
            </summary>
            <param name="B">The right-hand side matrix B [0..n-1][0..m-1].</param>
            <param name="threshold">The threshold to evaluate. 
            If positive, the threshold is the threshold value below which singular values are considered zero. 
            If threshold is negative, a default based on expected roundoff error is used. 
            </param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Decompose">
            <summary>
            Performs the singular value decomposition.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Reorder">
            <summary>
            Axillary function to reorder.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.Pythag(System.Double,System.Double)">
            <summary>
            Computes (a^2 + b^2)^1/2 without destructive underflow or overflow.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.LogDeterminant">
            <summary>
            Takes Log determinant of the Matrix W
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.SingularValueDecomposition.LogPseudoDeterminant">
            <summary>
            Takes Log determinant of the Matrix W
            </summary>
        </member>
        <member name="T:Numerics.Mathematics.LinearAlgebra.Vector">
            <summary>
            A simple vector class.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
               <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.#ctor(System.Int32)">
            <summary>
            Construct a new vector with specified length.
            </summary>
            <param name="length">The number of elements in the vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.#ctor(System.Int32,System.Double)">
            <summary>
            Construct a new vector with specified length and fill it with a constant value.
            </summary>
            <param name="length"></param>
            <param name="fill">Fill the vector with a constant fill value.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.#ctor(System.Double[])">
            <summary>
            Construct a new vector based an initial array.
            </summary>
            <param name="initialArray">Initializing array.</param>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Vector.Array">
            <summary>
            Returns the underlying array as-is.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Vector.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Vector.Item(System.Int32)">
            <summary>
            Get the element at the specific index.
            </summary>
            <param name="index">The zero-based row index of the element to get or set.</param>
        </member>
        <member name="P:Numerics.Mathematics.LinearAlgebra.Vector.Header">
            <summary>
            The vector header text. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.ToArray">
            <summary>
            Returns the vector as an array.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.ToList">
            <summary>
            Returns the vector as a list.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.Clone">
            <summary>
            Returns a clone of the vector.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.Norm">
            <summary>
            Returns the vector Norm.
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.Distance(Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Returns the Euclidean distance between two vectors ||x - y||.
            </summary>
            <param name="A">Left-side vector.</param>
            <param name="B">Right-side vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.DotProduct(Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="A">Left-side vector.</param>
            <param name="B">Right-side vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.Project(Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Project vector A onto B.
            </summary>
            <param name="A">Left-side vector.</param>
            <param name="B">Right-side vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.op_Multiply(Numerics.Mathematics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Multiplies a vector A with a scalar.
            </summary>
            <param name="A">The vector to multiply.</param>
            <param name="scalar">The scalar to multiply by.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.op_ExclusiveOr(Numerics.Mathematics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Raises each element of the vector A by the exponent b.
            </summary>
            <param name="A">The vector to multiply.</param>
            <param name="b">The exponent b..</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.op_Multiply(Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Multiplies vectors A and B by multiplying corresponding elements. Vectors A and B must the same size. 
            </summary>
            <param name="A">Left-side vector.</param>
            <param name="B">Right-side vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.op_Addition(Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Adds vectors A and B by summing corresponding elements. Vectors A and B must the same size. 
            </summary>
            <param name="A">Left-side vector.</param>
            <param name="B">Right-side vector.</param>
        </member>
        <member name="M:Numerics.Mathematics.LinearAlgebra.Vector.op_Subtraction(Numerics.Mathematics.LinearAlgebra.Vector,Numerics.Mathematics.LinearAlgebra.Vector)">
            <summary>
            Subtracts vectors A and B by subtracting corresponding elements. Vectors A and B must the same size. 
            </summary>
            <param name="A">Left-side vector.</param>
            <param name="B">Right-side vector.</param>
        </member>
        <member name="T:Numerics.Mathematics.ODESolvers.RungeKutta">
            <summary>
            Runge-Kutta method for solving Ordinary Differential Equations (ODE).
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            In numerical analysis, the Runge–Kutta methods are a family of implicit and explicit iterative methods,
            which include the well-known routine called the Euler Method,
            used in temporal discretization for the approximate solutions of ordinary differential equations.
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.ODESolvers.RungeKutta.SecondOrder(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Second Order Runge-Kutta method.
            </summary>
            <param name="f">ODE function F(t,Y).</param>
            <param name="initialValue">Initial value of Y.</param>
            <param name="startTime">Start time.</param>
            <param name="endTime">End time.</param>
            <param name="timeSteps">The number of time steps between the start and end time.</param>
            <returns>
            An array of the ODE function solved at the number of time steps specified, equally spaced between the start and end time.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.ODESolvers.RungeKutta.FourthOrder(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            The Fourth Order Runge-Kutta method.
            </summary>
            <param name="f">ODE function F(t,Y).</param>
            <param name="initialValue">Initial value of Y.</param>
            <param name="startTime">Start time.</param>
            <param name="endTime">End time.</param>
            <param name="timeSteps">The number of time steps between the start and end time.</param>
            <returns>
            An array of the ODE function solved at the number of time steps specified, equally space between the start and end time.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.ODESolvers.RungeKutta.FourthOrder(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            The Fourth Order Runge-Kutta method.
            </summary>
            <param name="f">The ODE function f(t,Y).</param>
            <param name="initialValue">Initial value of Y.</param>
            <param name="startTime">Start time.</param>
            <param name="dt">The time step size.</param>
            <returns>
            The ODE solved at the given time step (i.e. the ODE solved at startTime + dt)
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.ODESolvers.RungeKutta.Fehlberg(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The Runge-Kutta-Fehlberg method.
            </summary>
            <param name="f">The ODE function dY/dt = f(t,Y).</param>
            <param name="initialValue">Initial value of Y.</param>
            <param name="startTime">Start time.</param>
            <param name="dt">The user defined step size, which is also the maximum step size.</param>
            <param name="dtMin">The minimum step size.</param>
            <param name="tolerance">The absolute tolerance. Default = 1E-3.</param>
            <remarks>
            References:
            <list type="bullet">
            <item>Runge–Kutta–Fehlberg: <see href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method"/></item>
            <item>Adaptive step size: <see href="https://en.wikipedia.org/wiki/Adaptive_step_size"/></item>
            </list>
            </remarks>
            <returns>
            The ODE solved at the given time step (i.e. the ODE solved at startTime + dt)
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.ODESolvers.RungeKutta.CashKarp(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The adaptive Runge-Kutta-Cash-Karp method.
            </summary>
            <param name="f">The ODE function dY/dt = f(t,Y).</param>
            <param name="initialValue">Initial value of Y.</param>
            <param name="startTime">Start time.</param>
            <param name="dt">The user defined step size, which is also the maximum step size.</param>
            <param name="dtMin">The minimum step size.</param>
            <param name="tolerance">The absolute tolerance. Default = 1E-3.</param>
            <remarks>
            References:
            <list type="bullet">
            <item>Runge–Kutta–Cash-Karp: <see href="https://en.wikipedia.org/wiki/Cash%E2%80%93Karp_method"/></item>
            <item>Adaptive step size: <see href="https://en.wikipedia.org/wiki/Adaptive_step_size"/></item>
            </list>
            </remarks>
            <returns>
            The ODE solved at the given time step (i.e. the ODE solved at startTime + dt)
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.RootFinding.Brent">
            <summary>
            The Brent root-finding algorithm.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <para>
            <b> Description: </b>
            </para>
            This class contains a shared function for finding the solution to the equation f(x)=0 using Brent's method. Brent's method is a 
            hybrid root-finding method that combines the use of bracketing methods, namely, the bisection method, secant method, and inverse 
            quadratic interpolation. 
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.</item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Root-finding_algorithm"/>
            </description></item>
            <item> <description> 
            <see href="https://en.wikipedia.org/wiki/Brent%27s_method"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.RootFinding.Brent.Solve(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Use the Brent method to find a solution of the equation where f(x)=0.
            </summary>
            <param name="f">The function to solve.</param>
            <param name="lowerBound">The lower bound (a) of the interval containing the root.</param>
            <param name="upperBound">The upper bound (b) of the interval containing the root.</param>
            <param name="tolerance">Optional. Desired tolerance for both the root and the function value at the root.
            The root will be refined until the tolerance is achieved or the maximum number of iterations is reached. Default = 1e-8.</param>
            <param name="maxIterations">Optional. Maximum number of iterations. Default = 1000.</param>
            <param name="reportFailure">Optional. If set to true, an exception will be thrown if the routine fails to converge.
            If set to false, the root from the last iteration will be returned if the routine fails to converge. Default = True.</param>
            <returns>
            The root to the equation f(x)=0 given the specified tolerance.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.RootFinding.Brent.Bracket(System.Func{System.Double,System.Double},System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Bracket the root by expanding outward.
            </summary>
            <param name="f">The function to solve.</param>
            <param name="lowerBound">The lower bound (a) of the interval containing the root.</param>
            <param name="upperBound">The upper bound (b) of the interval containing the root.</param>
            <param name="f1">Output. The function value at the lower bound.</param>
            <param name="f2">Output. The function value at the upper bound.</param>
            <param name="maxIterations">Optional. Maximum number of iterations. Default = 1000.</param>
        </member>
        <member name="T:Numerics.Mathematics.RootFinding.Secant">
            <summary>
            The secant root-finding algorithm.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <para>
            <b> Description: </b>
            </para>
            This class contains a shared function for finding the solution to the equation, where f(x)=0 using the Secant method.
            The secant method is a root-finding procedure in numerical analysis that uses a series of roots of secant lines to
            better approximate a root of a function.
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.</item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Root-finding_algorithm"/>
            </description></item>
            <item> <description> 
            <see href="https://en.wikipedia.org/wiki/Secant_method"/>
            </description></item>
            <item> <description> 
            <see href="http://www.m-hikari.com/ams/ams-2017/ams-53-56-2017/p/hahmAMS53-56-2017.pdf"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.RootFinding.Secant.Solve(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Use the secant method to find a solution of the equation where f(x)=0. 
            </summary>
            <param name="f">The function to solve.</param>
            <param name="lowerBound">The lower bound (a) of the interval containing the root.</param>
            <param name="upperBound">The upper bound (b) of the interval containing the root.</param>
            <param name="tolerance">Optional. Desired tolerance for both the root and the function value at the root.
            The root will be refined until the tolerance is achieved or the maximum number of iterations is reached. Default = 1e-8.</param>
            <param name="maxIterations">Optional. Maximum number of iterations. Default = 1000.</param>
            <param name="reportFailure">Optional. If set to true, an exception will be thrown if the routine fails to converge.
            If set to false, the root from the last iteration will be returned if the routine fails to converge. Default = True.</param>
            <returns>
            The root to the equation f(x)=0 given the specified tolerance.
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.RootFinding.Bisection">
            <summary>
            Contains the bisection root-finding algorithm.
            </summary>
            <remarks>
            <para>
                 <b> Authors: </b>
                <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <para>
            <b> Description: </b>
            </para>
            This class contains a shared function for finding the solution to the equation f(x)=0 using the bisection method.
            Bisection method is a variation of the incremental search method in which the interval is always divided in half.  
            If a function changes sign over an interval, the function value at the midpoint is evaluated. The location 
            of the root is then determined as lying within the interval for the next iteration. 
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> "Numerical Recipes: The art of Scientific Computing, Third Edition." Press et al. 2017. </item>
            <item>"Applied Numerical Methods with MATLAB for Engineers and Scientists, Third Edition.", Steven C. Chapra, McGraw-Hill, 2012. </item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Root-finding_algorithm"/>
            </description></item>
            <item> <description> 
            <see href="https://en.wikipedia.org/wiki/Bisection_method"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.RootFinding.Bisection.Solve(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Use the bisection method to find the solution of the equation where f(x)=0. 
            </summary>
            <param name="f">The function to solve.</param>
            <param name="firstGuess">This is the first guess at the root.</param>
            <param name="lowerBound">The lower bound of the interval containing the root.</param>
            <param name="upperBound">The upper bound of the interval containing the root.</param>
            <param name="tolerance">Optional. Desired tolerance for both the root and the function value at the root.
            The root will be refined until the tolerance is achieved or the maximum number of iterations is reached. Default = 1e-8.</param>
            <param name="maxIterations">Optional. Maximum number of iterations. Default = 1000.</param>
            <param name="reportFailure">Optional. If set to true, an exception will be thrown if the routine fails to converge.
            If set to false, the root from the last iteration will be returned if the routine fails to converge. Default = True.</param>
            <returns>
            The root to the equation f(x)=0 given the specified tolerance.
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.RootFinding.NewtonRaphson">
            <summary>
            This class contains a shared function for finding the solution to the equation f(x)=0 using the Newton-Raphson method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
            </list>
            </para>
            <para>
            <para>
            <b> Description: </b>
            </para>
            In numerical analysis, Newton's method (also known as the Newton–Raphson method), named after Isaac Newton and Joseph Raphson,
            is a method for finding successively better approximations to the roots (or zeros) of a real-valued function. In this method, 
            one takes an initial guess at the root, then a tangent can be extended from the point evaluated at the inital value. The point
            where this tangent crosses the x axis, usually represents an improved estimate of the root. 
            </para>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item> "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott, Cambridge University Press, 1991.</item>
            <item> "Applied Numerical Methods with MATLAB for Engineers and Scientists, Third Edition.", Steven C. Chapra, McGraw-Hill, 2012. </item>
            <item><description> 
            <see href="https://en.wikipedia.org/wiki/Root-finding_algorithm"/>
            </description></item>
            <item> <description> 
            <see href="https://en.wikipedia.org/wiki/Newton%27s_method"/>
            </description></item>
            <item> <description> 
            <see href="http://www.m-hikari.com/ams/ams-2017/ams-53-56-2017/p/hahmAMS53-56-2017.pdf"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.RootFinding.NewtonRaphson.Solve(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Use the basic Newton-Raphson method to find a solution of the equation f(x)=0.
            </summary>
            <remarks>
            <para>
            Remarks:
            </para>
            The basic algorithm aborts immediately if the root leaves the bound interval.
            </remarks>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="firstGuess">This is the first guess at the root (c).</param>
            <param name="tolerance">Optional. Desired tolerance for both the root and the function value at the root.
            The root will be refined until the tolerance is achieved or the maximum number of iterations is reached. Default = 1e-8.</param>
            <param name="maxIterations">Optional. Maximum number of iterations. Default = 1000.</param>
            <param name="reportFailure">Optional. If set to true, an exception will be thrown if the routine fails to converge.
            If set to false, the root from the last iteration will be returned if the routine fails to converge. Default = True.</param>
            <returns>
            The root to the equation f(x)=0 given the specified tolerance.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.RootFinding.NewtonRaphson.RobustSolve(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Use the robust Newton-Raphson method to find a solution of the equation f(x)=0.
            </summary>
            <remarks>
            Robust Newton-Raphson method falls back to bisection when over or undershooting the bounds.
            </remarks>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="firstGuess">This is the first guess at the root.</param>
            <param name="lowerBound">The lower bound of the interval containing the root. Aborts if it leaves the interval.</param>
            <param name="upperBound">The upper bound of the interval containing the root. Aborts if it leaves the interval.</param>
            <param name="tolerance">Optional. Desired tolerance for both the root and the function value at the root.
            The root will be refined until the tolerance is achieved or the maximum number of iterations is reached. Default = 1e-8.</param>
            <param name="maxIterations">Optional. Maximum number of iterations. Default = 1000.</param>
            <param name="reportFailure">Optional. If set to true, an exception will be thrown if the routine fails to converge.
            If set to false, the root from the last iteration will be returned if the routine fails to converge. Default = True.</param>
            <returns>
            The root to the equation f(x)=0 given the specified tolerance.
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.SpecialFunctions.Beta">
             <summary>
             A class for Beta functions.
             </summary>
             <remarks>  
             <para>
                 <b> Authors: </b>
                 Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
             </para>
             <para>
             <b> Description: </b>
             The beta function is also know as Euler's integral. Denoted with the Greek
             capital beta, it has the following equation:
             <code>
                          1
                 B(a,b) = ∫ t^(a-1)*(t-1)^(b-1) dt
                          0
             </code>
             <para>
             It can also be written in terms of the Gamma function as:
             </para>
             <code>
                 B(a,b) = Γ(a)*Γ(b) / Γ(a+b)
            
             </code>
             </para>
             <para>
             <b> References: </b>
             <list type="bullet">
             <item><description>
             "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott,
             Cambridge University Press, 1991.
             https://en.wikipedia.org/wiki/Beta_function
             </description></item>
             <item><description>
             This class uses beta functions from the Accord Math Library
             <see href = "http://accord-framework.net" />
             </description></item>
             </list>
             </para>
             </remarks>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.Function(System.Double,System.Double)">
            <summary>
            The Beta function
            </summary>
            <remarks>
            References:
            <list type="bullet">
            <item><description> 
            "Numerical Recipes, Routines and Examples in Basic", J.C. Sprott,
            Cambridge University Press, 1991.
             </description></item>
            </list>
            </remarks>
            <param name="a">The lower limit </param>
            <param name="b">The upper limit </param>
            <returns>
            The beta function evaluated at the given upper and lower limit
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.Incomplete(System.Double,System.Double,System.Double)">
            <summary>
            The Incomplete (regularized) Beta function Ix(a, b)
            </summary>
            <remarks>
            <para>
            This code was copied from the Accord Math Library.
            </para>
            References:
            <list type="bullet">
            <item><description>
            Accord Math Library, <see href = "http://accord-framework.net" />
            </description></item>
            </list>
            </remarks>
            <param name="a">The lower limit </param>
            <param name="b">The upper limit </param>
            <param name="x">The value to be evaluated </param> 
            <returns>
            The incomplete beta function evaluated at the given x, given an upper and lower limit
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.Incbcf(System.Double,System.Double,System.Double)">
            <summary>
            Continued fraction expansion #1 for incomplete beta integral
            </summary>
            <remarks>
            This code was copied from the Accord Math Library.
            <para>
            </para>
            References:
            <list type="bullet">
            <item><description>
            Accord Math Library, <see href = "http://accord-framework.net" />
            </description></item>
            </list>
            </remarks>
            <param name="a">The lower limit </param>
            <param name="b">The upper limit </param>
            <param name="x">The value to be evaluated </param> 
            <returns>
            The continue fraction expansion #1 for the incomplete beta integral evaluated at the given x, given a lower and upper limit
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.Incbd(System.Double,System.Double,System.Double)">
            <summary>
            Continued fraction expansion #2 for incomplete beta integral
            </summary>
            <remarks>
            This code was copied from the Accord Math Library.
            <para>
            </para>
            References:
            <list type="bullet">
            <item><description>
            Accord Math Library, <see href = "http://accord-framework.net" />
            </description></item>
            </list>
            </remarks>
            <param name="a">The lower limit </param>
            <param name="b">The upper limit </param>
            <param name="x">The value to be evaluated </param> 
            <returns>
            The continue fraction expansion #2 for the incomplete beta integral evaluated at the given x, given a lower and upper limit
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.IncompleteInverse(System.Double,System.Double,System.Double)">
            <summary>
            Inverse of incomplete beta integral
            </summary>
            <remarks>
            This code was copied from the Accord Math Library.
            <para>
            </para>
            References:
            <list type="bullet">
            <item><description>
            Accord Math Library, <see href = "http://accord-framework.net" />
            </description></item>
            </list>
            </remarks>
            <param name="aa"> must be positive </param>
            <param name="bb"> must positive </param>
            <param name="yy0"> the value to be evaluated by the inverse (such that y = Ix(aa, bb)) </param>
            <returns>
            The inverse of the incomplete beta integral at the given y
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.PowerSeries(System.Double,System.Double,System.Double)">
            <summary>
            Power series for incomplete beta integral
            </summary>
            <remarks>
            Use when b*x is small and x not too close to 1.
            <para>
            This code was copied from the Accord Math Library.
            </para>
            References:
            <list type="bullet">
            <item><description>
            Accord Math Library, <see href = "http://accord-framework.net" />
            </description></item>
            </list>
            </remarks>
            <param name="a">The lower limit </param>
            <param name="b">The upper limit </param>
            <param name="x">The value to be evaluated </param> 
            <returns>
            The power series for the incomplete beta integral evaluated at the given x, given an upper and lower limit
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Beta.IncompleteRatio(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes incomplete beta function ratio
            </summary>
            <remarks>
            References:
            <list type="bullet">
            <item><description>
            Algorithm as 63 applied statistics (1973), vol.22, no.3.
            <see href = "http://people.sc.fsu.edu/~jburkardt/f77_src/asa243/asa243.f" />
            </description></item>
            </list>
            </remarks>
            <param name="x">The argument, between 0 and 1 </param>
            <param name="p"> must be positive </param>
            <param name="q"> must be positive </param>
            <param name="beta">The logarithm of the complete beta function </param> 
            <returns>
            The incomplete beta function ratio (incomplete / complete)
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.SpecialFunctions.Debye">
            <summary>
            The Debye function.
            </summary>
            <remarks>
            <para>
                 <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            In mathematics, the Debye function is given by the equation:
            </para>
            <code>
                             x
                D(x) = x/x^n ∫  t^n / (e^t - 1) dt
                             0
            </code>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Debye_function" />
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Debye.Function(System.Double)">
            <summary>
            Computes the Debye function.
            </summary>
            <param name="x">The point in the series to evaluate.</param>
            <remarks>
            <para>
                Authors:
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            References:
            <list type="bullet">
            <item><description>
            <see href = "http://duffy.princeton.edu/sites/default/files/pdfs/links/Debye_Function.pdf"/>
            </description></item>
            </list>
            </remarks>
            <returns>
            The Debye function evaluated at the given x
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.SpecialFunctions.Evaluate">
            <summary>
            Evaluation functions useful for computing polynomials. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Evaluate.Polynomial(System.Double[],System.Double)">
            <summary>
            Evaluates a double precision polynomial.
            </summary>
            <remarks>
            For sanity's sake, the value of N indicates the NUMBER of
            coefficients, or more precisely, the ORDER of the polynomial,
            rather than the DEGREE Of the polynomial. The two quantities
            differ by 1, but cause a great deal of confusion.
            <para>
            For example, a polynomial of order 4 in this function would be:
            coefficients[3]*x^3 + coefficients[2]*x^2 + coefficients[1]*x + coefficients[0]
            </para>
            <para>
            References: 
            <list type="bullet">
            <item><description>
            Based on a function contained in algorithm AS241, Applied Statistics, 1988, Vol. 37, No. 3.
            </description></item>
            </list>
            </para>
            </remarks>
            <param name="coefficients">The coefficients of the polynomial. Item[0] is the constant term. </param>
            <param name="x">The point at which the polynomial is to be evaluated.</param>
            <returns>
            The polynomial with the given coefficients evaluated at x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Evaluate.PolynomialRev(System.Double[],System.Double,System.Int32)">
            <summary>
            Evaluates a double precision polynomial. Coefficients are in reverse order.
            </summary>
            <remarks>
            For example, a polynomial of order 4 in this function would be:
            coefficients[0]*x^3 + coefficients[1]*x^2 + coefficients[2]*x + coefficients[3]
            </remarks>
            <param name="coefficients">The coefficients of the polynomial. The last element in the list is the constant term.</param>
            <param name="x">The point at which the polynomial is to be evaluated.</param>
            <param name="n"> Optional parameter to redefine the order of the polynomial to be n+1 </param>
            <returns>
            The polynomial with the given coefficients in reverse order evaluated at x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Evaluate.PolynomialRev_1(System.Double[],System.Double)">
            <summary>
            Evaluates a double precision polynomial. Coefficients are in reverse order, and coefficient(N) = 1.0.
            </summary>
            <remarks>
            For example, a polynomial of order 4 in this function would be:
            x^3 + coefficients[0]*x^2 + coefficients[1]*x + coefficients[2]
            </remarks>
            <param name="coefficients"> The coefficients of the polynomial. The last element in the list is the constant term, and the first element 
            is the coefficient for the second term, the coefficient for the first term is always 1 </param>
            <param name="x"> The point at which the polynomial is to be evaluated </param>
            <returns>
            The polynomial with the given coefficients in reverse order, with 1 as the coefficient for the first term, evaluated at x
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.SpecialFunctions.Factorial">
            <summary>
            Factorial functions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            </para>
            <b> Description: </b>
            A factorial is a non negative integer n, denoted by n!, that is the product of all positive integers 
            less than or equal to n. For example, 5! equals (1 * 2 * 3 * 4 * 5) which is 120. It is also important to note
            that 0! equals 1.
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Factorial" />
            </description></item>
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Binomial_coefficient" />
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.Function(System.Int32)">
            <summary>
            Computes the factorial of an integer.
            </summary>
            <param name="x">An integer greater than 0 </param>
            <returns>
            The product of all integers less than or equal to the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.Function(System.Int64)">
            <summary>
            Computes the factorial of an integer.
            </summary>
            <param name="x">An integer greater than 0 </param>
            <returns>
            The product of all integers less than or equal to the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.LogFactorial(System.Int32)">
            <summary>
            Computes the logarithmic factorial function x = ln(x!) of an integer x > 0.
            </summary>
            <param name="x">An integer greater than 0 </param>
            <returns>
            The log of the product of all integers less than or equal to the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient.
            </summary>
            <remarks>
            The equation for the binomial coefficient is :
            <code>
                n chose k = n! / k!(n-k)!
            </code>
            </remarks>
            <param name="n">An integer greater than or equal to 0 </param>
            <param name="k">An integer greater than or equal to 0 </param>
            <returns>
            The binomial coefficient evaluated at n and k (n chose k)
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.FindCombosRecursive(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper function for FindCombinations() 
            </summary>
            <param name="buffer"> An array to store the current combination being constructed </param>
            <param name="done"> The index of where the next element of the combination should be placed </param>
            <param name="begin"> Index of where to start adding elements. Ensures each element is only included once</param>
            <param name="end"> The last index (exclusive) to be inlcuded in the current combination </param>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.FindCombinations(System.Int32,System.Int32)">
            <summary>
            Finds each m combinations within n.
            </summary>
            <param name="m">The combination size.</param>
            <param name="n">The overall count.</param>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Factorial.AllCombinations(System.Int32)">
            <summary>
            Finds all combinations of m within n without replacement.           
            </summary>
            <param name="n">The overall count.</param>
            <returns>
            An array of all possible combinations, represented with 1s and 0s, where 1 is the occurrence
            of an event.
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.SpecialFunctions.Gamma">
            <summary>
            Gamma Γ(x) functions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description </b>
                In mathematics, the gamma function (represented by the capital Greek
                letter Γ) is an extension of the factorial function, with its argument
                shifted down by 1, to real and complex numbers. That is, if <c>n</c> is
                a positive integer:
            </para>
            <code>
            
                Γ(n) = (n-1)!
            
            </code>
            <para>
                The gamma function is defined for all complex numbers except the negative
                integers and zero. For complex numbers with a positive real part, it is
                defined via an improper integral that converges:
            </para>
            <code>
                       ∞
                Γ(z) = ∫  t^(z-1)e^(-t) dt
                       0
            </code>
            <para>
                This integral function is extended by analytic continuation to all
                complex numbers except the non-positive integers (where the function
                has simple poles), yielding the meromorphic function we call the gamma
                function.
                The gamma function is a component in various probability-distribution
                functions, and as such it is applicable in the fields of probability
                and statistics, as well as combinatorics.
            </para>
            <para>
            <b> References: </b>
                This code was copied and modified from two primary sources: 1) THe LMOMENTS FORTAN package from J. R. M. Hosking;
                and 2) the Accord Math Library.
            <list type="bullet">
            <item><description>
                LMOMENTS package. Available at: <see href = "http://ftp.uni-bayreuth.de/math/statlib/general/lmoments"/>
            </description></item>
            <item><description>
                Accord Math Library, <see href="http://accord-framework.net"/>
            </description></item>
            <item><description>
                Wikipedia contributors, "Gamma function,". Wikipedia, The Free
                Encyclopedia. Available at: <see href = "http://en.wikipedia.org/wiki/Gamma_function"/>
            </description></item>
            <item><description>
                Cephes Math Library, <see href = "http://www.netlib.org/cephes/"/>
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Mathematics.SpecialFunctions.Gamma.GammaMax">
            <summary>
            The maximum Gamma value. 
            </summary>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Stirling(System.Double)">
            <summary>
            The Stirling approximation
            </summary>
            <remarks>
            <para>
            In mathematics, Stirling's approximation (or Stirling's formula) is an approximation for factorials.
            It is a good approximation, leading to accurate results even for small values of n.
            </para>
            References: 
            <list type="bullet">
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Stirling%27s_approximation"/>
            </description></item>
            </list>
            </remarks>
            <param name="x">  The value to be evaluated </param>
            <returns>
            The Stirling approximation for the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Lanczos(System.Double)">
            <summary>
            The Lancoz approximation
            </summary>
            <remarks>
            <para>
            In mathematics, the Lanczos approximation is a method for computing the gamma function numerically,
            published by Cornelius Lanczos in 1964. It is a practical alternative to the more popular
            Stirling's approximation for calculating the gamma function with fixed precision.
            </para>
             References: 
            <list type="bullet">
            <item><description>
            <see herf = "https://en.wikipedia.org/wiki/Lanczos_approximation"/>
            </description></item>
            </list>
            </remarks>
            <param name="x"> The value to be evaluated </param>
            <returns>
            The Lancoz approximation of the Gamma function evaluated at the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Function(System.Double)">
            <summary>
            The Gamma function.
            </summary>
            <remarks>
            <para>
            </para>
            </remarks>
            <param name="x"> The value to be evaluated </param>
            <returns>
            The Gamma function evaluated at the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Digamma(System.Double)">
            <summary>
            The digamma function.
            </summary>
            <remarks>
            The digamma function is also know as Euler's PSI function.
            <para>
            References:
            <list type="bullet">
            <item><description>
            Based algorithm AS103, Applied Statistics, 1976, Vol. 25, No. 3.
            </description></item>
            </list>
            </para>
            </remarks>
            <param name="X"> The value to be evaluated </param>
            <returns>
            The first derivative of LogGamma given X.
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Trigamma(System.Double)">
            <summary>
            The Trigamma function.
            </summary>
            <remarks>
            <para>
            References: 
            <list type="bullet">
            <item><description>
            Based algorithm AS121, Applied Statistics, 1978, Vol. 27, No. 1.
            </description></item>
            <item><description>
            This code has been adapted from the FORTRAN77 and subsequent
            C code by B. E. Schneider and John Burkardt. The code had been
            made public under the GNU LGPL license.
            </description></item>
            </list>
            </para>
            </remarks>
            <param name="X"> The value to be evaluated </param>
            <returns>
            Calculates Trigamma(x) = d^2 logGamma(x) / dx^2
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.LogGamma(System.Double)">
            <summary>
            Natural logarithm of the Gamma function.
            </summary>
            <remarks>
            References: 
            <list type="bullet">
            <item><description>
            Based algorithm ACM291, Commun. Assoc. Comput. Mach. (1966)
            </description></item>
            </list>
            </remarks>
            <param name="X"> The value to be evaluated </param>
            <returns>
            The natural logarithm of the Gamma function evaluated at the given x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Incomplete(System.Double,System.Double)">
            <summary>
            The incomplete gamma integral.
            </summary>
            <remarks>
            References:
            <list type="bullet">
            <item><description>
            Based on algorithm AS239, Applied Statistics, 1988, Vol. 37, No. 3.
            </description></item>
            <item><description>
            N.L. Johnson And S. Kotz, "Continuous Univariate Distributions 1", P.180
            </description></item>
            </list>
            </remarks>
            <param name="X">Argument of function (upper limit of integration).</param>
            <param name="alpha">The shape parameter.</param>
            <returns>
            The incomplete gamma integral evaluated with the given upper limit x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.UpperIncomplete(System.Double,System.Double)">
            <summary>
            Upper incomplete regularized Gamma function Q
            (a.k.a the incomplete complemented Gamma function)
            </summary>
            <remarks>
            This function is equivalent to Q(x) = Γ(a, x) / Γ(s).
            </remarks>
            <param name="x"> The value to be evaluated (lower limit of integration) </param>
            <param name="a">  complex parameter, such that the real part of a is positive </param>
            <returns>
            The upper incomplete Gamma function evaluated with the lower limit x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.LowerIncomplete(System.Double,System.Double)">
            <summary>
            Lower incomplete regularized gamma function P
            (a.k.a. the incomplete Gamma function).
            </summary>
            <remarks>
            This function is equivalent to P(x) = γ(a, x) / Γ(s).
            </remarks>
            <param name="a">  complex parameter, such that the real part of a is positive </param>
            <param name="x"> The value to be evaluated (upper limit of integration) </param>
            <returns>
            The lower incomplete Gamma function evaluated with the upper limit x
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.InverseLowerIncomplete(System.Double,System.Double)">
            <summary>
            Inverse of the <see cref="M:Numerics.Mathematics.SpecialFunctions.Gamma.LowerIncomplete(System.Double,System.Double)">
            incomplete Gamma integral (LowerIncomplete, P)</see>.
            </summary>
            <param name="a">  complex parameter, such that the real part of a is positive </param>
            <param name="y">  the value to evaluate the inverse at </param>
            <returns>
            The inverse of the lower incomplete Gamma function evaluated at y
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.InverseUpperIncomplete(System.Double,System.Double)">
            <summary>
            Inverse of the <see cref="M:Numerics.Mathematics.SpecialFunctions.Gamma.UpperIncomplete(System.Double,System.Double)">complemented
            incomplete Gamma integral (UpperIncomplete, Q)</see>.
            </summary>
            /// <param name="a">  complex parameter, such that the real part of a is positive </param>
            <param name="y"> the value to evaluate the inverse at </param>
            <returns>
            The inverse of the upper incomplete Gamma function evaluated at y
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Gamma.Inverse(System.Double,System.Double)">
            <summary>
            Inverse of the <see cref="M:Numerics.Mathematics.SpecialFunctions.Gamma.Function(System.Double)">complemented
            Gamma function (Function, P)</see>.
            </summary>
            <param name="a">  complex parameter, such that the real part of a is positive </param>
            <param name="y"> the value to evaluate the inverse at </param>
            <returns>
            The inverse of the Gamma function evaluated at y
            </returns>
        </member>
        <member name="T:Numerics.Mathematics.SpecialFunctions.Erf">
            <summary>
            The error function.
            </summary>
            <remarks>
            <para>
                 <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            The error function, also known as the Gauss error function, is defined 
            as:
            </para>
            <code>
                                   X
                erf(X) = 2/sqrt(𝜋) ∫  e^(-t^2) dt
                                   0           
            </code>
            <para>
            <b> References: </b>
            <list type="bullet">
            <item><description>
            <see href = "https://en.wikipedia.org/wiki/Error_function#cite_note-2"/>
             </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Erf.Function(System.Double)">
            <summary>
            Computes the error function
            </summary>
            <param name="X"> The upper bound </param>>
            <returns>
            The error function evaluated with the given upper bound
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Erf.Erfc(System.Double)">
            <summary>
            Computes the complement of the error function
            </summary>
            <param name="X"> The upper bound </param>>
            <returns>
            The complement of the error function evaluated with the given upper bound
            </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Erf.InverseErf(System.Double)">
             <summary>
             Computes the inverse error function
             </summary>
            <param name="y"> The value to be evaluated (such that y = erf(erf^-1(y)) ) </param>
             <returns>
             The inverse error function evaluated at the given y
             </returns>
        </member>
        <member name="M:Numerics.Mathematics.SpecialFunctions.Erf.InverseErfc(System.Double)">
             <summary>
             Computes the inverse of the complement of the error function
             </summary>
            <param name="y"> The value to be evaluated (such that y = erf(erf^-1(y)) ) </param>
             <returns>
             The inverse of the complement of the error function evaluated at the given y
             </returns>
        </member>
        <member name="T:Numerics.Sampling.LatinHypercube">
            <summary>
            A class to perform Latin hypercube sampling (LHS).
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para> 
            <b> Description: </b>
            </para>
            <para>
            Stratified sampling is used to generate uniform random numbers by dividing the interval [0,1) into n bins 
            of equal probability, where n is the total number of samples required. 
            <para>
            In each iteration:
            </para>
            <list type="number">
            <item>
            A random number is generated to select one of the remaining bins.
            </item>
            <item>
            A second random number is generated to select a value within the chosen bin.
            </item>
            <item>
            The selected bin is marked as used and will not be selected in subsequent iterations.
            </item>
            </list>
            <para>
            This process is repeated until all n bins have been sampled, ensuring that each bin is selected exactly once.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.LatinHypercube.Random(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate random samples using the Latin hypercube method. 
            </summary>
            <param name="sampleSize">The number of random samples.</param>
            <param name="dimension">Optional. The spatial dimension. Default = 1.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="M:Numerics.Sampling.LatinHypercube.Median(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate samples using the median Latin hypercube method. 
            </summary>
            <param name="sampleSize">The number of samples.</param>
            <param name="dimension">Optional. The spatial dimension. Default = 1.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
        </member>
        <member name="T:Numerics.Sampling.MCMC.ARWMH">
            <summary>
            This class performs Bayesian MCMC using the adaptive random walk Metropolis-Hastings (RWMH) method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
               <see href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.ARWMH.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood)">
            <summary>
            Constructs a new ARWMH sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>      
        </member>
        <member name="P:Numerics.Sampling.MCMC.ARWMH.Scale">
            <summary>
            The scaling parameter used to scale the adaptive covariance matrix.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ARWMH.Beta">
            <summary>
            Determines how often to sample from the small identity covariance matrix; e.g., 0.05 will result in sampling 5% of the time.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ARWMH.CrossoverProbability">
            <summary>
            Determines how often to sample from a different chain; e.g., 0.10 will result in sampling from a different chain 10% of the time.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ARWMH.ProposalSigma">
            <summary>
            The covariance matrix Σ (sigma) for the proposal distribution.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.ARWMH.ValidateCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.ARWMH.InitializeCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.ARWMH.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Sampling.MCMC.LogLikelihood">
            <summary>
            The log-likelihood function to evaluate.
            </summary>
            <param name="parameters">The list of parameters to evaluate.</param>
            <returns>The log-Likelihood given the parameter set.</returns>
            <remarks>
            This function should account for the data likelihood 
            as well as the prior likelihood of the model parameters.
            </remarks>
        </member>
        <member name="T:Numerics.Sampling.MCMC.MCMCSampler">
            <summary>
            A base class for all Markov Chain Monte Carlo (MCMC) samplers.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood)">
            <summary>
            Constructs a new MCMC sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>    
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.PRNGSeed">
            <summary>
            Gets and sets the pseudo random number generator (PRNG) seed.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.InitialIterations">
            <summary>
            Determines the number of iterations used to initialize the chains. It is recommended that the initial iterations be at least 10 x number of parameters in length.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.WarmupIterations">
            <summary>
            Gets and sets the number of warm up MCMC iterations to discard at the beginning of the simulation.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.Iterations">
            <summary>
            Gets and sets the number of MCMC iterations to simulate.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.NumberOfChains">
            <summary>
            Gets and sets the number of Markov Chains.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.ThinningInterval">
            <summary>
            Gets and sets the thinning interval. This determines how often the MCMC iterations will be recorded and evaluated.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler._simulations">
            <summary>
            The number of simulations that have been run with this instance of the sampler. 
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler._masterPRNG">
            <summary>
            The master pseudo random number generator (PRNG).
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler._chainPRNGs">
            <summary>
            The PRNG for each Markov Chain.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler._chainStates">
            <summary>
            The current states of each chain. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.LogLikelihoodFunction">
            <summary>
            The Log-Likelihood function to evaluate. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.PriorDistributions">
            <summary>
            Gets and sets the list of prior distributions for the model parameters.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.NumberOfParameters">
            <summary>
            Gets the number of parameters to evaluate.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.IsPopulationSampler">
            <summary>
            Determines whether to update the population matrix when the chain states are recorded.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.ParallelizeChains">
            <summary>
            Determines if the chains should be sampled in parallel. Default = true.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.ResumeSimulation">
            <summary>
            Determines if the MCMC simulation should be resumed. Default = false.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.MCMC.MCMCSampler.InitializationType">
            <summary>
            Enumerates the initialization types.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler.InitializationType.MAP">
            <summary>
            Initialize the chains using the Maximum a Posteriori (MAP) estimate and covariance matrix.
            If the MAP optimization fails, chains will be automatically initialization with random samples from the priors.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler.InitializationType.Randomize">
            <summary>
            Automatically initialize the chains with random samples from the priors. This is the default.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler.InitializationType.UserDefined">
            <summary>
            Initialize the chains from user-defined points. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.Initialize">
            <summary>
            Determines whether to initialize the chains using the Maximum a Posteriori (MAP) estimate and covariance matrix.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler._mapSuccessful">
            <summary>
            Determines if the Maximum a Posteriori (MAP) estimate was successful.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.MCMC.MCMCSampler._MVN">
            <summary>
            The Multivariate Normal proposal distribution set from the MAP estimate.
            </summary>
        </member>
        <member name="E:Numerics.Sampling.MCMC.MCMCSampler.ProgressChanged">
            <summary>
            Event is raised when the simulation progress changes.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.MCMC.MCMCSampler.ProgressChangedEventHandler">
            <summary>
            Event is raised when the simulation progress changes.
            </summary>
            <param name="percentComplete">The percent complete as decimal between 0 and 1; e.g. 10% complete is passed through the event as 0.1.</param>
            <param name="progressText"></param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.ProgressChangedRate">
            <summary>
            Get and set the progress changed rate. The default is to update progress with every 1% (0.01) change in progress. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.CancellationTokenSource">
            <summary>
            Cancellation token source.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.PopulationMatrix">
            <summary>
            Gets the population matrix used for population-based samplers.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.MarkovChains">
            <summary>
            Gets the list of sampled Markov Chains.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.AcceptCount">
            <summary>
            Keeps track of the number of accepted samples per chain.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.SampleCount">
            <summary>
            Keeps track of the number of calls to the proposal sampler per chain.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.AcceptanceRates">
            <summary>
            The acceptance rate per chain.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.MeanLogLikelihood">
            <summary>
            The average log-likelihood across each chain for each iteration.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.OutputLength">
            <summary>
            Gets and sets the number of posterior parameter sets to output.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.Output">
            <summary>
            Output posterior parameter sets. These are recorded after the iterations have been completed. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCSampler.MAP">
            <summary>
            The output parameter set that produced the maximum likelihood. 
            This is referred to as the maximum a posteriori (MAP). 
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.ValidateSettings">
            <summary>
            Validate the sampler settings.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.ValidateCustomSettings">
            <summary>
            Validate any custom MCMC sampler settings. 
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.InitializeCustomSettings">
            <summary>
            Initialize any custom MCMC sampler settings.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.InitializeChains">
            <summary>
            Initialize the Markov Chains.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.SampleChain(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <summary>
            Sample the Markov Chain. 
            </summary>
            <param name="index">The Markov Chain zero-based index</param>
            <param name="state">The initial state.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <summary>
            Returns a proposed MCMC parameter set and its fitness. 
            </summary>
            <param name="index">The Markov Chain zero-based index.</param>
            <param name="state">The current chain state to compare against.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.Sample">
            <summary>
            Sample the Markov Chains.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.CancelSimulation">
            <summary>
            Cancel the MCMC simulation.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.ReportProgress(System.Double)">
            <summary>
            Report the simulation progress.
            </summary>
            <param name="percentComplete">The percent complete as decimal between 0 and 1; e.g. 10% complete is passed through the event as 0.1.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCSampler.Reset">
            <summary>
            Reset simulation results.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.MCMC.DEMCz">
            <summary>
            This class performs Bayesian MCMC using the adaptive Differential Evolution Markov Chain (DE-MCz) method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
               <b>  References: </b>
            <list type="bullet">
            <item><description>
                This class was adapted from research code developed by Brian Skahill (USACE-ERDC-CHL).
            </description></item>
            <item><description>
                This class is based on an algorithm described in:
                Braak and Vrugt "Differential Evolution Markov Chain with snooker updater
                and fewer chains" (2008) Statistics and Computing.
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCz.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood)">
            <summary>
            Constructs a new DEMCz sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCz.Jump">
            <summary>
            The jumping parameter used to jump from one mode region to another in the target distribution.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCz.JumpThreshold">
            <summary>
            Determines how often the jump parameter switches to 1.0; e.g., 0.10 will result in a large jump 10% of the time.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCz.Noise">
            <summary>
            The noise parameter (b).
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCz.ValidateCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCz.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Sampling.MCMC.DEMCzs">
            <summary>
            This class performs Bayesian MCMC using the adaptive Differential Evolution Markov Chain with snooker update (DE-MCzs) method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
               <b>  References: </b>
            <list type="bullet">
            <item><description>
                This class is based on an algorithm described in:
                Braak and Vrugt "Differential Evolution Markov Chain with snooker updater
                and fewer chains" (2008) Statistics and Computing.
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCzs.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood)">
            <summary>
            Constructs a new DEMCzs sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCzs.Jump">
            <summary>
            The jumping parameter used to jump from one mode region to another in the target distribution.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCzs.JumpThreshold">
            <summary>
            Determines how often the jump parameter switches to 1.0; e.g., 0.10 will result in a large jump 10% of the time.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCzs.SnookerThreshold">
            <summary>
            Determines how often to perform the snooker update; e.g., 0.10 will result in an update 10% of the time. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.DEMCzs.Noise">
            <summary>
            The noise parameter (b).
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCzs.ValidateCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCzs.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.DEMCzs.SnookerUpdate(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <summary>
            Returns a proposed MCMC iteration based on the Snooker Update method. 
            </summary>
            <param name="index">The Markov Chain zero-based index.</param>
            <param name="state">The current chain state to compare against.</param>
        </member>
        <member name="T:Numerics.Sampling.MCMC.Gibbs">
            <summary>
            This class performs Bayesian MCMC using the Gibbs method.
            </summary>
            <remarks>
            <para>
                <b>Authors:</b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References:</b>
            </para>
            <para> 
               <see href="https://en.wikipedia.org/wiki/Gibbs_sampling"/>
            </para>
            </remarks>
        </member>
        <member name="T:Numerics.Sampling.MCMC.Gibbs.Proposal">
            <summary>
            The proposal function for creating a proposal vector of parameters to evaluate.
            </summary>
            <param name="parameters">The list of parameters to evaluate.</param>
            <param name="prng">Random number generator.</param>
            <returns>Returns a proposal vector.</returns>
        </member>
        <member name="M:Numerics.Sampling.MCMC.Gibbs.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood,Numerics.Sampling.MCMC.Gibbs.Proposal)">
            <summary>
            Constructs a new RWMH sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>
            <param name="proposalFunction">The conditional proposal function.</param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.Gibbs.ProposalFunction">
            <summary>
            The proposal function for creating a proposal vector of parameters to evaluate.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.Gibbs.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Sampling.MCMC.HMC">
            <summary>
            This class performs Bayesian MCMC using the Hamiltonian Monte Carlo (HMC) method.
            </summary>
            <remarks>
            <para>
                <b>Authors:</b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description:</b>
            </para>
            <para>
                The optimal acceptance rate for this sampler is 65%, whereas Metropolis-Hastings samplers have an optimal rate of 23.4%. 
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
               <see href="https://en.wikipedia.org/wiki/Hamiltonian_Monte_Carlo"/>
            </para>
            </remarks>
        </member>
        <member name="T:Numerics.Sampling.MCMC.HMC.Gradient">
            <summary>
            The function for evaluating the gradient of the log-likelihood function.
            </summary>
            <param name="parameters">The list of parameters to evaluate.</param>
            <returns>Returns the gradient of the log-likelihood function.</returns>
        </member>
        <member name="M:Numerics.Sampling.MCMC.HMC.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood,Numerics.Mathematics.LinearAlgebra.Vector,System.Double,System.Int32,Numerics.Sampling.MCMC.HMC.Gradient)">
            <summary>
            Constructs a new HMC sampler.
            </summary>
            <param name="priorDistributions"></param>
            <param name="logLikelihoodFunction"></param>
            <param name="mass">Optional. The mass vector for the momentum distribution. Default = Identity.</param>
            <param name="stepSize">Optional. The leapfrog step size. Default = 0.1.</param>
            <param name="steps">Optional. The number of leapfrog steps. Default = 50.</param>
            <param name="gradientFunction">Optional. The function for evaluating the gradient of the log-likelihood. Numerical finite difference will be used by default.</param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.HMC.Mass">
            <summary>
            The mass vector for the momentum distribution.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.HMC.StepSize">
            <summary>
            The leapfrog step size. Default = 0.1.
            </summary>
            <remarks>
            This controls the size of each leapfrog step in the simulation. A smaller step size can lead to more accurate 
            simulations of the Hamiltonian dynamics but requires more steps to cover the same distance, increasing 
            computational cost. A larger step size reduces computational cost but can lead to inaccurate simulations 
            and a higher rejection rate. The step size is often tuned during the warm-up phase of the HMC algorithm to 
            achieve an optimal balance.
            </remarks>
        </member>
        <member name="P:Numerics.Sampling.MCMC.HMC.Steps">
            <summary>
            The number of leapfrog steps. Default = 50.
            </summary>
            <remarks>
            This refers to the number of leapfrog steps taken in each HMC iteration. 
            The total distance covered in the parameter space during each iteration is the product 
            of the step size and the number of steps. The number of steps determines how far the 
            algorithm moves in parameter space before proposing a new sample. A larger number of steps 
            allows the algorithm to explore more of the parameter space but can increase 
            computational time. Like the step size, the number of steps can also be tuned, though 
            it is often set to a fixed value.
            </remarks>
        </member>
        <member name="P:Numerics.Sampling.MCMC.HMC.GradientFunction">
            <summary>
            The function for evaluating the gradient of the log-likelihood.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.HMC.ValidateCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.HMC.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Sampling.MCMC.RWMH">
            <summary>
            This class performs Bayesian MCMC using the random walk Metropolis-Hastings (RWMH) method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
               <see href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.RWMH.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood,Numerics.Mathematics.LinearAlgebra.Matrix)">
            <summary>
            Constructs a new RWMH sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>
            <param name="proposalSigma">The covariance matrix Σ (sigma) for the proposal distribution.</param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.RWMH.ProposalSigma">
            <summary>
            The covariance matrix Σ (sigma) for the proposal distribution.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.RWMH.ValidateCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.RWMH.InitializeCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.RWMH.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Sampling.MCMC.SNIS">
            <summary>
            This class performs Bayesian inference using the self-normalizing importance sampling (SNIS) method.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.SNIS.#ctor(System.Collections.Generic.List{Numerics.Distributions.IUnivariateDistribution},Numerics.Sampling.MCMC.LogLikelihood,Numerics.Distributions.MultivariateNormal)">
            <summary>
            Constructs a self-normalizing importance sampler.
            </summary>
            <param name="priorDistributions">The list of prior distributions for the model parameters.</param>
            <param name="logLikelihoodFunction">The Log-Likelihood function to evaluate.</param>
            <param name="multivariateNormal">Optional. The multivariate Normal distribution is used for importance sampling. If null, naive Monte Carlo is performed.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.SNIS.InitializeCustomSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.SNIS.ChainIteration(System.Int32,Numerics.Mathematics.Optimization.ParameterSet)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.SNIS.ValidateSettings">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MCMC.SNIS.Sample">
            <summary>
            Perform importance sampling.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.MCMC.MCMCDiagnostics">
            <summary>
            A class for assessing Bayesian MCMC convergence diagnostics.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCDiagnostics.EffectiveSampleSize(System.Collections.Generic.IList{System.Double})">
            <summary>
            Compute the effective sample size.
            </summary>
            <param name="series">The series of posterior samples to evaluate.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCDiagnostics.GelmanRubin(System.Collections.Generic.IList{System.Collections.Generic.List{Numerics.Mathematics.Optimization.ParameterSet}},System.Int32)">
            <summary>
            The Gelman-Rubin diagnostic.
            </summary>
            <remarks>
            <para>
                The Gelman-Rubin diagnostic tests for lack of convergence by comparing the variance between multiple chains
                to the variance within each chain. If convergence has been achieved, the between-chain and within-chain
                variances should be identical. To be most effective in detecting evidence for non convergence, each chain should
                have been initialized to starting values that are dispersed relative to the target distribution.
            </para>
            </remarks>
            <param name="markovChains">The list of Markov Chains to be evaluated. The chains must be of equal length.</param>
            <param name="warmupIterations">The number of warm up MCMC iterations to discard at the beginning of the chains.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCDiagnostics.MinimumSampleSize(System.Double,System.Double,System.Double)">
            <summary>
            Computes the minimum sample size rounded to the nearest 100 based on the Raftery-Lewis method.
            </summary>
            <param name="quantile">The posterior quantile of interest; e.g., 0.975.</param>
            <param name="tolerance">The acceptable tolerance for this quantile; e.g., ±0.005.</param>
            <param name="probability">Probability of being within the range of tolerance; e.g., 0.95.</param>
            <returns>The minimum sample size as an integer, rounded to the nearest thousands place.</returns>
        </member>
        <member name="T:Numerics.Sampling.MCMC.MCMCResults">
            <summary>
            A class for post-processing and saving Bayesian MCMC results.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCResults.#ctor">
            <summary>
            Constructs an empty MCMC results.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCResults.#ctor(Numerics.Sampling.MCMC.MCMCSampler,System.Double)">
            <summary>
            Constructs and post-processes MCMC results. 
            </summary>
            <param name="sampler">The MCMC sampler to post-process.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param> 
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCResults.MarkovChains">
            <summary>
            The list of sampled Markov Chains.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCResults.Output">
            <summary>
            Output posterior parameter sets. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCResults.MeanLogLikelihood">
            <summary>
            The average log-likelihood across each chain for each iteration.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCResults.AcceptanceRates">
            <summary>
            The acceptance rate for each chain.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCResults.ParameterResults">
            <summary>
            Parameter results using the output posterior parameter sets.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.MCMCResults.MAP">
            <summary>
            The output parameter set that produced the maximum likelihood. 
            This is referred to as the maximum a posteriori (MAP). 
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCResults.ProcessParameterResults(Numerics.Sampling.MCMC.MCMCSampler,System.Double)">
            <summary>
            Process the parameter results.
            </summary>
            <param name="sampler">The MCMC sampler to post-process.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param> 
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCResults.ToByteArray(Numerics.Sampling.MCMC.MCMCResults)">
            <summary>
            Converts the MCMC Results to a byte array.
            </summary>
            <param name="mcmcResults">The MCMC Results.</param>
        </member>
        <member name="M:Numerics.Sampling.MCMC.MCMCResults.FromByteArray(System.Byte[])">
            <summary>
            Creates MCMC Results from a byte array.
            </summary>
            <param name="bytes">Byte array.</param>
        </member>
        <member name="T:Numerics.Sampling.MCMC.ParameterStatistics">
            <summary>
            A class for storing parameter statistics.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.ParameterStatistics.#ctor">
            <summary>
            Constructs an empty parameter summary statistics class.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.Rhat">
            <summary>
            The Gelman-Rubin diagnostic.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.ESS">
            <summary>
            The effective sample size.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.N">
            <summary>
            The total sample size.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.Mean">
            <summary>
            The parameter mean.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.Median">
            <summary>
            The parameter median.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.StandardDeviation">
            <summary>
            The parameter standard deviation.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.LowerCI">
            <summary>
            The lower confidence interval.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterStatistics.UpperCI">
            <summary>
            The upper confidence interval.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.MCMC.ParameterResults">
            <summary>
            A class for saving Bayesian MCMC results for each parameter.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MCMC.ParameterResults.#ctor(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Constructs new parameter results.
            </summary>
            <param name="values">List of posterior parameter values, aggregated together from each chain.</param>
            <param name="alpha">The confidence level; Default = 0.1, which will result in the 90% confidence intervals.</param>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterResults.SummaryStatistics">
            <summary>
            Parameter summary statistics.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterResults.KernelDensity">
            <summary>
            The kernel density results.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterResults.Histogram">
            <summary>
            The histogram results.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.MCMC.ParameterResults.Autocorrelation">
            <summary>
            The autocorrelation function for each parameter. This is averaged across each chain.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.MersenneTwister">
            <summary>
            The Mersenne Twister pseudo-random number generator.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            The source code can be found at:
            <see href="http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/MT2002/CODES/mt19937ar.c"/>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.#ctor">
            <summary>
            Construct a Mersenne Twister PRNG using the clock to create a random seed.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.#ctor(System.Int32)">
            <summary>
            Construct a Mersenne Twister PRNG given a seed. 
            </summary>
            <param name="seed">The PRNG seed.</param>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.#ctor(System.Int32[])">
            <summary>
            Construct a Mersenne Twister PRNG given an array of seeds.
            </summary>
            <param name="seeds">The array of PRNG seeds.</param>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.Initialize(System.UInt32)">
            <summary>
            Initialize with seed.
            </summary>
            <param name="seed">The PRNG seed.</param>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.Initialize(System.UInt32[],System.Int32)">
            <summary>
            Initialize by an array with array-length.
            </summary>
            <param name="init_key">The array of PRNG seeds.</param>
            <param name="key_length">The array length.</param>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.GenRandInt32">
            <summary>
            Generates a random number on [0,0xffffffff]-interval.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.GenRandInt31">
            <summary>
            Generates a random number on [0,0x7fffffff]-interval.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.GenRandReal1">
            <summary>
            Generates a random number on [0,1]-real-interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.GenRandReal2">
            <summary>
            Generates a random number on [0,1)-real-interval.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.GenRandReal3">
            <summary>
            Generates a random number on (0,1)-real-interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.GenRandRes53">
            <summary>
            Generates a random number on [0,1) with 53-bit resolution.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.Next">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.Next(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.Next(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Numerics.Sampling.MersenneTwister.NextDouble">
            <inheritdoc/>
        </member>
        <member name="T:Numerics.Sampling.SobolSequence">
            <summary>
            A class for generating a Sobol sequence.
            </summary>
            <remarks>
            <para>
            </para>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> Description: </b>
            </para>
            <para>
            A Sobol sequence is a low-discrepancy sequence with the property that for all values of N,
            its subsequence (x1, ... xN) has a low discrepancy. It can be used to generate pseudo-random
            points in a space S, which are equi-distributed.
            </para>
            <b> References: </b>
            <list type="bullet">
            <item> The implementation already comes with support for up to 21201 dimensions with direction numbers
            calculated from <see href="http://web.maths.unsw.edu.au/~fkuo/sobol/" />  </item>
            <item> This code was converted from the Apache Math Commons.  
            <see href = "https://commons.apache.org/proper/commons-math/apidocs/src-html/org/apache/commons/math4/random/SobolSequenceGenerator.html" /> </item>
            <item> <see href = "http://en.wikipedia.org/wiki/Sobol_sequence" /> </item>
            <item> <see href = "http://web.maths.unsw.edu.au/~fkuo/sobol/" /> </item>
            <item> "Numerical Recipes: The art of Scientific Computing, Third Edition. Press et al. 2017. </item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.SobolSequence.#ctor(System.Int32)">
            <summary>
            Constructs a new Sobol Sequence.
            </summary>
            <param name="dimension">Optional. The spatial dimension. Default = 1.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="F:Numerics.Sampling.SobolSequence.BITS">
            <summary>
            The number of bits to use. 
            </summary>
        </member>
        <member name="F:Numerics.Sampling.SobolSequence.SCALE">
            <summary>
            The scaling factor.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.SobolSequence.MAX_DIMENSION">
            <summary>
            The maximum supported space dimension. 
            </summary>
        </member>
        <member name="F:Numerics.Sampling.SobolSequence.count">
            <summary>
            The current index in the sequence. 
            </summary>
        </member>
        <member name="P:Numerics.Sampling.SobolSequence.Dimension">
            <summary>
            Space dimension. 
            </summary>
        </member>
        <member name="F:Numerics.Sampling.SobolSequence._direction">
            <summary>
            The direction vector for each component.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.SobolSequence.x">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.SobolSequence.initialize">
            <summary>
            Initialize the Sobol Sequence.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.SobolSequence.NextDouble">
            <summary>
            Returns a double-precision number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <returns>A double-precision number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Numerics.Sampling.SobolSequence.SkipTo(System.Int32)">
            <summary>
            Skip to a specific index in the sequence.
            </summary>
            <param name="index">The index in the sequence.</param>
            <returns>A double-precision number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="T:Numerics.Sampling.StratificationBin">
            <summary>
            A class for stratification bins.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <para>
            <b> References: </b>
            </para>
            <para>
            <see href = "https://en.wikipedia.org/wiki/Stratified_sampling" />
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct new stratification bin.
            </summary>
            <param name="lowerBound">The lower bound of the bin.</param>
            <param name="upperBound">The upper bound of the bin.</param>
            <param name="weight">Optional. The weight or probability width of the bin. The weight does not have to be equal to the width.
            Default = -1, which will make the weight = width.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initialize a new instance of the stratified X values class.
            </summary>
            <param name="element">XElement to deserialized into a stratified x value class.</param>
        </member>
        <member name="P:Numerics.Sampling.StratificationBin.LowerBound">
            <summary>
            Get the lower bound of the bin.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationBin.UpperBound">
            <summary>
            Get the upper bound of the bin.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationBin.Midpoint">
            <summary>
            Gets the midpoint of the bin.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationBin.Weight">
            <summary>
            The weight given to the stratification bin. This is often the same value as the bin width.
            However, end bins can be assigned different weights to ensure unity.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.CompareTo(Numerics.Sampling.StratificationBin)">
            <summary>
            Comparison of two bins. The bins cannot be overlapping.
            </summary>
            <param name="other">The bin to compare to.</param>
            <returns>
            0 if the upper bound and lower bound are bit-for-bit equal.
            +1 if this bin is lower than the compared bin.
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.Clone">
            <summary>
            Creates a copy of the stratification bin.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.Equals(System.Object)">
            <summary>
            Checks whether two stratification bins are equal.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.SaveToXElement">
            <summary>
            Returns an XElement of a stratification bin, can be used for serialization.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.SaveToXElement(System.Collections.Generic.IList{Numerics.Sampling.StratificationBin})">
            <summary>
            Returns an XElement of a list of stratification bins, can be used for serialization.
            </summary>
            <param name="stratificationBinList">Collection of stratification bins.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationBin.XElementToStratificationBinList(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement to a list of stratification bins.
            </summary>
            <param name="element">the XElement that will be deserialized to a list of stratification bins.</param>
        </member>
        <member name="T:Numerics.Sampling.StratificationOptions">
            <summary>
            A class for stratification options.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="P:Numerics.Sampling.StratificationOptions.LowerBound">
            <summary>
            Get the lower bound of the starting bin.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationOptions.UpperBound">
            <summary>
            Get the upper bound of the last bin.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationOptions.NumberOfBins">
            <summary>
            Returns the number of bins. Must be greater than 1.
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationOptions.IsProbability">
            <summary>
            Determines if the values to be stratified are probabilities [0,1].
            </summary>
        </member>
        <member name="P:Numerics.Sampling.StratificationOptions.IsValid">
            <summary>
            Determines if the stratification options are valid.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.#ctor(System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Constructs a stratification options class.
            </summary>
            <param name="lowerBound">The lower bound of the starting stratification bin.</param>
            <param name="upperBound">The upper bound of the last stratification bin.</param>
            <param name="numberOfBins">The number of stratification bins.</param>
            <param name="isProbability">Optional. Determines if the values to be stratified are probabilities [0,1]. Default = False.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initialize a new instance of the stratification options class from XElement.
            </summary>
            <param name="element">XElement to deserialize into a stratification options class.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.SaveToXElement">
            <summary>
            Returns an XElement of stratification options, can be used for serialization.
            </summary>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.SaveToXElement(System.Collections.Generic.IList{Numerics.Sampling.StratificationOptions})">
            <summary>
            Returns an XElement of a list of stratification options, can be used for serialization.
            </summary>
            <param name="stratificationOptions">Collection of stratification options.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.XElementToStratificationOptions(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement to a list of stratification options.
            </summary>
            <param name="element">the XElement that will be deserialized to a list of stratification options.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.Clone">
            <summary>
            Deep clones the stratification options object.
            </summary>
            <returns>A deep clone of the stratification options object.</returns>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.Clone(System.Collections.Generic.List{Numerics.Sampling.StratificationOptions})">
            <summary>
            Deep clones a list of stratification options to a list of stratification options.
            </summary>
            <param name="stratificationOptions">Collection of stratification options to be deep cloned.</param>
        </member>
        <member name="M:Numerics.Sampling.StratificationOptions.GetErrors">
            <summary>
            Gets a list of errors for the stratification options.
            </summary>
        </member>
        <member name="T:Numerics.Sampling.Stratify">
            <summary>
            A class for stratifying probabilities for sampling, or values for numerical integration. 
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            <b> References:</b>
            <list type="bullet">
            <item>
            <see href = "https://en.wikipedia.org/wiki/Stratified_sampling" />
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Numerics.Sampling.Stratify.XValues(Numerics.Sampling.StratificationOptions,System.Boolean)">
            <summary>
            Returns a list of stratified x value bins.
            </summary>
            <param name="options">The stratification options.</param>
            <param name="isLogarithmic">Optional. Determines if the x values should be stratified with a linear or logarithmic (base 10) scale. Default = False.</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.XValues(System.Collections.Generic.List{Numerics.Sampling.StratificationOptions},System.Boolean)">
            <summary>
            Returns a list of stratified x value bins.
            </summary>
            <param name="options">a list of stratification options.</param>
            <param name="isLogarithmic">Optional. Determines if the x values should be stratified with a linear or logarithmic (base 10) scale. Default = False.</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.XToExceedanceProbability(System.Collections.Generic.List{Numerics.Sampling.StratificationBin},System.Func{System.Double,System.Double},System.Boolean)">
            <summary>
            Returns a list of stratified exceedance probability bins given a list of stratified x value bins and a function to transform x values to exceedance probabilities.
            The transform function must convert x values in ascending order to exceedance probabilities in descending order.
            </summary>
            <param name="xValues">List of stratified x value bins.</param>
            <param name="transformFunction">Function to transform x values to exceedance probabilities.
            The transform function must convert x values in ascending order to exceedance probabilities in descending order.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.XToProbability(System.Collections.Generic.List{Numerics.Sampling.StratificationBin},System.Func{System.Double,System.Double},System.Boolean)">
            <summary>
            Returns a list of stratified non-exceedance probability bins given a list of stratified x value bins and a function to transform x values to non-exceedance probabilities.
            The transform function must convert x values in ascending order to non-exceedance probabilities in ascending order.
            </summary>
            <param name="xValues">List of stratified x value bins.</param>
            <param name="transformFunction">Function to transform x values to non-exceedance probabilities.
            The transform function must convert x values in ascending order to non-exceedance probabilities in ascending order.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.Probabilities(Numerics.Sampling.StratificationOptions,Numerics.Sampling.Stratify.ImportanceDistribution,System.Boolean)">
            <summary>
            Returns a list of stratified probability bins.
            </summary>
            <param name="options">The stratification options.</param>
            <param name="distributionType">Optional. The importance distribution type to stratify with. Default = Uniform.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.MultivariateProbabilities(Numerics.Sampling.StratificationOptions,Numerics.Sampling.Stratify.ImportanceDistribution,System.Boolean,System.Int32,System.Int32,System.Double[0:,0:])">
            <summary>
            Returns a multivariate list of stratified probability bins.
            </summary>
            <param name="options">The stratification options.</param>
            <param name="distributionType">Optional. The importance distribution type to stratify with. Default = Uniform.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
            <param name="dimension">The number of dimensions to stratify.</param>
            <param name="seed"> Seed for random number generator. </param>
            <param name="correlation">The correlation matrix. If null, independence is assumed.</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.Probabilities(System.Collections.Generic.List{Numerics.Sampling.StratificationOptions},Numerics.Sampling.Stratify.ImportanceDistribution,System.Boolean)">
            <summary>
            Returns a list of stratified probability bins.
            </summary>
            <param name="options">The list of stratification options.</param>
            <param name="distributionType">Optional. The importance distribution type to stratify with. Default = Uniform.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.ExceedanceProbabilities(Numerics.Sampling.StratificationOptions,Numerics.Sampling.Stratify.ImportanceDistribution,System.Boolean)">
            <summary>
            Returns a list of stratified exceedance probability bins.
            </summary>
            <param name="options">The stratification options.</param>
            <param name="distributionType">Optional. The importance distribution type to stratify with. Default = Uniform.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.ExceedanceProbabilities(System.Collections.Generic.List{Numerics.Sampling.StratificationOptions},Numerics.Sampling.Stratify.ImportanceDistribution,System.Boolean)">
            <summary>
            Returns a list of stratified exceedance probability bins.
            </summary>
            <param name="options">The list of stratification options.</param>
            <param name="distributionType">Optional. The importance distribution type to stratify with. Default = Uniform.</param>
            <param name="isExhaustive">Determines if the probability bin weights should be collectively exhaustive (i.e., sum to 1).</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.ProbabilityToX(System.Collections.Generic.List{Numerics.Sampling.StratificationBin},System.Func{System.Double,System.Double})">
            <summary>
            Returns a list of stratified x value bins given a list of stratified non-exceedance probability bins and a function to transform non-exceedance probabilities to x values.
            </summary>
            <param name="probabilities">List of stratified probabilities.</param>
            <param name="transformFunction">Function to transform non-exceedance probabilities to x values.</param>
        </member>
        <member name="M:Numerics.Sampling.Stratify.ExceedanceProbabilityToX(System.Collections.Generic.List{Numerics.Sampling.StratificationBin},System.Func{System.Double,System.Double})">
            <summary>
            Returns a list of stratified x value bins given a list of stratified exceedance probability bins and a function to transform exceedance probabilities to x values.
            </summary>
            <param name="probabilities">List of stratified exceedance probabilities.</param>
            <param name="transformFunction">Function to transform exceedance probabilities to x values.</param>
        </member>
        <member name="T:Numerics.Sampling.Stratify.ImportanceDistribution">
            <summary>
            Enumeration of importance distributions for stratified probabilities.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.Stratify.ImportanceDistribution.Gumbel">
            <summary>
            The Gumbel (Extreme Value Type I) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.Stratify.ImportanceDistribution.Normal">
            <summary>
            The normal (Gaussian) distribution.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.Stratify.ImportanceDistribution.Uniform">
            <summary>
            The uniform distribution.
            </summary>
        </member>
        <member name="F:Numerics.Sampling.Stratify.ImportanceDistribution.Log10Uniform">
            <summary>
            The log (base 10) uniform distribution.
            </summary>
        </member>
        <member name="T:Numerics.My.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Numerics.My.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Numerics.My.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Numerics.My.Resources.Resources.new_joe_kuo_6">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Numerics.ExtensionMethods">
            <summary>
            A class for extension methods.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                <list type="bullet"> 
                <item> Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil </item>
                <item> Tiki Gonzalez, USACE Risk Management Center, julian.t.gonzalez@usace.army.mil </item>
                </list>
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.ExtensionMethods.GetAttributeOfType``1(System.Enum)">
            <summary>
            Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumValue">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
        </member>
        <member name="M:Numerics.ExtensionMethods.AlmostEquals(System.Double,System.Double,System.Double)">
            <summary>
            Determines if the values are almost equal to each other.
            </summary>
            <param name="a">The left-side value.</param>
            <param name="b">The right-side value.</param>
            <param name="epsilon">The absolute tolerance level. Default = 1E-15.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.NextIntegers(System.Random,System.Int32)">
            <summary>
            Returns an array of random integers.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The number of samples to return.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.NextIntegers(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an array of random integers between a min and max value. 
            </summary>
            <param name="random">A random number generator.</param>
            <param name="minValue">The minimum value to sample between.</param>
            <param name="maxValue">The maximum value to sample between.</param>
            <param name="length">The number of samples to return.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.NextIntegers(System.Random,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array of random integers between a min and max value. 
            </summary>
            <param name="random">A random number generator.</param>
            <param name="minValue">The minimum value to sample between.</param>
            <param name="maxValue">The maximum value to sample between.</param>
            <param name="length">The number of samples to return.</param>
            <param name="replace">Determines whether or not to sample with replacement. Default = true.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.NextDoubles(System.Random,System.Int32)">
            <summary>
            Returns an array of random doubles.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The number of samples to return.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.NextDoubles(System.Random,System.Int32,System.Int32)">
            <summary>
            Returns a 2-D array of random doubles.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The number of samples to return.</param>
            <param name="dimension">The spatial dimension</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Add(System.Double[],System.Double[])">
            <summary>
            Adds corresponding elements of arrays.
            </summary>
            <param name="array">The array</param>
            <param name="values">The values to add.</param>
            <returns>The array after addition.</returns>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subtract(System.Double[],System.Double[])">
            <summary>
            Subtracts corresponding elements of arrays.
            </summary>
            <param name="array">The array</param>
            <param name="values">The values to subtract.</param>
            <returns>The array after subtraction.</returns>
        </member>
        <member name="M:Numerics.ExtensionMethods.Multiply(System.Double[],System.Double)">
            <summary>
            Multiplies an array with a scalar.
            </summary>
            <param name="array">The array</param>
            <param name="scalar">The scalar to multiply by.</param>
            <returns>The array after multiplication.</returns>
        </member>
        <member name="M:Numerics.ExtensionMethods.Divide(System.Double[],System.Double)">
            <summary>
            Divides an array with a scalar.
            </summary>
            <param name="array">The array</param>
            <param name="scalar">The scalar to divide by.</param>
            <returns>The array after division.</returns>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset``1(``0[],System.Int32)">
            <summary>
            Returns a subset of the array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a subset of the array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.RandomSubset``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a random subset of the array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="length">The number of samples to return.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="replace">Optional. Determines whether or not to sample with replacement. Default = false.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Fill``1(``0[],``0)">
            <summary>
            Fills an array with the specified value.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="value">The fill value.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.GetColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Gets a specific column from a 2-D array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">Zero-based index of the column.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.GetRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Gets a specific row from a 2-D array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">Zero-based index of the row.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.SetRow``1(``0[0:,0:],System.Int32,``0[])">
            <summary>
            Sets a specific row in a 2-D array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">Zero-based index of the row.</param>
            <param name="values">The new values.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.SetColumn``1(``0[0:,0:],System.Int32,``0[])">
            <summary>
            Sets a specific column in a 2-D array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">Zero-based index of the column.</param>
            <param name="values">The new values.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset``1(``0[0:,0:],System.Int32)">
            <summary>
            Returns a subset of the array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns a subset of the array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.RandomSubset``1(``0[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a random subset of the array.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="length">The number of samples to return.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="replace">Optional. Determines whether or not to sample with replacement. Default = false.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Fill``1(``0[0:,0:],``0)">
            <summary>
            Fills a 2-D array with the specified value.
            </summary>
            <typeparam name="T">The array value type.</typeparam>
            <param name="array">The array.</param>
            <param name="value">The fill value.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset(Numerics.Mathematics.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Returns a subset of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="startIndex">The start index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset(Numerics.Mathematics.LinearAlgebra.Vector,System.Int32,System.Int32)">
            <summary>
            Returns a subset of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.RandomSubset(Numerics.Mathematics.LinearAlgebra.Vector,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a random subset of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="length">The number of samples to return.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="replace">Optional. Determines whether or not to sample with replacement. Default = false.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Fill(Numerics.Mathematics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Fills a vector with the specified value.
            </summary>
            <param name="vector">The vector.</param>
            <param name="value">The fill value.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.GetColumn(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Gets a specific column from a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="index">Zero-based index of the column.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.GetRow(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Gets a specific row from a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="index">Zero-based index of the row.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.SetRow(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Double[])">
            <summary>
            Sets a specific row in a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="index">Zero-based index of the row.</param>
            <param name="values">The new values.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.SetColumn(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Double[])">
            <summary>
            Sets a specific column in a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="index">Zero-based index of the column.</param>
            <param name="values">The new values.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Returns a subset of the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="startIndex">The start index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Subset(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Int32)">
            <summary>
            Returns a subset of the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.RandomSubset(Numerics.Mathematics.LinearAlgebra.Matrix,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a random subset of the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="length">The number of samples to return.</param>
            <param name="seed">Optional. The prng seed. If negative or zero, then the computer clock is used as a seed.</param>
            <param name="replace">Optional. Determines whether or not to sample with replacement. Default = false.</param>
        </member>
        <member name="M:Numerics.ExtensionMethods.Fill(Numerics.Mathematics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Fills a matrix with the specified value.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="value">The fill value.</param>
        </member>
        <member name="T:Numerics.Utilities.SafeProgressReporter">
            <summary>
            A thread-safe class for reporting the progress of a parallel list of tasks.
            </summary>
            <remarks>
            <para>
                Authors:
                This class was co-developed by Alex Kennedy and Woodrow Fields. Credit to initial implementation and idea goes to Alex.
                Converted to C# and partially documented by Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.#ctor">
            <summary>
            Create a new thread-safe progress reporter.
            </summary>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.#ctor(System.String)">
            <summary>
            Create a new thread-safe progress reporter with a specified task name.
            </summary>
            <param name="taskName">The name of the task.</param>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.MostRecentProgress">
            <summary>
            Returns the most recent progress.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.MostRecentMessage">
            <summary>
            Returns the most recent message.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.MessageCount">
            <summary>
            Returns the message count.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.TaskName">
            <summary>
            Returns the task name.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.MostRecentMessageType">
            <summary>
            Returns the most recent message type.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.ExternalProcess">
            <summary>
            The external process being executed.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.IsCancelRequested">
            <summary>
            Determines if cancellation was requested.
            </summary>
        </member>
        <member name="P:Numerics.Utilities.SafeProgressReporter.ChildReporters">
            <summary>
            Returns a read only list of child progress reporters. 
            </summary>
        </member>
        <member name="E:Numerics.Utilities.SafeProgressReporter.ProgressReported">
            <summary>
            Event is raised when the progress is reported.
            </summary>
        </member>
        <member name="E:Numerics.Utilities.SafeProgressReporter.MessageReported">
            <summary>
            Event is raised when a message is reported.
            </summary>
        </member>
        <member name="E:Numerics.Utilities.SafeProgressReporter.TaskStarted">
            <summary>
            Event is raised when the task starts.
            </summary>
        </member>
        <member name="E:Numerics.Utilities.SafeProgressReporter.TaskEnded">
            <summary>
            Event is raised when the task ended.
            </summary>
        </member>
        <member name="E:Numerics.Utilities.SafeProgressReporter.ChildReporterCreated">
            <summary>
            Event is raised when a child reporter is created.
            </summary>
        </member>
        <member name="T:Numerics.Utilities.SafeProgressReporter.MessageType">
            <summary>
            Enumeration of progress reporter message types.
            </summary>
        </member>
        <member name="T:Numerics.Utilities.SafeProgressReporter.MessageContentStruct">
            <summary>
            Message Content structure.
            </summary>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.SetContext(System.Threading.SynchronizationContext)">
            <summary>
            Set synchronization context. 
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.IndicateTaskStart">
            <summary>
            Indicate that the task has started.
            </summary>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.IndicateTaskEnded">
            <summary>
            Indicate that the task has ended.
            </summary>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.OnProgressReported(System.Double)">
            <summary>
            Performs action when progress is reported.
            </summary>
            <param name="prog">The progress level.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.OnMessageReported(Numerics.Utilities.SafeProgressReporter.MessageContentStruct)">
            <summary>
            Performs action when message is reported.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.ReportExternalProcess(System.Diagnostics.Process)">
            <summary>
            Report external process that is running.
            </summary>
            <param name="process">The external process.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.OnExternalProcessReported(System.Diagnostics.Process)">
            <summary>
            Performs action when external process is reported.
            </summary>
            <param name="process">The external process.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.ReportError(System.String)">
            <summary>
            Report the error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.InvokeProgressHandlers(System.Object)">
            <summary>
            Invokes the progress handlers.
            </summary>
            <param name="state">The object.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.InvokeMessageHandlers(System.Object)">
            <summary>
            Invokes the message handlers.
            </summary>
            <param name="state">The object.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.RequestCancel">
            <summary>
            Cancel the task.
            </summary>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.CreateProgressModifier(System.Single,System.String)">
            <summary>
            Returns a new thread-safe progress reporter for a subtask.
            </summary>
            <param name="fractionOfTotal">The fraction of total progress to track.</param>
            <param name="subTaskName">The subtask name.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.Report(System.Double,System.String,Numerics.Utilities.SafeProgressReporter.MessageType)">
            <summary>
            Report progress and message.
            </summary>
            <param name="progress">The progress to report.</param>
            <param name="message">The message text.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.ReportProgress(System.Double)">
            <summary>
            Report progress.
            </summary>
            <param name="progress">The progress to report.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.ReportMessage(System.String,Numerics.Utilities.SafeProgressReporter.MessageType)">
            <summary>
            Report message.
            </summary>
            <param name="message">The message text.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:Numerics.Utilities.SafeProgressReporter.ReportMessage(Numerics.Utilities.SafeProgressReporter.MessageContentStruct)">
            <summary>
            Report message.
            </summary>
            <param name="message">The message to report.</param>
        </member>
        <member name="T:Numerics.Tools">
            <summary>
            A class of public utility functions.
            </summary>
            <remarks>
            <para>
                <b> Authors: </b>
                Haden Smith, USACE Risk Management Center, cole.h.smith@usace.army.mil
            </para>
            </remarks>
        </member>
        <member name="F:Numerics.Tools.DoubleMachineEpsilon">
            <summary>
            Value used for comparing double precision equivalence. Represented as 2^(-53) = 1.11022302462516E-16.
            </summary>
        </member>
        <member name="F:Numerics.Tools.SingleMachineEpsilon">
            <summary>
            Value used for comparing single precision equivalence. Represented as 2^(-24) = 5.96046447753906E-07
            </summary>
        </member>
        <member name="F:Numerics.Tools.Euler">
            <summary>
            Euler constant.
            </summary>
        </member>
        <member name="F:Numerics.Tools.GoldenRatio">
            <summary>
            The golden ratio. 
            </summary>
        </member>
        <member name="F:Numerics.Tools.LogSqrt2PI">
            <summary>
            Log of square root of 2*pi
            </summary>
        </member>
        <member name="F:Numerics.Tools.Sqrt2PI">
            <summary>
            Square root of 2*pi
            </summary>
        </member>
        <member name="F:Numerics.Tools.Sqrt2">
            <summary>
            Square root of 2
            </summary>
        </member>
        <member name="F:Numerics.Tools.Log2">
            <summary>
            Log of 2.
            </summary>
        </member>
        <member name="M:Numerics.Tools.Sign(System.Double,System.Double)">
            <summary>
            Returns a value with the same magnitude as a and the same sign as b.
            </summary>
            <param name="a">Value a.</param>
            <param name="b">Value b.</param>
        </member>
        <member name="M:Numerics.Tools.Swap(System.Double@,System.Double@)">
            <summary>
            Swap value a with value b.
            </summary>
            <param name="a">Value a.</param>
            <param name="b">Value b.</param>
        </member>
        <member name="M:Numerics.Tools.Sqr(System.Double)">
            <summary>
            Returns the squared value of a.
            </summary>
            <param name="a">Value a.</param>
        </member>
        <member name="M:Numerics.Tools.Pow(System.Double,System.Int32)">
            <summary>
            Returns the value of a raised to the power of b.
            </summary>
            <param name="a">The value a.</param>
            <param name="b">The exponent b.</param>
        </member>
        <member name="M:Numerics.Tools.Log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number. 
            </summary>
            <param name="x">The number whose logarithm is to be found.</param>
        </member>
        <member name="M:Numerics.Tools.Log(System.Double)">
            <summary>
            Returns the natural (base e) logarithm of a specified number. 
            </summary>
            <param name="x">The number whose logarithm is to be found.</param>
        </member>
        <member name="M:Numerics.Tools.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Euclidean distance between two points ||x - y||.
            </summary>
            <param name="x1">X of point 1.</param>
            <param name="y1">Y of point 1.</param>
            <param name="x2">X of point 2.</param>
            <param name="y2">Y of point 2.</param>
        </member>
        <member name="M:Numerics.Tools.Distance(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the Euclidean distance between two points ||x - y||.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <returns></returns>
        </member>
        <member name="M:Numerics.Tools.Distance(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the Euclidean distance between two points ||x - y||.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <param name="weights">Weights.</param>
            <returns></returns>
        </member>
        <member name="M:Numerics.Tools.Normalize(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the normalized values ranging between 0 and 1.
            <para> 
            <see href="https://www.codecademy.com/article/normalization"/>
            </para>
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Denormalize(System.Collections.Generic.IList{System.Double},System.Double,System.Double)">
            <summary>
            Returns the denormalized values. 
            </summary>
            <param name="values">The list of normalized values to denormalize.</param>
            <param name="min">The minimum value from the original data.</param>
            <param name="max">The maximum value from the original data.</param>
        </member>
        <member name="M:Numerics.Tools.Standardize(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the standardized values. 
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Destandardize(System.Collections.Generic.IList{System.Double},System.Double,System.Double)">
            <summary>
            Returns the destandardized values. 
            </summary>
            <param name="values">The list of standardized values to destandardize.</param>
            <param name="mean">The mean of the original data.</param>
            <param name="standardDeviation">The standard deviation of the original data.</param>
        </member>
        <member name="M:Numerics.Tools.Sum(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Estimates the sum of a list of values.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Sum(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the sum of a list of values.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Sum(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Estimate the sum of a list of values. 
            </summary>
            <param name="values">The list of values.</param>
            <param name="indicators">The list of indicators (0's or 1's).</param>
            <param name="useComplement">If false, 1's are indicator, if true, all 0's are indicator. Default = false.</param>
        </member>
        <member name="M:Numerics.Tools.SumProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the sum product of two lists of values.
            </summary>
            <param name="values1">The first list of values.</param>
            <param name="values2">The second list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Mean(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the mean of a list of values.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Mean(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Estimates the mean of a list of values.
            </summary>
            <param name="values">The list of values.</param>
            <param name="indicators">The list of indicators (0's or 1's).</param>
            <param name="useComplement">If false, 1's are indicator, if true, all 0's are indicator. Default = false.</param>
        </member>
        <member name="M:Numerics.Tools.Product(System.Collections.Generic.IList{System.Double})">
            <summary>
            Estimates the product of a list of values.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Product(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Estimates the product of a list of values.
            </summary>
            <param name="values">The list of values.</param>
            <param name="indicators">The list of indicators (0's or 1's).</param>
            <param name="useComplement">If false, 1's are indicator, if true, all 0's are indicator. Default = false.</param> 
        </member>
        <member name="M:Numerics.Tools.MinMax(System.Collections.Generic.IList{System.Double},System.Double@,System.Double@)">
            <summary>
            Returns the minimum and maximum values from a list of values.
            Returns NaN if the list is empty or any entry is NaN.
            </summary>
            <param name="values">The list of values.</param>
            <param name="min">Output. Minimum value.</param>
            <param name="max">Output. Maximum value.</param>
        </member>
        <member name="M:Numerics.Tools.ArgMin(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the index of the minimum value.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.ArgMax(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the index of the maximum value.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Min(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the smallest value from a list of values.
            Returns NaN if the list is empty or any entry is NaN.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Min(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Returns the smallest value from a list of values.
            Returns NaN if the list is empty or any entry is NaN.
            </summary>
            <param name="values">The list of values.</param>
            <param name="indicators">The list of indicators (0's or 1's).</param>
            <param name="useComplement">If false, 1's are indicator, if true, all 0's are indicator. Default = false.</param> 
        </member>
        <member name="M:Numerics.Tools.Max(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the largest value from a list of values.
            Returns NaN if the list is empty or any entry is NaN.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Numerics.Tools.Max(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Returns the largest value from a list of values.
            Returns NaN if the list is empty or any entry is NaN.
            </summary>
            <param name="values">The list of values.</param>
            <param name="indicators">The list of indicators (0's or 1's).</param>
            <param name="useComplement">If false, 1's are indicator, if true, all 0's are indicator. Default = false.</param> 
        </member>
        <member name="M:Numerics.Tools.ParallelAdd(System.Double@,System.Double)">
            <summary>
            Supporting function used to add doubles from an interlocked parallel loop.
            </summary>
            <param name="valueToAddTo">The value to add to.</param>
            <param name="valueToAdd">The value to add.</param>
        </member>
        <member name="M:Numerics.Tools.LogSumExp(System.Double,System.Double)">
            <summary>
            The log-sum-exponential function.
            </summary>
            <param name="u">Log of u.</param>
            <param name="v">Log of v.</param>
        </member>
        <member name="M:Numerics.Tools.LogSumExp(System.Collections.Generic.IList{System.Double})">
            <summary>
            The log-sum-exponential function. 
            </summary>
            <param name="values">The list of values of log.</param>
        </member>
        <member name="M:Numerics.Tools.Sequence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a sequence of integers.
            </summary>
            <param name="start">The starting value.</param>
            <param name="end">The ending value.</param>
            <param name="step">The step size.</param>
        </member>
        <member name="M:Numerics.Tools.Sequence(System.Double,System.Double,System.Double)">
            <summary>
            Returns a sequence of doubles.
            </summary>
            <param name="start">The starting value.</param>
            <param name="end">The ending value.</param>
            <param name="step">The step size.</param>
        </member>
        <member name="M:Numerics.Tools.Compress(System.Byte[])">
            <summary>
            Returns a compressed a byte array.
            </summary>
            <param name="data">An array of bytes.</param>
        </member>
        <member name="M:Numerics.Tools.Decompress(System.Byte[])">
            <summary>
            Returns a decompressed byte array.
            </summary>
            <param name="data">An array of bytes.</param>
        </member>
    </members>
</doc>
